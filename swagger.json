{
  "openapi": "3.0.1",
  "info": {
    "title": "Unisys Stealth Ecosystem API Programming Reference Guide",
    "description": "This displays best with the following browsers: Chrome, Firefox, and Microsoft Edge.\n\n# Getting Started\n**Note**: this tutorial does not necessarily represent best practices for the programming language, such as using global variables which is generally not recommended. The purpose of this tutorial is simply to get you started and familiar with the EcoAPI.\n\nThe Stealth Ecosystem API (EcoAPI) is a REST API that enables users to query and interact with their Stealth environment programmatically using simple HTTP requests. An API, or Application Programming Interface, allows programs to interact with each other in a consistent manner by utilizing a common interface. REST stands for Representational State Transfer. A REST API is one such common interface where API calls are made using HTTP requests.\n\nThis guide contains a short tutorial to get you started, general information about the EcoAPI, and specific EcoAPI request information.\n\nHTTP requests can be made:\n- in a browser (only GET requests)\n- using our [PowerShell cmdlets](./#section/General-Information/PowerShell-cmdlets)\n- with a tool such as [Postman](https://www.getpostman.com/) or [Insomnia](https://insomnia.rest/)\n- programmatically in a script\n\nIf you are working on the Management Server itself, the [PowerShell cmdlets](./#section/General-Information/PowerShell-cmdlets) are the easiest to use. Open a PowerShell console session and enter the commands.\n\nIf you are new to REST APIs in general, we strongly recommend using a tool such as [Postman](https://www.getpostman.com/) or [Insomnia](https://insomnia.rest/). Referencing this documentation, you can enter the HTTP method, URL, authentication, and request body to make a request.\n\nOnce you are familiar with the REST API, you can start automating tasks with your own code. We have several example scripts in PowerShell, Python, and Ruby but all programming languages capable of making a web request can work.\n\n## The Browser\nWe will start with a simple request to determine the version of the EcoAPI service that is running on the Management Server. Visit the following link in the browser on the Management Server:\n```\nhttps://localhost:8448/uisStealth/EcoApi/latest/version\n```\nThe response displays the EcoAPI version represented in XML format. All GET requests can be made through the browser, but all GET requests besides `/version` require authentication. To make requests directly from your computer, instead of directly on the Management Server, replace `localhost` with the IP address of your Management Server. The default port is `8448`, but if the Management Server software was installed with a different port, use that port instead.\n\nNow try to view the configuration resources. Replace `version` with `configuration` in the URL as follows:\n```\nhttps://localhost:8448/uisStealth/EcoApi/latest/configuration\n```\nFor this request, you will be prompted to enter the Enterprise Manager administrator credentials. Once credentials are supplied, the response displays all the information about your Stealth configurations.\n\nThis response details all of the configurations, but it does not display much about the roles or other child resources. Copy one of the configuration unique identifiers (IDs), say for example, `B1424D98-E57A-A08E-AB90-C8248B9DC4E9`. Request the complete configuration by going to this URL in your browser:\n```\nhttps://localhost:8448/uisStealth/EcoApi/latest/configuration/B1424D98-E57A-A08E-AB90-C8248B9DC4E9?recursive=true\n```\nThe resulting response details information about all of the resources that are associated with this configuration. If you have a lot of resources, this could take some time. Only use \"recursive\" when needed, and be careful using it without specifying a unique identifier.\n\nIssuing requests through use of the browser provides a quick way to view your Stealth resources. If you want to create, update, or delete Stealth resources, we recommend you use a dedicated REST API client, our PowerShell cmdlets, or your own custom script.\n\n## PowerShell cmdlets\nNow that we know how to get resources, we can create some.\n\nOpen a PowerShell console session on the Management Server. Before issuing any commands, you need to run [Connect-StealthServer](./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Connect-StealthServer.html). To do so, enter the following command in the PowerShell console session:\n```powershell\nConnect-StealthServer localhost -Credential (Get-Credential) -TrustCert\n```\nYou can tab complete in the PowerShell console. Try partially typing the cmdlet name and press tab until you find the right one. You can do the same for cmdlet parameters by typing \"-\" and then tab.\n\nThe resulting response displays the hostname, port, and username. Note that you must run that command again if you open a new PowerShell terminal instance. If you want to use the Unisys-supplied PowerShell cmdlets on another system, follow the steps in the [PowerShell cmdlets](./#section/General-Information/PowerShell-cmdlets) section.\n\nEach request in this guide links to the associated cmdlet documentation. By referring to [create filter list](#operation/createFilterSet), you can see that the cmdlet for creating a filter list is [New-StealthFilterList](./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthFilterList.html).\n\nEnter the following commands:\n```powershell\n$filter = New-StealthQualifiedFilter -IpAddress \"1.1.1.1\"\n$filterList = New-StealthFilterList -Name \"Test cmdlets create\" -Description \"This was created as part of the EcoAPI tutorial.\" -Children $filter\n```\nYou just created your first Stealth resource. The first line constructs the filter object so we include it under the filter list. The second line creates the filter list and the filter, and returns the created filter list with the filter.\n\nTry getting the filter list from the browser as described earlier in this section. You then see the newly created resources. If you want to get the filter list using the cmdlets, run the following command:\n```powershell\nGet-StealthFilterList -Id $filterList.Id\n```\nThat was pretty painless, but what about automating these tasks? We will go over scripting in the next section, but if PowerShell is your programming language of choice, we encourage you to put these PowerShell commands into a .ps1 file and try running the PowerShell script you just created.\n\n## Python\nUse of scripts enable you to automate common tasks. You can make HTTP requests to the EcoAPI in any programming language. In fact, that is what our PowerShell cmdlets do behind the scenes. This section provides detailed information about:\n- Making an HTTP request programmatically\n- Formatting the request body in JSON\n- Request status and response handling\n- Authorization handling\n- Error handling\n\nFor reference, the link below provides access to the final version of the script we create in this section (To save, right-click the link below and select \"Save target as\"):\n- [tutorial.py](./examples/python/tutorial.py)\n\n### Installing Python\nVisit [python.org](https://python.org) to download the latest version of Python 3, and install Python.\n\nYou can start using the Python Shell right away, but we will be using the terminal, which is also known as the command prompt. Add your Python path and pip path to the end of your `Path` environment variable and, replace `<user>` with the user you are logged into the computer as. You can search for `environment variable` in Windows.\n```\n;C:\\Users\\<user>\\AppData\\Local\\Programs\\Python\\Python38-32\n;C:\\Users\\<user>\\AppData\\Local\\Programs\\Python\\Python38-32\\Scripts\n```\nThe paths are separated by semicolons, which is why they are placed at the beginning. Click OK, and close the environment variables window. That is it for the set up. Now we test it.\n\nOpen a command prompt and type the following:\n```\npython\n```\nYou now see `>>>` at the left of your cursor. Enter `Ctrl-z` to exit the Python Shell.\n### Running a Python Program\nCreate a file and name it `myfile.py`. You can use [Notepad++](https://notepad-plus-plus.org), [Visual Studio Code](https://code.visualstudio.com), or another editor or IDE to edit your Python file.\n\nNow add something to our file:\n```python\n# Imports\nimport requests\n```\nThis imports the `requests` Python library so that we can easily make HTTP requests in our script. Save the file.\n\nIn the terminal navigate to the directory your file is in. For example, if your file is on the Desktop, type `cd Desktop` or `cd C:\\users\\<user>\\desktop`. Run your program:\n```\npython myfile.py\n```\nYou will notice an error message stating that you do not have the `requests` library. You can install the `requests` Python library with the Python package manager, pip, in the terminal:\n```\npip install requests\n```\nOnce that is done, run your program again:\n```\npython myfile.py\n```\nThe error message does not appear. You will need to use pip to install three other libraries as you progress through this tutorial.\n### Authorization Handling\nNow that we know how to run a Python program and import libraries, we need to be able to enter our credentials. We can create a function to get arguments from the command line.\n```python\n# Imports\n...\nimport argparse\n\n# Suppress warnings\nimport urllib3\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\ndef parse_args():\n    \"\"\"\n    Parses the command line args for common arguments and returns them formatted for use.\n    \"\"\"\n    # Parse the arguments\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('-h', '--host', help='The hostname or IP address of the computer running the EcoAPI service')\n    parser.add_argument('-n', '--port', help='The port number that the EcoAPI service is running on')\n    parser.add_argument('-u', '--user', help='The EcoAPI user name')\n    parser.add_argument('-p', '--password', help='The EcoAPI user password')\n\n    # Put the arguments into a dictionary for easy access\n    args = vars(parser.parse_args())\n\n    # Format the authorization and base URI\n    auth = (args['user'], args['password'])\n    base_uri = \"https://{}:{}/uisStealth/EcoAPI/latest\".format(args['host'], args['port'])\n    return auth, base_uri\n```\n**Important**: Note that Python uses indentation as syntax. Be sure the function\n contents are indented with spaces as shown. Alternatively, you can use tabs,\n but do not mix spaces and tabs.\n\nAfter the function, type the following:\n```python\n# Start of execution\nauth, base_uri = parse_args()\nprint(\"User name = \" + auth[0] + \"\\nBase URI = \" + base_uri)\n```\nBe sure it is left justified (no spaces). To test the function, save the file, and run it, passing in the host, port, user name, and password:\n```\npython myFile.py --host localhost --port 8448 --user <user name> --password <password>\n```\nYou should see these values printed out, except the password. Add default values so that you do not have to type that every time:\n```python\ndef parse_args():\n    ...\n    args = vars(parser.parse_args())\n\n    # Use default values if the argument was not provided\n    args['host'] = args['host'] if args['host'] != None else \"localhost\"\n    args['port'] = args['port'] if args['port'] != None else \"8448\"\n    args['user'] = args['user'] if args['user'] != None else \"<user name>\"\n\n    # Format the authorization and base URI\n    ...\n```\nFeel free to add a default value for the password. However, it is safer not to store your password. Save the file and test these changes by entering the following command:\n```\npython myFile.py -p <password>\n```\n### The GET Request and Responses\nWe are ready to start making EcoAPI requests. After the `parse_args()` function, create the `get_resource()` function:\n```python\n# Imports\n...\nimport json\nimport requests\n...\n\ndef get_resource(uri):\n    \"\"\"\n    Gets a resource using the given URI and returns the resource.\n    \"\"\"\n    print(\"Getting resource using URI:\\n{}\\n\".format(uri))\n    response = requests.get(uri, auth=auth, headers=headers, verify=False)\n    return response.json()\n\n# Start of execution\n...\nheaders = {'accept': 'application/json'}\n```\nThe `get()` function is part of the requests Python library. We pass the URI to it similar to how we typed the URI in the browser to get resources. We also pass our credentials in the auth variable. The headers variable specifies what format we want back. The browser returned the resources back in XML, and here we are using JSON.\n\nCall `get_resource()` from a new function called `main()`. We are going to put all our main functionality in `main()`. This makes it easier to handle errors later as well:\n```python\ndef get_resource(uri):\n    ...\n\ndef main():\n    uri = base_uri + '/filterList'\n    response = get_resource(uri)\n    print(\"The get response: {}\".format(json.dumps(response, indent=4, separators=(',', ': '))))\n\n...\nheaders = {'accept': 'application/json'}\nmain()\n```\nTest this by running the program the same way we did before. You can see all the filter lists on the Management Server represented in JSON. Also notice how we are able to print the entire JSON response in one line.\n\n### Error Handling\nWhat happens if something goes wrong? Maybe the URI has a typo or the credentials are wrong. There are many ways to handle errors, but we are simply going to print out the errors so we can see the message.\n\nAdd the following code around the call to `main()`:\n```python\n...\nheaders = {'accept': 'application/json'}\n\ntry:\n    main()\nexcept requests.exceptions.HTTPError as error_response:\n    # Print the error\n    print(\"***ERROR***\")\n    print(error_response)\n    if error_response.response is not None:\n        print(\"Error Messages:\\n{}\".format(json.dumps(error_response.response.json(), indent=4, separators=(',', ': '))))\n```\nThis is how exceptions are handled in Python. If an exception is thrown in `main()`, execution stops, and the exception is caught here. In this case, we print the error. This is why having `main()` is useful. We can add many EcoAPI requests to `main()`, and the error handling is in the one location.\n\nThere is one other thing we need to do. We need to throw an exception when an error is returned from the EcoAPI. Python makes this easy. Add the following line after the call to `requests.get()`:\n```python\nresponse.raise_for_status()\n```\nTo test this, use a bad password as follows:\n```\npython myFile.py -p \"bad password\"\n```\nThe resulting EcoAPI error alerts you that the supplied credentials are invalid.\n\n### The POST Request and Request Body\nNow we create a filter list with a filter.\n\nCreate the `create_filter_list()` function after `get_resource()`:\n```python\ndef get_resource(uri):\n    ...\n\ndef create_filter_list(name, description, ipAddress):\n    \"\"\"\n    Creates a filter list and a filter with the given information.\n    Returns the created unique identifier. An exception is thrown if an error\n    occurred.\n    \"\"\"\n    # JSON request body\n    filter_list_body = {\n        \"name\": name,\n        \"description\": description,\n        \"child\": [\n            {\n                \"filter\": {\n                    \"ipAddress\": ipAddress\n                }\n            }\n        ]\n    }\n\n    # Make create request\n    filter_list_uri = base_uri + \"/filterList\"\n    print(\"\\nCreating new filter list '{}' using URI:\\n{}\\n\".format(filter_list_body[\"name\"], filter_list_uri))\n    response = requests.post(filter_list_uri, json=filter_list_body, auth=auth, headers=headers, verify=False)\n    response.raise_for_status()\n\ndef main():\n    ...\n```\nLooking at the POST request above, it requires the same arguments as the GET request with the addition of a request body.\n\nTo find the request body format for a specific resource in this guide (for example, [filter list](#tag/Filter-List)), click that resource on the left. You can see the different fields for all Stealth resources. Note that on the right side of each request is a response sample. You can select XML or JSON, and expand or minimize different portions of the response. Another way to find the request body format is to do a GET request and view the response.\n\nAdd the call to `create_filter_list()` to the beginning of `main()`:\n```python\ndef main():\n    # Create a filter list with a filter\n    filter_list_name = \"Test Python create\"\n    filter_list_desc = \"This was created as part of the EcoAPI tutorial.\"\n    filter_ipAddress = \"1.1.1.1\"\n    created_filter_list_id = create_filter_list(filter_list_name, filter_list_desc, filter_ipAddress)\n\n  # Get the filter lists\n  ...\n```\nSave and run your program. Notice that the created filter list with the filter is returned and printed with the other filter lists. This verifies that the create request was successful.\n\nSo we are done right? We can make HTTP requests, see the response, construct and print JSON objects, and see any errors. There is just one more topic to cover: handling the request status.\n\n### Request Status Handling\nSome requests take longer than others and return a [request status](#tag/Request-Status) instead of the created resource. You will be alerted to the progress of your request. To find out what a specific request returns, you can use this guide, or make the request and see what is returned. You can also programmatically check the HTTP status code. If it is 202, Accepted, then a request status was returned.\n\nAfter the create request we need to wait for the create to finish. Add the following to `create_filter_list()`:\n```python\n# Imports\n...\nimport time\n...\n\ndef create_filter_list(...):\n    ...\n\n    # Wait for the request to finish\n    while request_status['finishedAt'] is None:\n        time.sleep(2)\n        request_status = get_resource(response.json()['uri'])\n    print(\"Response: {}\\n\".format(json.dumps(request_status, indent=4, separators=(',', ': '))))\n ```\nNotice we are making a get request but this time on the request status. We get the updated request status in a loop until the filter list create request is finished.\n\nSave and run your program. Note that you will need to change the filter list name in `main()` because we already created a filter list with that name. Also, if you have a lot of filter lists, you may want to comment out the print statement in `main()` at this point.\n\nYou can see all the status messages. Note that we could have printed out new messages inside the loop (while the request is in progress), but we are printing out all the messages after the request is finished for simplicity.\n\nNotice that in the printed request status, there is a createdResource field. Return the unique identifier of the created filter list from the request status as follows:\n```python\ndef create_filter_list(...):\n    ...\n\n    # Get the created filter list ID\n    id = None\n    if request_status is not None:\n        if len(request_status['createdResource']) > 0:\n            id = request_status['createdResource'][0]['id']\n            print(\"\\nCreated resource unique identifier: \" + id + \"\\n\")\n        else:\n            print(\"\\nThe request status does not contain created resources\\n\")\n    return id\n```\nNow we can get and print just the created filter list with the filter, instead of all the filter lists. Add the variable, `created_filter_list_id`, to `main()`:\n```python\nmain():\n    ...\n    created_filter_list_id = create_filter_list(filter_list_name, filter_list_desc, filter_ipAddress)\n\n    # Get the created filter list with the filter\n    uri = base_uri + '/filterList/' + created_filter_list_id\n```\nSave and run your finished program. Do not forget to change the filter list name. You can now see the created filter list printed out.\n\nThe advantage of writing your own scripts is automating your common scenarios or tasks that require more than one step. While this is not a programming tutorial, we hope it helps you get started with automating your Stealth tasks.\n\n# General Information\n\nThis section contains general information that applies to all EcoAPI requests.\n\n## Understanding a REST Request\n\nA RESTful API request is comprised of four major components:\n\n* URL\n* Method\n* Headers\n* Body\n\n**URL**: The URL identifies the resource and parameters for the request.\n\n**Method**: The method is the type of request on the URL. There are four supported methods:\n\n * GET - used to read resources\n * POST - usually used to create a resource or make a resource request\n * PUT - usually used to update a resource, but in some cases used to create a resource\n * DELETE - used to remove a resource\n\n**Headers**: Most requests require [authentication](#section/General-Information/Authentication-and-Authorization) which is provided via the `Authorization` header. The other two common headers are `Content-Type`, which describes the content of the payload body and `Accept`, which specifies what format the server should send the response in. Example values for both are `application/json` and `application/xml`.\n\n**Body**: Some POST and PUT requests need to send data to the server such as for creating or updating a resource. A GET request returns data about a resource. Such data is known as the body of the request.\n\nThe following are examples of how to create a group using a JSON payload. The request is using a username/password combination of admin:admin123.\n\n### Curl\n\n```\ncurl -v -X POST https://localhost:8448/uisStealth/EcoApi/group \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: Basic YWRtaW46YWRtaW4=' \\\n-d '\n{\n  \"name\": \"My Group\",\n  \"description\": \"My Description\"\n}'\n```\n\n### PowerShell\n\n```powershell\n$uri = \"https://localhost:8448/uisStealth/EcoApi/group\"\n$headers = @{\n  Accept = 'application/json'\n  Authorization = 'Basic YWRtaW46YWRtaW4='\n}\n$body = @\"\n{\n  \"name\": \"My Group\",\n  \"description\": \"My Description\"\n}\n\"@\nInvoke-RestMethod -Uri $uri -Headers $headers -Method Post -Body $body -ContentType \"application/json\"\n```\n\nIf you are connecting to the Management Server remotely, and you are using the default self-signed certificate for the EcoAPI, you must select the Run as Administrator option for PowerShell, and you must override the certificate policy to ensure that certificate errors are ignored. See the following article for more information: https://stackoverflow.com/questions/11696944/powershell-v3-invoke-webrequest-https-error. The example PowerShell scripts override the certificate policy; see the `InitSecurity` function in the [ecoapi.ps1](./examples/powershell.ecoapi.ps1) script.\n\n### Python\n\n```python\nimport requests\nuri = \"https://localhost:8448/uisStealth/EcoApi/group\"\nheaders = {\n  'Accept':'application/json'\n}\nbody = {\n  \"name\": \"My Group\",\n  \"description\": \"My Description\"\n}\nrequests.post(uri,\n  json=body,\n  auth=('admin','admin123'),\n  headers=headers)\n\n```\n\n### Ruby\n\n```ruby\nrequire 'net/http'\nrequire 'uri'\nrequire 'json'\nuri = URI.parse(\"https://localhost:8448/uisStealth/EcoApi/group\")\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nheaders = {\n  'Accept' => 'application/json',\n  'Content-Type' => 'application/json'\n}\nbody = {\n  'name' => 'My Group',\n  'description' => 'My Description'\n}\nrequest = Net::HTTP::Post.new(uri.request_uri, headers)\nrequest.basic_auth(\"admin\", \"admin123\")\nrequest.body = body.to_json\nhttp.request(request)\n```\n\n## Base URI\n\nYou can access resources by making an HTTP request using the following base URI:\n\n<pre>https://&lt;Management Server computer name or IP address&gt;:&lt;port number&gt;/uisStealth/EcoApi</pre>\n\nThe default port number is 8448; however, you might have specified a different port number when you installed the Management Server software.\n\nFor example, if you are accessing the EcoAPI from the Management Server using the default port, you can use the following base URI:\n\n<pre>https://localhost:8448/uisStealth/EcoApi</pre>\n\nThe provided examples assume that the **baseUri** variable is set to the base URI. For example, the PowerShell scripts assume the following statement:\n\n```powershell\n$baseUri = 'https://localhost:8448/uisStealth/EcoApi'\n```\n\n## API Version\n\nAfter defining the base URI, an API version can be defined. If an API version is not specified, version 1 is assumed. Note that only version 1 is currently supported.\n\nThe API version is not the same as the Stealth version. The Stealth version determines resources, fields, and the types of requests that can be made, while the API version defines the behavior or the request and the data that is returned to the user. Additional information on behavior changes for a particular resource can be found in that resource's section.\n\nTo define the API version, use the following URI:\n\n<pre>https://&lt;Management Server computer name or IP address&gt;:&lt;port number&gt;/uisStealth/EcoApi/v&lt;API version&gt;</pre>\n\nFor example, to use API version 1, use **/v1**; therefore, the following is the full URI to use API version 1:\n\n<pre>https://localhost:8448/uisStealth/EcoApi/v1</pre>\n\nIt is possible to access the latest API version using **/latest**. For example, the following is the full URI with the latest API version:\n\n<pre>https://localhost:8448/uisStealth/EcoApi/latest</pre>\n\n## Resource Path\n\nIn the sections that describe the resources, the resource URI is relative to the base URI; therefore, the full URI includes the base URI plus the resource URI. For example:\n\n<pre>https://&lt;Management Server computer name or IP address&gt;:&lt;port number&gt;/uisStealth/EcoApi/v&lt;API version&gt;/&lt;resource path&gt;</pre>\n\nFor example, the Version resource uses the resource path **/version**; therefore, the full URI to access the Version resource is:\n\n<pre>https://localhost:8448/uisStealth/EcoApi/v1/version</pre>\n\n## Query Parameters\n\nYou can optionally add query parameters to a request, as follows:\n\n<pre>https://localhost:8448/uisStealth/EcoApi/v&lt;API version&gt;/&lt;resource path&gt;?&lt;query parameter&gt;=&lt;value&gt;[&&lt;query parameter&gt;=&lt;value&gt;]...</pre>\n\nThe sections that describe the resources identify the allowed query parameters for each request, and the types of values allowed for each parameter.\n\n## Authentication and Authorization\n\nThe EcoAPI uses HTTP basic authentication which uses the HTTP header `Authorization: Basic <encoded user:password>`\n\n The `<encoded user:password>` contains the user name and password, separated by a colon, and encoded using Base64 encoding. The method that you use to make an EcoAPI request depends on the type of application. For example:\n\n* A web browser displays a dialog box to enter the user name and password.\n\n* The curl utility uses the -u option to enter the user name, and curl prompts you for the password.\n\n* In PowerShell, you can provide the encoded Authorization header entry (see the example later in this topic).\n\nFor more details on basic authentication, see <https://tools.ietf.org/html/rfc2617>.\n\nAfter a user is authenticated, the EcoAPI looks up the [Administrator user role](#tag/Admin-Role) assigned to that user and either permits or disallows the request based on the role. Each request identifies the roles that are permitted to make the request.\n\n### Supplying Credentials Using PowerShell\n\nThere are several ways to supply the necessary credentials using PowerShell. One way is to set the **Authorization** HTTP header:\n\n```\n$username = \"your-user-name\"\n$password = \"your-password\"\n$combo = [System.Text.Encoding]::ASCII.GetBytes(\"$username`:$password\")\n$encoded = [System.Convert]::ToBase64String($combo)\n$headers = @{ Authorization = \"Basic $encoded\" ; Accept = \"application/xml\"}\n```\n\nOnce the header is set, you can pass it to the **Invoke-RestMethod** or **Invoke-WebRequest** cmdlet:\n\n```\n$result = Invoke-RestMethod -Headers $headers . . .\n```\n\nAnother mechanism is to use the **Get-Credential** cmdlet to display a dialog box where you can enter your username and password; it returns a credential object. Pass the credential to the **Invoke-RestMethod** or **Invoke-WebRequest** cmdlet:\n\n```\n$cred = Get-Credential\r\n$result = Invoke-WebRequest -Credential $cred . . .\n```\n\nIn the PowerShell examples for the resources that are provided in this guide, the code to get credentials or build the HTTP headers is implied and is not repeated; however, the examples do assume the existence of the $**header** or $**cred** variable. Note that you can use either variable, regardless of which one appears in the example.\n\n### Supplying Credentials Using Python\n\nThere are several libraries available in Python for making HTTPS requests. The recommended method is to use the **Requests** package that can be installed using **pip**. Once this package is installed, credentials can be passed to the various methods of the **requests** module as follows:\n\n```python\nimport requests\nimport getpass\nusername = input('Enter user name: ')\npassword = getpass.getpass('Enter password: ')\nresult = requests.get(requestUri, auth=(username, password), verify=False, ...)\nresult = requests.post(requestUri, auth=(username, password), verify=False, ...)\n```\n\nRequests can ignore verifying the SSL certificate by setting **verify=False**.\n\n## Media Types\n\nTools that use the RESTful API must accept or send data using the following media types:\n\n* application/xml\n\n* application/json\n\nA tool can identify the request media type using the **Content-Type** HTTP header, and specify the desired response media type using the **Accept** HTTP header.\n\n## HTTP Status Codes\n\nThe application you create or customize should be configured to handle the following HTTP status codes:\n\n* 200 OK - The typical status returned when there are no problems.\n\n* 201 Created - Returned by the API for a create request that is not handled asynchronously.  The API returns the created object.\n\n* 202 Accepted - Returned by the API for an asynchronous request that is processed in the background.  The API returns a [Request Status](#tag/Request-Status) object that can be used to track the progress of the request.\n\n* 204 No Content - The request was successfully processed and no data is returned. This is a typical response code for a delete request and for an update request when nothing has changed.\n\n* 400 Bad Request - The request is invalid or contains invalid data. For example, a field might contain a value that does not meet the validation requirements.\n\n* 401 Unauthorized - No credentials were supplied and the request requires credentials, or the credentials that were supplied do not allow the request.\n\n* 403 Forbidden - The user has failed more than five consecutive log in attempts and the user's computer is locked out of the EcoAPI for 15 minutes. No error text accompanies this status code.\n\n* 404 Not Found - The request was made for a specific resource, but there is no resource with the supplied unique identifier.\n\n* 405 Method Not Allowed - The method used (for example, DELETE) is not valid for the given URI.\n\n* 406 Not Acceptable - The media type is not application/xml or application/json.\n\n* 408 Request Timeout - The API failed to respond within a given time as set by the application making the call.\n\n* 500 Internal Server Error - An unexpected error occurred in the API. Usually this indicates a coding or configuration issue that needs to be corrected by a developer or administrator.\n\n## Error Results\n\nIf an error status code (400 or greater) is returned by the server, the entity returned is as follows:\n\n```xml\n<errors>\n  <error>\n    <key>error key</key>\n    <message>error text</message>\n  </error>\n  . . .\n</errors>\n```\n\nWhere\n\n* **key** is an integer that identifies the error message. Refer to the _Unisys Stealth Log Entry Definition Guide_, which is available from the [Stealth Support website Documentation page](https://www.support.unisys.com/common/epa/DocumentationLibraries.aspx?PLA=st3&NAV=st3), for a complete list of error messages.\n\n* **message** is the text of the error. The message appears in the language specified by the `Accept-Language` HTTP Header if a translation has been provided for the indicated language. Refer to the _Unisys Stealth Information Center_, which is available from the [Stealth Support website Documentation page](https://www.support.unisys.com/common/epa/DocumentationLibraries.aspx?PLA=st3&NAV=st3), for details on providing error message translations.\n\nIn most cases, only a single error is returned; however, in some cases (such as input validation), multiple errors are returned.\n\n### Errors Reported by Tomcat\n\nSome errors are reported by Tomcat in HTML. The following are some scenarios where this occurs:\n\n* When you specify a resource in the URI that does not exist or is misspelled; for example, **/filterset**\n\n* When you make a request that is not supported for a resource; for example, PUT\n\n* In some cases, when you provide an incorrect type for a field; for example, entering \"abc\" in a Boolean field using JSON\n\n* When you provide an incorrect child resource; for example, entering a qualifier in the following example:\n\n```xml\n<configuration>\n  <name>configuration name</name>\n  <roles>\n    <role>\n      <name>role name</name>\n    </role>\n    <qualifier>\n      <name>qualifier name</name>\n    </qualifier>\n  </roles>\n</configuration>\n```\n\n### Handling Errors Using PowerShell\n\nWhen the PowerShell script uses the **Invoke-RestMethod** or **Invoke-WebRequest** cmdlet to make a request, and the server returns an error, the cmdlet throws an exception. Therefore, to view the HTTP status code or error messages, the script must catch the exception. The following example shows how to handle an error, including getting the HTTP status code and the error messages. It also shows how to handle Tomcat errors in HTML.\n\n```powershell\ntry {\n  $result = InvokeRestMethod . . .\n} catch {\n    $errorResponse = $_.Exception.Response\n    if ($errorResponse) {\n        # The <errors> XML appears a byte stream, read it and convert to XML object\n        $stream = $errorResponse.GetResponseStream()\n        $xmlErrors = [System.Text.Encoding]::UTF8.GetString($stream.GetBuffer(), 0, $stream.Length)\n\n        if ($xmlErrors -like \"*<errors><error>*\") {\n            # EcoAPI returned an <errors> object\n            [xml]$errors = $xmlErrors\n\n            # Now that we have the entity, print out the status code and all of the errors\n            [int]$status = $errorResponse.StatusCode\n            \"HTTP status: $status ($($errorResponse.StatusDescription))\"\n            \"Messages:\"\n            $errors.errors.error | foreach { \" $($_.key): $($_.message)\" }\n        } else {\n            # Tomcat returned an HTML error message\n            Write-Host $xmlErrors\n        }\n    }\n}\n```\n\n### Handling Errors Using Python\n\nWhen using the **Requests** package to make a request, you can tell the response object to throw an exception when the server returns an HTTP error. The following example shows how to handle an error, including getting the HTTP status code and the error messages:\n\n```python\nimport requests\nimport json\n\ntry:\n   result = requests.post(requestUri, auth=(username, password), headers={'accept': 'application/json'})\n   result.raise_for_status()\nexcept requests.exceptions.HTTPError as errorResponse:\n   print(\"The request received an error with status code: {0}\".format(errorResponse.response.status_code))\n   if errorResponse.response.text != None:\n      try:\n         print(\"Error Messages:\")\n         if errorResponse.response.headers['Content-Type'] == \"application/json\":\n            errData = json.loads(errorResponse.response.text)\n            errors = errData['error']\n            if errors != None:\n               for err in errors:\n                  errKey = err['key']\n                  errMsg = err['message']\n                  print(\"[{0}]: {1}\".format(errKey, errMsg))\n         elif errorResponse.response.headers['Content-Type'] == \"application/xml\":\n            root = ET.fromstring(errorResponse.response.text)\n            errors = root.findall('error')\n            if len(errors) > 0:\n               for err in errors:\n                  errKey = err.find('key').text\n                  errMsg = err.find('message').text\n                  print(\"[{0}]: {1}\".format(errKey, errMsg))\n      except requests.exceptions.RequestException as e:\n         print(\"Unable to get messages -- \" + e)\nexcept requests.exceptions.RequestException as e:\n   # Handle other exceptions\n   ...\n```\n\n## Password Handling\n\nWhen including a password as part of the data of a create or update request, such as when creating a Stealth(aware) Authentication Set, the tool making the request must encrypt the password using a public key and encode the results using Base64 encoding. This section describes how to do this for several scripting languages.\n\nFirst, you must obtain the public key for the Management certificate, which is used to encrypt sensitive data stored in the configuration database. You can do this by exporting the Management certificate from the Windows user certificate store on the Management Server. When exporting the certificate, do not include the private key. You can also use the [Export-MgmtCert.ps1](./examples/powershell/Export-MgmtCert.ps1) example PowerShell script to export the Management certificate. Refer to the _Unisys Stealth Information Center_ for more information regarding the Management certificate.\n\n_**Note:** The self-signed Management certificate created when Stealth is installed has the same name as the  user who was logged into the Management Server and installed the Management Server software. Once exported, the contents of the certificate file should look similar to the following:_\n\n<pre>-----BEGIN CERTIFICATE-----\nMIID8DCCAligAwIBAgIQGxCDsgS9CbNBeYH+vYoPETANBgkqhkiG9w0BAQUFADAq\nMRYwFAYDVQQDEw1zZXJ2aWNlYWNjdGVtMRAwDgYDVQQLEwdTdGVhbHRoMB4XDTE4\n. . .\ncWR9jq/wR5gaFzEDRv4s+/oBPLZnqQUxjcXJTBwXAvYk0KjBl4mn4TlqQ1F3O9XU\nO1BpPA==\n-----END CERTIFICATE-----\n</pre>\n\n\nThe certificate must be available in a file that can be read by the script. For purposes of the example scripts below, assume the file is located in the current working directory and is named **em-public.cer.** Note that you should adapt the following examples as required for your environment. There are many ways to properly encrypt and Base64 encode a password in most programming and scripting languages that you can use, depending on your requirements.\n\n### Password Handling in PowerShell\n\nThe following example shows how to encrypt and encode a password and include it in the XML for an Authorization Set:\n\n```powershell\n$certFile = 'em-public.cer'\n$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certFile)\n\n$password = 'AdminPortal1#'\n$bytes = [System.Text.Encoding]::UTF8.GetBytes($password)\n# Set OAEP Padding option to false\n$encrypted = $cert.PublicKey.Key.Encrypt($bytes, $false)\n# Make it little-endian\n[array]::Reverse($encrypted)\n# Base64 encode the encrypted password\n$securePassword = [Convert]::ToBase64String($encrypted)\n\n$authXml = @\"\n<authorization>\n    <id>265c61a8-6346-462d-a931-5d48c0ea0da5</id>\n    <name>Authorization Example</name>\n    . . .\n    <ldap>\n        <address>LDAP://ldap.server:3268/DC=mycompany,DC=com</address>\n        <useSsl>true</useSsl>\n        <username>portaladmin</username>\n        <password>$securePassword</password>\n    </ldap>\n</authorization>\n\"@\n```\n\n### Password Handling in Python\n\nThe following example shows how to encrypt and encode a password in Python. In this example, the cryptography module is used to handle encryption.\n\n```python\nimport base64\nfrom cryptography import x509\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\n\ncertFile = \"em-public.cer\"\ncert = x509.load_der_x509_certificate(open(certFile,\"rb\").read(), default_backend())\nkey = cert.public_key()\n\npassword = \"AdminPortal1#\"\nbytes = password.encode(\"utf-8\")\n# Use PKCS padding scheme\nencryptedPw = key.encrypt(bytes, padding.PKCS1v15())\n# Make it little-endian\nbytearr = bytearray(encryptedPw)\nbytearr.reverse()\n# Base64 encode the encrypted password\nencodedPassword = base64.b64encode(bytearr)\n# Convert from bytes to a string\nsecurePassword = encodedPassword.decode(\"utf-8\")\n\n$authJSON = {\n  id:\"265c61a8-6346-462d-a931-5d48c0ea0da5\",\n  name:\"Authorization Example\",\n  . . .\n  ldap:{\n      address:\"LDAP://ldap.server:3268/DC=mycompany,DC=com\",\n      useSsl:true,\n      username:\"portaladmin\",\n      password:securePassword\n  }}\n\n```\n\n## Scheduling Requests\n\nRequests that are marked as `schedulable` can be scheduled to run at some point in the future. To schedule a request, provide a `runAt` query parameter with an ISO 8601 formatted date; for example:\n\n<pre>https://localhost:8448/uisStealth/EcoApi/v&lt;API version&gt;/&lt;resource path&gt;?runAt=2019-11-06T17:48:41Z</pre>\n\nSupplying an improperly formatted date will result in an error. Due to possible system clock inaccuracies, requests that are scheduled to run only minutes into the past or future may execute immediately. This threshold can be modified in the ecoapi properties file and by default is set to 3 minutes. If a request is scheduled to execute too far into the past, an error will be returned.\n\nWhen you schedule a request, the API returns a [Request Status](#tag/Request-Status) that can be used to track its progress.\n\nIn addition to scheduling requests, you can specify a logical identifier to group related requests with one another. For example, say you've written a script to load a Stealth(aware) Solution, which has a Deployment ID of 1. When you schedule a request to provision this Solution, you can also supply a Deployment ID of 1 to correlate the request with the Solution; for example:\n\n<pre>https://localhost:8448/uisStealth/EcoApi/v&lt;API version&gt;/&lt;resource path&gt;?runAt=2019-11-06T17:48:41Z&deploymentId=1</pre>\n\nThis allows you to do things such as view which request statuses provisioned a solution with a certain Deployment ID.\n\n## PowerShell cmdlets\n\nThe Unisys.Stealth.EcoAPI PowerShell module can be used to interact with the Unisys Stealth EcoAPI. This module deals with all the resources and requests exposed via EcoAPI.\n\nThe [Unisys.Stealth.EcoAPI cmdlets](./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/index.html) support standard PowerShell features such as pipelining, discovering and specifying parameters, and handling results. The cmdlets provide a convenient mechanism to make ad-hoc EcoAPI requests and can be used in scripts without having to handle the details of working with a REST API.\n\n_**Note:** You must run [Connect-StealthServer](./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Connect-StealthServer.html) to connect to the Management Server before running other commands such as [New-StealthEndpointInspection](./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthEndpointInspection.html)._\n\nIf you need to run these cmdlets on another system besides the Management Server, do the following:\n\n1. On the Management Server, navigate to <code>&lt;_Stealth program directory_&gt;\\Unisys\\EnterpriseMgmt\\EcoAPI\\automation\\modules</code>, and copy the `Unisys.Stealth.EcoAPI` folder.\n\n2. If your organization's security policy enables you to update the `C:\\Program Files\\WindowsPowerShell\\Modules` directory, paste the **Unisys.Stealth.EcoAPI** folder into the `C:\\Program Files\\WindowsPowerShell\\Modules` directory on the system that you want to use EcoAPI cmdlets.\n\n  If your security policy does not enable you to update the `C:\\Program Files\\WindowsPowerShell\\Modules` directory, do the following:\n\n    a. Determine a module location that is appropriate for your organization's security policies.\n\n      _**Note:** PowerShell modules can be placed anywhere on a system, but it is simplest to use a directory that is            already in your **PSModulePath** environment variable.            However, if necessary, you can add a new location to **PSModulePath**.            For more information, see https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_modules?view=powershell-6._\n\n    b. Paste the **Unisys.Stealth.EcoAPI* folder into the **PSModulePath** location.\n\n3. Enter `Import-Module Unisys.Stealth.EcoAPI` at the top your script.\n\n# General Request Conventions\n\nThe EcoAPI has several conventions that govern its behavior. Any exceptions are noted in the individual request's documentation.\n\n## Data Handling During Update\n\nThis section describes common update request scenarios. You can combine all the scenarios in a single request or use separate requests. For example, you can change both the description of a filter set and identify the child filter lists that belong to the filter set in a single request, or make two separate requests.\n\n### Resource Unique Identifier Is Ignored\n\nThe body of an update request does not need to include the unique identifier of the resource being updated. Instead, the unique identifier is passed as part of the request URI. For example, the URI to update a role with a unique identifier of _243247BB-299A-4372-A888-F6538D77DF0D_ looks like this:\n\n`https://localhost:8448/uisStealth/EcoApi/role/243247BB-299A-4372-A888-F6538D77DF0D`\n\n### Null and Blank Data Handling During Update\n\nAn update request updates the resource with attributes included in the request and retains the existing information for fields not included in the request.\n\nFor example, if you update a filter list and only include the **name** field, only the name is updated. Note that a field is also not updated if the value in the request matches the existing value in the Enterprise Manager database.\n\nHere is an example for updating just the name:\n\n```xml\n<filterList>\n  <name>My new name</name>\n</filterList>\n```\n\nThe equivalent in JSON would be:\n\n```\n{\n  \"name\" : \"My new name\"\n}\n```\n\nTo remove the data value for a non-required field, or reset it to its default, pass an empty value in the request. For example, if you want to remove the description from a user, pass an empty &lt;description&gt; value.\n\nHere is an example for removing the description of a user:\n\n```xml\n<user>\n  <description></description>\n</user>\n```\n\nThe equivalent in JSON would be:\n\n```\n{\n  \"description\" : \"\"\n}\n```\n\nNote that when you query a resource, the response might not contain fields that have no values. For example, if you query the user resource, the description field might not appear.\n\n### Referencing Other Resources During an Update\n\nDuring an update request, you can only reference existing resources. Only the unique identifiers of these existing resources are used; that is, any other data passed with those resources is ignored. Therefore, an update request uses the resources as-is, which means that you can neither modify nor create referenced resources as part of an update request.\n\n_**Note:** Some resources support requests that allow you to add or remove associations using sub-resource URLs. For example, you can use the [Add User to Role](#operation/addUserToRole) request to associate a user to a role instead of making an [Update Role](#operation/updateRole) request._\n\n#### Adding and Removing Associations\n\nTo add or remove a relationship, provide the desired final state of the field. When adding a new association to another resource, if the resource already includes other referencing resources, you must include all existing resources in the update request. You cannot simply specify the new resource you want to add; doing so would result in the other associations being removed. Therefore, you need to identify all of the children.\n\nSimilarly, when removing an association, you must include all resources you want to retain.\n\nFor example, assume there is a role that has three COIs associated with it:\n\n```xml\n<role>\n  <cois>\n    <coi><id>1</id></coi>\n    <coi><id>2</id></coi>\n    <coi><id>3</id></coi>\n  </cois>\n</role>\n```\n\nTo add a fourth COI with a unique identifier of 4, we must include the existing ones:\n\n```xml\n<role>\n  <cois>\n    <coi><id>1</id></coi>\n    <coi><id>2</id></coi>\n    <coi><id>3</id></coi>\n    <coi><id>4</id></coi>\n  </cois>\n</role>\n\n```\n\nTo remove a COI, we must include the ones we want to keep. Thus, to remove the COI with a unique identifier of 3, we pass this body:\n\n```xml\n<role>\n  <cois>\n    <coi><id>1</id></coi>\n    <coi><id>2</id></coi>\n    <coi><id>4</id></coi>\n  </cois>\n</role>\n```\n\nNote that we could have added COI 3 and removed COI 4 in a single request by passing the final body.\n\nTo remove all of the COIs, the request body must contain an empty list:\n\n```xml\n<role>\n  <cois></cois>\n</role>\n```\n\n#### Reordering Associations\n\nTo reorder associations, provide the desired final state of the field. Thus, provide the associations in the correct order.\n\nUsing the previous example, to reverse the order of the COIs, use this request body:\n\n```xml\n<role>\n  <cois>\n    <coi><id>4</id></coi>\n    <coi><id>2</id></coi>\n    <coi><id>1</id></coi>\n  </cois>\n</role>\n```\n\n## Force Deletion\n\nThe request to delete a resource will fail if it is in use. You can override this behavior by providing the `force=true` query parameter. When provided, the resource will first be disassociated from all other resources and then deleted.\n\nFor example, assume there is a  COI that is referenced by multiple roles. A `DELETE /coi/{id}` request will fail with an in-use error. But a `DELETE /coi/{id}?force=true` request will first disassociate the COI from all the roles and then delete the COI.\n\n## Resource Reference Handling\n\nMany resources reference other resources. For example, a filter set can contain a number of filter lists. Some requests apply to both the resource and its referenced resources. This section describes how referenced resources are handled for such requests.\n\n### GET Request\n\nOn a `GET` request, by default only the **id** field of a referenced resource is provided. To include all fields of referenced resources, the `recursive=true` query parameter must be provided.\n\nFor example, `GET /filterSet` returns the details of the filter set and the unique identifiers of each filter list that belongs to the filter set. However, `GET /filterSet?recursive=true` returns the details of the filter set and the details of each filter list that belongs to the filter set, as well as all of the filters and filter lists belonging to those filter lists, including all of their referenced filter lists, filters, qualifiers and qualifier filters.\n\n_**Note:** Specifying `recursive=true` may negatively impact performance and memory usage, especially if the resource contains a deeply nested set of referenced resources._\n\n### DELETE Request\n\nOn a `DELETE` request, by default only the specified resource will be deleted. If the `recursive=true` query parameter is specified, each child resource is also deleted along  with any children of those resources. If combined with the [force](#section/General-Request-Conventions/Force-Deletion) query parameter, each child  resource is deleted, even if the child is in use.\n\nFor example, `DELETE /filterSet/{id}` deletes the identified filter set (assuming it is not in use); it doesn't delete any of its referenced filter lists. However, `DELETE /filterSet/{id}?recursive=true` deletes the identified filter set as well as its child filter lists, and any referenced filter lists, filters, qualifiers and qualifier filters, provided that they are not in use. A `DELETE /filterSet/{id}?recursive=true&force=true` request deletes all of them even if they are in use.\n\n# Validation\n\nThis section describes the validation performed for various data types. The fields for a resource are validated when the resource is created or updated. This section also identifies the expected formatting in various fields when querying the resource.\n\n## Certificate Names\n\nThe value of a certificate name must meet the following criteria:\n\n* Can be a maximum of 64 characters\n* Can start with a letter, number or special character\n* Can contain special characters but cannot contain any of the following special characters:\n  * plus sign (+)\n  * semicolon (;)\n  * comma (,)\n\n## Date and Time\n\nDate and time values must be formatted using the ISO 8601 standard, and it is highly recommended that you use the UTC time zone.\n\nThe following is the format of the ISO 8601 standard, where T is used to separate the date and time, and Z is used to indicate the UTC time zone.\n\n`yyyy-MM-ddTHH:mm:ss:SSSZ`\n\nTo specify a timezone offset, it can either be plus or minus followed by HH:mm.\n\n`yyyy-MM-ddTHH:mm:ss:SSSÂ±HH:mm`\n\nSee <https://www.w3.org/TR/NOTE-datetime> for more details on the ISO 8601 standard.\n\n## Descriptions\n\nThe value of a description field must meet the following criteria:\n\n* Can be a maximum of 255 characters\n* Can contain letters and numbers\n* Can contain special characters but cannot contain any of the following special characters:\n  * forward slash (/)\n  * double quotation mark (\")\n  * angle brackets (<>)\n\n## Domain Names\n\nThe value of a domain name or a fully qualified host name must meet the following criteria:\n\n* Can be a maximum of 255 characters\n* Must start with a letter, number, or underscore\n* Must end with a letter, number, or underscore\n* Cannot have two periods in a row\n* Can contain letters and numbers\n* Can contain any of these special characters:\n  * hyphen (-)\n  * period (.)\n  * underscore (_)\n\nRefer to the [Microsoft documentation, DNS Domain Names section](https://support.microsoft.com/en-us/help/909264/naming-conventions-in-active-directory-for-computers-domains-sites-and-ous), for more information.\n\n## Group Names\n\nThe value of an Active Directory group name field must meet the following criteria:\n\n* Can be a maximum of 64 characters\n* Must match an existing Active Directory group name\n* Must start with a letter\n* Can contain letters and numbers\n* Can contain special characters but cannot contain any of these special characters:\n  * pound sign (#)\n  * comma (,)\n  * plus sign (+)\n  * double quotation mark (\")\n  * backslash (\\)\n  * angle brackets (<>)\n  * semicolon (;)\n\n## IDs\nIn general, unique identifier (ID) values are created by the Enterprise Manager and provided in the **id**  field of the response entity. Therefore, when supplying a unique identifier, the script typically uses the value it obtained from a prior query.\n\nFor example, when creating a filter list with an embedded qualifier, the script first queries the qualifier and then provides the resulting unique identifier to identify the embedded qualifier.\n\nIn the event that the client script must supply a unique identifier when creating an object, (for example, when creating a Stealth(aware) Profile), it is highly recommend that you use a Universally Unique Identifier (UUID). The following text describes how to obtain a UUID in various languages:\n\nFor PowerShell:\n```powershell\n$id = [guid]::NewGuid()\n````\nFor Python:\n```python\nimport uuid\nid = str(uuid.uuid4())\n```\n\nFor Ruby:\n```ruby\nrequire 'securerandom'\nid = str(uuid.uuid4())\n```\n## IP Address\n\nThe value of an IP address field must contain one of the following:\n\n* A single IPv4 or IPv6 address\n* A range of IPv4 or IPv6 addresses, which is a pair of IP addresses separated by a hyphen (-), where the second IP address in the pair is greater than or equal to the first.\n* An IPv4 or IPv6 address in CIDR notation\n* An asterisk (*), which means any IP address\n\nThe following are examples of allowed IP addresses:\n\n| Value Type               | IPv4 Example                | IPv6 Example               |\n|--------------------------|-----------------------------|----------------------------|\n| Single address           | 192.168.1.100               | fe80::102a:cbc6:939b:709e  |\n| Address range            | 192.168.1.100-192.168.1.150 | fe80::7000-fe80::7fff      |\n| Address in CIDR notation | 192.168.0.0/16              | fe80::102a:cbc6:939b:0/112 |\n\n## Names\n\nThe value of a name field must meet the following criteria:\n\n* Can be a maximum of 28 characters, unless indicated otherwise\n* Must start with a letter\n* Can contain letters, numbers and spaces (but cannot end in a space nor have multiple spaces in a row)\n* Can contain any of these special characters:\n  * underscore (_)\n  * hyphen (-)\n  * comma (,)\n  * period (.); however, multiple periods in a row are not supported\n  * exclamation point (!)\n  * dollar sign ($)\n  * percent sign (%)\n  * ampersand (&)\n  * single quotation mark (')\n  * grave accent (`); also known as a backtick\n  * parentheses ()\n  * equal sign (=)\n  * at sign (@)\n  * square brackets ([])\n  * caret (^)\n  * curly brackets ({})\n  * tilde (~)\n\n## Object Identifier\n\nThe value of an [Object Identifier](https://en.wikipedia.org/wiki/Object_identifier) (OID) must meet the following criteria:\n\n* Must start with a number greater than 0\n* Must end with a number greater than 0\n* Can consist of any number of numerical values separated by periods.\n The following is the smallest example allowed: 1.1\n\nThe following are the Unisys default values:\n\n* Enhanced Key Usage (Computer Name Authorization) - 1.3.6.1.4.1.223.52.1.1\n* Enhanced Key Usage (User Name Authorization) - 1.3.6.1.4.1.223.52.1.2\n\n## Password\n\nThe value of a password field must be encrypted using the Management certificate. In addition, the encrypted password must be Base64 encoded. Refer to [Password Handling](#section/General-Information/Password-Handling) for more information.\n\nNote that the password is never returned as part of a read request; the password field is used only during a create or update request.\n\n## Network Protocol\n\nThe value of a protocol field must be one of the following:\n\n* An integer from 1 to 254\n* UDP, which is the same as 17\n* TCP, which is the same as 6\n* \\* or 255, which are both wildcards that mean any protocol\n\n## Server Port\n\nThe value of a port field must be one of the following:\n\n* An integer from 1 to 65535, which identifies a port number\n* A range of ports which is two port numbers separated by a hyphen (for example, 2000-2999). The second port number must be greater than or equal to the first.\n* \\* or 0, which are both wildcards that mean any port or the port range 1-65535\n\n## User Names\n\nThe value of a user name must meet the following criteria:\n\n* Can be a maximum of 104 characters\n* Can contain letters, numbers, and spaces\n* Must not start or end with spaces\n* Can contain special characters but cannot contain any of these special characters:\n  * double quotation mark (\")\n  * forward slash (/)\n  * backslash (\\)\n  * square brackets ([])\n  * colon (:)\n  * semicolon (;)\n  * vertical bar (|)\n  * equal sign (=)\n  * comma (,)\n  * plus sign (+)\n  * asterisk (*)\n  * question mark (?)\n  * angle brackets (<>)\n\nRefer to the [Microsoft documentation](https://msdn.microsoft.com/en-us/library/bb726984.aspx) for more information.\n\n# Troubleshooting\n\nThis section provides suggestions and workarounds for common issues you might encounter when using the EcoAPI.\n\n## Resolving an Out of Memory Error\n\nWhen using the EcoAPI to read configurations, roles, COIs, filter sets, filter lists, or qualifiers, if the Enterprise Manager database contains many instances of those objects, and if the **recursive** parameter is set to true for the read request, the request might result in an out of memory error. As a workaround for this issue, you can do either of the following:\n\n* Make the read requests with the **recursive** parameter set to **false**.\n\n  That is, make one request to get the parent object, and then make separate requests for each of the children, and separate requests for each of their children, and so on. For example, to get a full filter set tree, you would first read the filter set with recursive set to false. The result contains the unique identifiers of the child filter lists, which can be used to read each filter list, again with recursive set to false. That result contains the unique identifiers of the child filter lists and qualifiers, which can be used to read those objects.\n\n* Increase the allocated heap size for the EcoAPI by doing the following:\n  1. Open Windows PowerShell using the Run as Administrator option.\n  2. Change to the *&lt;Stealth data files directory&gt;*\\ProgramData\\Unisys\\SetupEM directory.\n  3. Enter the following command to determine the current heap size:\n\n   ```.\\Check-EcoAPI.ps1 -heap 0```\n  4. Decide on a new heap size.\n\n   _**Note:** Unisys recommends that you make the heap size 1024 MB or larger._\n\n  5. Enter the following command to set a new heap size, where &lt;size&gt; is expressed in megabytes:\n\n   ```.\\Check-EcoAPI.ps1 -heap <size>```\n\n   For example, if the current heap size is 2048 megabytes, increase it to 2560 megabytes by entering the following command:\n\n   ```.\\Check-EcoAPI.ps1 -heap 2560```\n\n# Disclaimer\nRelease 5.0 and Higher\n\n February 2020\n\n8225 4186-003\n\nLegal and Copyright Notices\n\nCopyright &copy; 2020 Unisys Corporation.\n\nAll rights reserved.\n\nWarranty Disclaimer\n\nNO WARRANTIES OF ANY NATURE ARE EXTENDED BY THIS DOCUMENT. Any product or related information described herein is only furnished pursuant and subject to the terms and conditions of a duly executed agreement to purchase or lease equipment or to license software. The only warranties made by Unisys, if any, with respect to the products described in this document are set forth in such agreement. Unisys cannot accept any financial or other responsibility that may be the result of your use of the information in this document or software material, including direct, special, or consequential damages.\n\nYou should be very careful to ensure that the use of this information and/or software material complies with the laws, rules, and regulations of the jurisdictions with respect to which it is used.\n\nThe information contained herein is subject to change without notice. Revisions may be issued to advise of such changes and/or additions.\n\nNotice to U.S. Government End Users: This software and any accompanying documentation are commercial items which have been developed entirely at private expense. They are delivered and licensed as commercial computer software and commercial computer software documentation within the meaning of the applicable acquisition regulations. Use, reproduction, or disclosure by the Government is subject to the terms of Unisys' standard commercial license for the products, and where applicable, the restricted/limited rights provisions of the contract data rights clauses.\n\nTrademarks\n\nUnisys and other Unisys product and service names mentioned herein, as well as their respective logos, are trademarks or registered trademarks of Unisys Corporation.\n\nAll other trademarks referenced herein are the property of their respective owners.\n\n# Documentation Updates\n\nThis document contains all the information that was available at the time of publication. Changes identified after release of this document are included in problem list entry (PLE) 19177882. To obtain a copy of the PLE, contact your service representative or access the current PLE from the product support Web site:\n\n<http://www.support.unisys.com/all/ple/19177882>\n\n_**Note:** If you are not logged into the product support site, you will be asked to do so._\n\n",
    "version": "5.0",
    "x-logo": {
      "url": "./stealth_logo.jpg",
      "href": "#top"
    }
  },
  "servers": [
    {
      "url": "https://ecoapi-host:8448/uisStealth/EcoApi/",
      "description": "EcoAPI Server",
      "variables": {}
    }
  ],
  "tags": [
    {
      "name": "Admin Role",
      "description": "You can use the `/adminRole` resource to obtain information about the Enterprise Manager administrator user roles, which are used to access Enterprise Manager and EcoAPI functionality.\n\nAn administrator role is a collection of administrator users. For more information, refer to the _Unisys Stealth Information Center_."
    },
    {
      "name": "COI",
      "description": "You can use the `/coi` resource to query, create, update, delete, import, and export Communities of Interest (COIs) that reside in the Enterprise Manager database.\n\nEndpoints that share a COI can communicate securely."
    },
    {
      "name": "API Status",
      "description": "You can use the /status resource to obtain information about the EcoAPI service.\n\n"
    },
    {
      "name": "Admin User",
      "description": "You can use the `/adminUser` resource to query, create, delete, and update Enterprise Manager administrator users.\n\nAn administrator user is an Enterprise Manager user who can administer or operate the Stealth environment using Enterprise Manager or the EcoAPI service and PowerShell cmdlets.\n\nYou can create multiple Enterprise Manager users and assign them to specific administrator roles to grant or restrict specific privileges."
    },
    {
      "name": "Any Role",
      "description": "The `/anyRole` resource is intended for internal use only and it provides all role information regardless of role type."
    },
    {
      "name": "Any User",
      "description": "The `/anyUser` resource is intended for internal use only. It provides read access to all CIM_Account instances regardless of their type. This includes Stealth users, Stealth groups and admin users."
    },
    {
      "name": "Endpoint",
      "description": " You can use the `/endpoint` resource to configure monitoring and packet inspection settings for your endpoints.\n\nThe monitoring and packet inspection feature enables you to selectively copy packets sent to or from a potentially suspicious endpoint and send them to a Packet Inspection Enablement Service. The packet is encrypted and is sent in its entirety, including the IP header. The Packet Inspection Enablement Service can be configured to forward the information to a third party tool for in-depth analysis. For more information, refer to the _Unisys Stealth Information Center_."
    },
    {
      "name": "Cache",
      "description": "You can use the `/cache` resource to query the statistics of the caches used by the EcopAPI and to flush the caches.\n\nThe EcoAPI maintains caches for various collections of objects to improve performance when many callers are trying to obtain the same information at the same time. The EcoAPI uses the following three cache policies:\n\n * Data that rarely changes is cached for five minutes before being re-read. Examples of this kind of data include property file settings, services, and computer systems that are monitored by Enterprise Manager.\n\n * Data that can change at any time is cached for five seconds before being re-read. Examples of this kind of data include Stealth configuration data such as filter lists, filter sets and qualifiers.</li>\n\n * User credentials and their associated roles are stored as long as they are being used, for up to five minutes. That is, if another request with the same credentials is made within five minutes of a prior request, the cached credentials are used. However, if more than five minutes has passed since the prior request, the credentials are authenticated and authorized based on the data in the Enterprise Manager database and Active Directory server."
    },
    {
      "name": "Channel",
      "description": "You can use the `/channel` resource to query Stealth(aware) Channels that reside in the Enterprise Manager database.\n\nA Channel identifies a communication path among servers, and under certain policies, maps to Stealth(core) COIs and filters between roles. For more information, refer to the _Unisys Stealth(aware) Installation and Administration Guide_."
    },
    {
      "name": "Node Map",
      "description": "You can use the `/nodeMap` resource to query Stealth(aware) node maps in the Enterprise Manager database.\n\nNode maps track Endpoint Property Set (EPS) membership and versions. This information is used by the Authorization Servers to determine when endpoint software needs to be updated or when a Node's membership has changed."
    },
    {
      "name": "User",
      "description": "You can use the `/user` resource to query, create, delete, and update users that have been added to Enterprise Manager.\n\nYou can create accounts for individual users or groups of users, and then add those users and groups to roles. Users and groups in the same role share the COIs, enabling their endpoints to communicate. You can add a mix of users and groups as required for your environment."
    },
    {
      "name": "Filter",
      "description": "You can use the `/filter` resource to query, create, and delete filters in the Enterprise Manager database.\n\nFilters belong to a [filter list](#tag/Filter-List) and are used to restrict communications."
    },
    {
      "name": "Invoke Job",
      "description": "You can use the `/invokeJob` resource to start a test job in Enterprise Manager. This job does nothing except updates its progress and add messages to the job until the job completes.\n\nThis resource is used by the integration tests to make sure the job monitoring function is properly updating the request."
    },
    {
      "name": "Filter Set",
      "description": "You can use the `/filterSet` resource to query, create, delete, and update the filter sets that have been added to the Enterprise Manager database.\n\nA filter set is a collection of filter lists used to restrict communications."
    },
    {
      "name": "Profile",
      "description": "You can use the `/profile` resource to query Stealth(aware) Profiles residing in the Enterprise Manager database.\n\nA Profile maps to a Stealth(core) role when the Profile is Stealth-enabled and identifies a group of servers that have a similar function.\n\nFor more information, refer to the _Unisys Stealth(aware) Installation and Administration Guide_."
    },
    {
      "name": "Settings",
      "description": "You can use the `/settings` resource to obtain information about the EcoAPI service, including the version number, the certificate used for SSL, and the number of resource requests that have been made since the service started.\n\n_**Note:** This resource is primarily intended for use by the Stealth Monitor Service. You should use the [Get API Status](#operation/getApiStatus) request instead for a more consumable response._"
    },
    {
      "name": "Qualifier",
      "description": "You can use the `/qualifier` resource to query, create, delete, and update qualifiers defined in the Enterprise Manager database.\n\nA qualifier specifies either a set of IP addresses or a set of protocols and ports to associate with a filter. The filter uses the information in the qualifier to either allow or deny network traffic."
    },
    {
      "name": "Flow",
      "description": "You can use the `/flow` resource to query Stealth(aware) Flows residing in the Enterprise Manager database.\n\nA Flow identifies the ports and protocols used for communication between Nodes. For more information, refer to the _Unisys Stealth(aware) Installation and Administration Guide_."
    },
    {
      "name": "Filter List",
      "description": "You can use the `/filterList` resource to query, create, update, and delete filter lists that reside in the Enterprise Manager database.\n\nA filter list is a collection of [filters](#tag/Filter) used to restrict communications.  A filter list can also include other filter lists."
    },
    {
      "name": "Service",
      "description": "You can use the `/service` resource to query the Stealth services and add or delete a **License Admin** service.\n\nThe Stealth services includes License Services and Authorization Service Groups, as well as other services."
    },
    {
      "name": "Project",
      "description": "You can use the `/project` resource to query multiple Stealth(aware) objects, such as [Solutions](#tag/Solution), [Environments](#tag/Environment), and [Endpoint Property Sets](#tag/Endpoint-Property-Set).\n\nNote that this resource, which is simply a container of objects, should not be confused with a Stealth(aware) project, which is equivalent to a **user** Environment."
    },
    {
      "name": "Log",
      "description": "You can use the `/log` resource to log things in the EcoAPI service log file.\n\nThis resource can be used to provide markers in the server log to identify major divisions in the client code. This resource is used extensively by the integration tests to identify the start and end of each test case."
    },
    {
      "name": "Session",
      "description": "You can use the `/session` resource to obtain a list of sessions from all Authorization Services. In addition, this resource can be used to reset an individual session or a collection of sessions.\n\nA session is a license tunnel connection and provides detailed information on the communications between the Authorization Service and a Stealth endpoint."
    },
    {
      "name": "Property",
      "description": "You can use the `/property` resource to change property values in the EcoAPI service.\n\nThis resource is used by the integration tests to change service behavior for the test cases, usually to simulate various error conditions."
    },
    {
      "name": "Version",
      "description": "You can use the `/version` resource to determine the version ofthe EcoAPI service. Additionally, you can use this resource to verify that the EcoAPI service is running by testing client communications with the service."
    },
    {
      "name": "Group",
      "description": "You can use the `/group` resource to query, create, and delete Active Directory groups that have been added to Enterprise Manager.\n\nYou can create accounts for groups of users or for individual users, and then you can add those group and user accounts to roles. Groups and users in the same roles share COIs, enabling their endpoints to communicate. You can add a mix of groups and users as required for your environment."
    },
    {
      "name": "License",
      "description": "You can use the `/license` resource to query, install, uninstall, and apply licenses that reside in the Enterprise Manager database.\n\nA license determines the number of Stealth-enabled components that can be active at one time for Stealth-secured communications.\n\nSee the _Unisys Stealth Information Center_ for detailed information and requirements for managing Stealth licenses."
    },
    {
      "name": "Solution",
      "description": "You can use the `/solution` resource to query and provision Stealth(aware) Solutions residing in the Enterprise Manager database.\n\nA Solution represents an application stack, such as an order processing, ERP, or HR application. Stealth(aware) identifies those applications using well-known ports and protocols as well as the Nodes in the network that have frequent communications with each other and are therefore likely to represent a single application stack. A Solution is comprised of a set of Profiles and their corresponding Channels.\n\nFor more information, refer to the _Unisys Stealth(aware) Installation and Administration Guide_."
    },
    {
      "name": "Computer System",
      "description": "You can use the `/computerSystem` resource to obtain informationn about systems that have been added to Enterprise Manager as well as to add or delete computer systems that have the Stealth Monitor Service installed.\n\nThe systems include all of the following:\n\n * Management Server\n * Standalone Authorization Servers\n * Secure Remote Authorization (SRA) Gateways\n * Secure Virtual Gateways\n * Stealth 2.8 Appliances"
    },
    {
      "name": "Authorization",
      "description": "You can use the `/authorization` resource to query Stealth(aware) Authorization Sets residing in the Enterprise Manager database.\n\nAn Authorization Set defines settings for a custom Authorization Service."
    },
    {
      "name": "Certificate",
      "description": "You can use the `/certificate` resource to obtain information about the Stealth certificates in the Enterprise Manager database.\n\nStealth uses various certificates to guarantee security, including for encryption, signing, and authorization. For more information, refer to the _Unisys Stealth Information Center_."
    },
    {
      "name": "Endpoint Package",
      "description": "You can use the `/endpointPackage` resource to query, create, delete, update, and distribute Stealth endpoint packages that reside in the Enterprise Manager database.\n\nAn endpoint package identifies an executable to deploy and run on an endpoint. For more information, refer to the _Unisys Stealth Information Center_."
    },
    {
      "name": "Environment",
      "description": "You can use the `/environment` resource to query Stealth(aware) Environments residing in the Enterprise Manager database.\n\nAn Environment contains a set of Solutions to be configured and deployed separately. A Stealth(aware) Project, as defined on the Stealth(aware) canvas, is equivalent to an Environment of **type** _User_. You should define only one **user** Environment in the Enterprise Manager database at a time."
    },
    {
      "name": "Endpoint Report",
      "description": "You can use the `/endpointReport` resource to query information about the endpoints in the form of a Configuration Audit Report (CAR).\n\nSee the _Unisys Stealth Information Center_ for an overview of when reports are sent and understanding report sequence numbers."
    },
    {
      "name": "Configuration",
      "description": "You can use the `/configuration` resource to query, create, delete, provision, and update configurations that reside in the Enterprise Manager database.\n\nA configuration includes [COIs](#tag/COI), [roles](#tag/Role), [groups](#tag/Group), [users](#tag/User), and [filters](#tag/Filter-List) for a particular set of Stealth communications. You can use the EcoAPI to retrieve information on the components in the configuration.\n\nThe Dynamic Isolation feature introduces the concept of global configurations and global isolation roles. *Global isolation roles* are used to isolate users or endpoints. These roles are assigned to a special type of configuration called the *global configuration*. You can assign multiple global isolation roles to the global configuration, but only one global configuration can exist in a single Stealth environment.\n\nTo learn more about global isolation roles, see the [Role](#tag/Role) resource."
    },
    {
      "name": "Endpoint Property Set",
      "description": "You can use the `/endpointPropertySet` resource to query and distribute Stealth(aware) Endpoint Property Sets (EPS) residing in the Enterprise Manager database.\n\nAn Endpoint Property Set is used to build the Authorization Sets to support\r\n that authorization and the endpoint package's settings.xml file."
    },
    {
      "name": "Qualifier Filter",
      "description": "You can use the `/qualifierFilter` resource to query, create, delete, and update qualifier filters in the Enterprise Manager database.\n\nQualifier filters contain the most commonly required properties for filtering on IP, TCP, or UDP headers. For more information, refer to the _Unisys Stealth Information Center_."
    },
    {
      "name": "LdapSettings",
      "description": "You can use the `/ldapSettings` resource to obtain information about the LDAP settings used in Enterprise Manager.\n\nThese settings configure Enterprise Manager to use LDAP to validate user and group names when adding endpoint users and groups to your configuration. You can also use LDAP to validate Enterprise Manager users when they sign in to Enterprise Manager or use the EcoAPI."
    },
    {
      "name": "Request Status",
      "description": "You can use the `/requestStatus` resource to obtain status updates on a prior asynchronous request made to the EcoAPI. If a specific request returns a request status URI, then that request is asynchronous and the URI can be used to query the current state of the request.\n\nEnterprise Manager handles every change request (create, delete, and update) by running a background job. If a user makes a change request, and that request results in a single background job, and if jobs of that type usually complete within a few seconds, then the EcoAPI waits for the job to complete before returning a response to the user. Therefore, for requests of this type, once the request completes, the script assumes that the requested change has completed and immediately continues processing.\n\n However, if the request requires multiple jobs (for example, a Project load request can result in hundreds of jobs), or if the request is handled by a single job where jobs of that type usually take more than a few seconds to complete (for example, provisioning a configuration), then the request returns a request status object. The text for each request documented in this Guide states whether the request returns a request status object.\n\n_**CAUTION:** Background tasks are processed only as long as the EcoAPI is running. If the EcoAPI service is stopped or restarted, then tasks that have not yet been attempted are not processed and lost._\n\n## Returning Created Resource Unique Identifiers\n\nFor a create request run in the background, once the request is complete, the **createdResources** field contains information about the created resource. The script can use this information to further interact with the created resource. If the create request results in multiple resources being created, the first entry in the **createdResources** field is for the primary resource, and the other entries are for the additional resources. For example, the XML entity to create a filter list (the primary or parent filter list) can contain child filter lists and qualifiers that should also be created. The first entry in the **createdResources** field if for the primary (parent) filter list, while the other entries are for the child filter lists and the qualifiers. However, there are no entries for unnamed qualifiers.\n\n## Understanding Background Request Task Interaction Patterns\n\nA background request is processed using one or more tasks. There are three possible interaction patterns used for those tasks:\n\n * Independent - Each task is completely independent of the other tasks.\n * Semi-independent - The request consists of a primary resource and multiple secondary resources; each secondary resource is treated independently, and the request can be performed on the primary resource even if the request fails on one or more of the secondary resources.\n * Dependent - The request consists of a primary and multiple secondary resources; and the request cannot be performed on the primary resource unless all of the tasks for the secondary resource are successful.\n\n### <a id=\"independentTask\">Understanding the Independent Tasks Pattern</a>\n\nThis pattern is used when the request allows the caller to identify multiple resources, and each resource is handled separately. An example is the [Reset Sessions](#operation/resetSessionsById) request, where the session for each IP address is handled separately. That is, the success, or failure, of the reset of one IP address has no bearing on whether any of the other IP addresses can be reset.\n\nFor independent tasks, the EcoAPI attempts every task, noting a problem with any task using a message **type** of **warning** within the request status messages. The final **state** is **finished** if all tasks ran successfully or **incomplete** if any of the tasks failed. Note that the final state could be **error** if there was a catastrophic error, such as losing the connection to the Enterprise Manager database that prevents the tasks from being attempted.\n\nThe script can review the request status messages to determine which tasks failed and then decide what to do about that. It could, for example, reissue the request for just the tasks that failed, or it could report the failures to the user.\n\n### <a id=\"semiindependentTask\">Understanding the Semi-Independent Tasks Pattern</a>\n\nThis pattern is used when the request allows the caller to identify a tree of resources, where there is a primary resource that owns other (secondary) resources, which in turn can own other (secondary) resources, and so on. The secondary resources are handled exactly the same as the resources in the independent tasks pattern, but the primary resource is handled differently. For the primary resource, if the task fails, the EcoAPI notes an error.\n\n An example is the [Create Filter Set](#operation/createFilterSet) request, where the filter set to be created is the primary resource, while all filter lists and qualifiers within the filter set tree are the secondary resources. In this case, the EcoAPI considers only those filter lists and qualifiers that are created as part of the filter set create request. The EcoAPI does not consider filter lists or qualifiers that already exist because there are no tasks associated with such resources. The EcoAPI attempts every secondary resource task, noting a problem with any task using a message **type** of **warning** within the request status messages. However, the primary resource task is handled differently; if the create task fails then the EcoAPI notes this using a message **type** of **error**. Therefore, there are three possible final **state** values:\n\n * **finished** if all tasks ran successfully\n * **incomplete** if any of the secondary resource tasks failed but the primary resource task completed successfully\n * **error** if the primary resource task failed\n\nNote that the final state of **error** also appears if there was a catastrophic error, such as losing the connection to the Enterprise Manager database that prevents the rest of the tasks from being attempted.\n\nThe script can handle issues encountered by such a request in a similar way to the independent tasks topic, as described previously.\n\n### <a id=\"dependentTask\">Understanding the Dependent Tasks Pattern</a>\n\nThis pattern is used when the request allows the caller to identify a tree of resources, which is the same as in the semi-independent task pattern. However, in this case, if the request fails for any of the secondary resources, then the request cannot continue because the request on the primary resource or the request on one of the other secondary resources is dependent on that secondary resource request succeeding.\n\nAn example is the [Load Project](#operation/loadProject) request. If any of the Solutions, Profiles, Channels, of Flows embedded within the Solution cannot be loaded, then the Solution cannot be loaded. That is, if there is a task failure, the EcoAPI notes the failure using a message **type** of **error** and immediately stops processing the tasks, setting the request status final **state** to **error**.\n\nTo recover from an error in a request with dependent tasks, the script could try to clean up the changes made so far, and then try issuing the request again. For the previously described example, the script could attempt the load request again, because a Project load request starts by first removing all existing Stealth(aware) objects."
    },
    {
      "name": "Role",
      "description": "You can use the `/role` resource to obtain information about the Stealth roles that are created in the Enterprise Manager database.\n\nA role is a collection of users and groups that share COIs. For more information, refer to the _Unisys Stealth Information Center_."
    }
  ],
  "paths": {
    "/adminRole": {
      "get": {
        "tags": [
          "Admin Role"
        ],
        "summary": "List Administrator Roles",
        "description": "Gets information about all the Enterprise Manager administrator user roles.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthAdminRole.html\" target=\"_blank\">Get-StealthAdminRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listAdminRole",
        "parameters": [
          {
            "name": "showUsers",
            "in": "query",
            "description": "If set to false or not provided, only the administrator user role information is returned. If set to true, the administrator users associated with each administrator role are listed.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All administrator roles returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRoles"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRoles"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthAdminRole",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      }
    },
    "/adminRole/{id}": {
      "get": {
        "tags": [
          "Admin Role"
        ],
        "summary": "Get Administrator Role",
        "description": "Gets information about a specific Enterprise Manager administrator user role.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthAdminRole.html\" target=\"_blank\">Get-StealthAdminRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getAdminRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the administrator user role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showUsers",
            "in": "query",
            "description": "If set to false or not provided, only the administrator user role information is returned. If set to true, the administrator users associated with each administrator role are listed.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Administrator user role with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRole"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthAdminRole",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      }
    },
    "/adminRole/{id}/adminUser/{adminUserId}": {
      "put": {
        "tags": [
          "Admin Role"
        ],
        "summary": "Add Administrator User to Administrator Role",
        "description": "Adds a specific administrator user to a specific administrator role.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Add-StealthAdminUserToRole.html\" target=\"_blank\">Add-StealthAdminUserToRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-AdminRole.ps1\" download=\"Update-AdminRole.ps1\">Update-AdminRole.ps1</a></li></ul></div>",
        "operationId": "addAdminUserToAdminRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the administrator role to add the administrator user to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adminUserId",
            "in": "path",
            "description": "The unique identifier of the administrator user to add to the administrator role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Administrator user added to administrator role.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRole"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because the administrator user is already associated with the administrator role."
          },
          "404": {
            "description": "There is no administrator role or administrator user with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Add-StealthAdminUserToRole",
        "x-samples": [
          "Update-AdminRole.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      },
      "delete": {
        "tags": [
          "Admin Role"
        ],
        "summary": "Remove Administrator User From Administrator Role",
        "description": "Removes an administrator user from an administrator role.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthAdminUserFromRole.html\" target=\"_blank\">Remove-StealthAdminUserFromRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-AdminRole.ps1\" download=\"Update-AdminRole.ps1\">Update-AdminRole.ps1</a></li></ul></div>",
        "operationId": "removeAdminUserFromAdminRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the administrator role to remove the administrator user from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adminUserId",
            "in": "path",
            "description": "The unique identifier of the administrator user to remove from the administrator role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Administrator user removed from administrator role.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRole"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRole"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because the administrator user is not associated with the administrator role."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthAdminUserFromRole",
        "x-samples": [
          "Update-AdminRole.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/adminUser": {
      "get": {
        "tags": [
          "Admin User"
        ],
        "summary": "List Administrator Users",
        "description": "Gets information about all Enterprise Manager administrator users.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthAdminUser.html\" target=\"_blank\">Get-StealthAdminUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listAdminUser",
        "responses": {
          "200": {
            "description": "A collection of administrator user entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUsers"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUsers"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthAdminUser",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "post": {
        "tags": [
          "Admin User"
        ],
        "summary": "Create Administrator User",
        "description": "Creates an administrator user in the Enterprise Manager database.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthAdminUser.html\" target=\"_blank\">New-StealthAdminUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-AdminUser.ps1\" download=\"Create-AdminUser.ps1\">Create-AdminUser.ps1</a></li></ul></div>",
        "operationId": "createAdminUser",
        "requestBody": {
          "description": "The administrator user to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AdminUser"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthAdminUser",
        "x-samples": [
          "Create-AdminUser.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/adminUser/{id}": {
      "get": {
        "tags": [
          "Admin User"
        ],
        "summary": "Get Administrator User",
        "description": "Gets information about a specific Enterprise Manager administrator user.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthAdminUser.html\" target=\"_blank\">Get-StealthAdminUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getAdminUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Enterprise Manager administrator user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Administrator user with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthAdminUser",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "put": {
        "tags": [
          "Admin User"
        ],
        "summary": "Update Administrator",
        "description": "Updates the description or password for an administrator user in the Enterprise Manager database.\n\nTo change the password for an administrator user, pass XML or JSON containing the previous password as well as the new password. Both passwords must be encoded with the public key of the Management certificate.\n\nNote that you cannot change the name or display name of an administrator user. If a name or display name is specified during the update the values will be ignored and the fields will be unchanged.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthAdminUser.html\" target=\"_blank\">Set-StealthAdminUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-AdminUser.ps1\" download=\"Update-AdminUser.ps1\">Update-AdminUser.ps1</a></li></ul></div>",
        "operationId": "updateAdminUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the administrator user to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An administrator user containing the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AdminUser"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resource was updated.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthAdminUser",
        "x-samples": [
          "Update-AdminUser.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      },
      "delete": {
        "tags": [
          "Admin User"
        ],
        "summary": "Delete Administrator User",
        "description": "Deletes an administrator user from the Enterprise Manager database, as specified by its unique identifier.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthAdminUser.html\" target=\"_blank\">Remove-StealthAdminUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "deleteAdminUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to false or not provided, the resource cannot be deleted if it is in use. If set to true, the resource is always deleted, even if it is in use. (A user is in use if it is assigned to one or more roles.)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource has been deleted. No response entity is returned."
          },
          "400": {
            "description": "The default portal administrator cannot be deleted.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthAdminUser",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/authorization": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "List Authorization Sets",
        "description": "Gets information about all Authorization Sets.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listAuthorization",
        "responses": {
          "200": {
            "description": "A collection of Authorization Set entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Authorizations"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorizations"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/authorization/{id}": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Get Authorization Set",
        "description": "Gets information about a specific Authorization Set.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getAuthorizationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the desired Authorization Set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Authorization Set with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/cache": {
      "get": {
        "tags": [
          "Cache"
        ],
        "summary": "List Caches",
        "description": "Gets all active caches. (A cache becomes active the first time it is accessed.)\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthCache.html\" target=\"_blank\">Get-StealthCache</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li></ul></div>",
        "operationId": "listCache",
        "responses": {
          "200": {
            "description": "A collection of cache entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Caches"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Caches"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthCache",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator"
        ],
        "x-since": "3.3"
      },
      "delete": {
        "tags": [
          "Cache"
        ],
        "summary": "Flush Caches",
        "description": "Removes all of the entries from all of the caches.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Clear-StealthCache.html\" target=\"_blank\">Clear-StealthCache</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li></ul></div>",
        "operationId": "flushCache",
        "responses": {
          "204": {
            "description": "The caches have been emptied. No response entity is returned."
          }
        },
        "x-cmdlet": "Clear-StealthCache",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator"
        ],
        "x-since": "3.3"
      }
    },
    "/cache/{id}": {
      "get": {
        "tags": [
          "Cache"
        ],
        "summary": "Get Cache",
        "description": "Gets information about the identified cache.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthCache.html\" target=\"_blank\">Get-StealthCache</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li></ul></div>",
        "operationId": "getCacheById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the cache.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cache with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cache"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cache"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthCache",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator"
        ],
        "x-since": "3.3"
      },
      "delete": {
        "tags": [
          "Cache"
        ],
        "summary": "Flush Cache",
        "description": "Removes all entries from the identified cache.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Clear-StealthCache.html\" target=\"_blank\">Clear-StealthCache</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li></ul></div>",
        "operationId": "flushCacheById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the cache to be cleared.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The cache has been emptied. No response entity is returned."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Clear-StealthCache",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator"
        ],
        "x-since": "3.3"
      }
    },
    "/certificate": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "summary": "List Certificates",
        "description": "Gets information about all certificates.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthCertificate.html\" target=\"_blank\">Get-StealthCertificate</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-Certificate.ps1\" download=\"List-Certificate.ps1\">List-Certificate.ps1</a></li><li><a href=\"./examples/python/list_certificate.py\" download=\"list_certificate.py\">list_certificate.py</a></li></ul></div>",
        "operationId": "listCertificate",
        "responses": {
          "200": {
            "description": "A collection of certificate entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Certificates"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificates"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthCertificate",
        "x-samples": [
          "List-Certificate.ps1",
          "list_certificate.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0"
      },
      "post": {
        "tags": [
          "Certificate"
        ],
        "summary": "Create or Import Certificate",
        "description": "Creates or imports a certificate.\n\nAlmost all certificate types can be created or imported using this request, except for CBA certificates, which can only be created or imported when you install Stealth in Legacy mode. CBA certificates cannot be created or imported when Stealth is installed in Aware mode. This is because you cannot create [users](#tag/User) in Aware mode, thus creating and importing CBA certifiates becomes nonsensical.\n\nIf a sha1Fingerprint value is supplied, an attempt is made to import a certificate from the Windows Certificate Store with this fingerprint; otherwise, this will be treated as a create request.\n\n  Note the following:\n\n * For most certificate types, the name and type are the only values needed.\n\n * Certificate-based authorization certificates additionally require a userId value.\n\n * Authorization certificates only require type and authServiceId values; a name value is not required. If a name value is provided, it is ignored and the IP address provided by the associated authServiceId value is used instead.\n\n * SSL certificates cannot be created using the EcoAPI.\n\nBeginning with Stealth release 4.0.027, you can import your own self-signed certificate or certificate from a Certificate Authority by supplying the following data in a create certificate request:\n\n```xml\n <certificate>\n  <type>cba</type>\n  <sha1Fingerprint>71 73 fd 7d..</sha1Fingerprint>\n </certificate>\n```\n\nThe sha1Fingerprint value can contain whitespace.\n\nBefore a certificate can be imported, it must already be installed in the Windows Certificate Store on the Management Server. Refer to the _Unisys Stealth Information Center_ for more information on where each certificate type needs to be placed in the Windows Certificate Store.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthCertificate.html\" target=\"_blank\">New-StealthCertificate</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Import-Certificate.ps1\" download=\"Import-Certificate.ps1\">Import-Certificate.ps1</a></li><li><a href=\"./examples/python/import_certificate.py\" download=\"import_certificate.py\">import_certificate.py</a></li><li><a href=\"./examples/python/create_certificate.py\" download=\"create_certificate.py\">create_certificate.py</a></li></ul></div>",
        "operationId": "createCertificate",
        "requestBody": {
          "description": "The certificate that is to be created or imported.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The create request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthCertificate",
        "x-samples": [
          "Import-Certificate.ps1",
          "import_certificate.py",
          "create_certificate.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0"
      }
    },
    "/certificate/{id}": {
      "get": {
        "tags": [
          "Certificate"
        ],
        "summary": "Get Certificate",
        "description": "Gets information about a specific certificate.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthCertificate.html\" target=\"_blank\">Get-StealthCertificate</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getCertificateById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the specific certificate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "This query parameter only applies to signing root certificates. When querying a signing root certificate, information about the child certificate-based authorization certificates are also returned. If this parameter is set to false or not provided, only the unique identifiers for the child certificate-based authorization certificates are returned. If set to true, all of the information for the certificate-based authorization certificates are returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthCertificate",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0"
      },
      "delete": {
        "tags": [
          "Certificate"
        ],
        "summary": "Delete Certificate",
        "description": "Deletes a certificate.\n\nWhen deleting management certificates, only certificates that are marked as 'invalid' can be deleted. Management certificates marked as 'valid' cannot be deleted, because they are in use by the Management Server.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthCertificate.html\" target=\"_blank\">Remove-StealthCertificate</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/delete_certificate.py\" download=\"delete_certificate.py\">delete_certificate.py</a></li></ul></div>",
        "operationId": "deleteCertificate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the certificate to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, a signing root certificate cannot be deleted if it is in use by other certificate-based authorization certificates. If set to true, the signing root certificate can be deleted along with all of the certificate-based authorization certificates that are using it. Note that this query parameter only applies to signing root certificates.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthCertificate",
        "x-samples": [
          "delete_certificate.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/channel": {
      "get": {
        "tags": [
          "Channel"
        ],
        "summary": "List Channels",
        "description": "Gets information about all Channels.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthChannel.html\" target=\"_blank\">Get-StealthChannel</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listChannel",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned Channel contains only the unique identifiers of the Flows. If set to true, the returned Channel contains the entire Flow data.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Channel entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Channels"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channels"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthChannel",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/channel/{id}": {
      "get": {
        "tags": [
          "Channel"
        ],
        "summary": "Get Channel",
        "description": "Gets information about a specific Channel.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthChannel.html\" target=\"_blank\">Get-StealthChannel</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getChannelById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Channel.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned Channel contains only the unique identifiers of the Flows. If set to true, the returned Channel contains the entire Flow data.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Channel with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthChannel",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/coi": {
      "get": {
        "tags": [
          "COI"
        ],
        "summary": "List COIs",
        "description": "Gets information about all COIs.\n\n_**Note:** The **direction** and **filterSet** fields are associated with the COI within the context of a role, which means these fields are present only when querying a role or configuration. In the former case, the **recursive** option can be set to either true or false. In the latter case, it must be set to true._\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthCOI.html\" target=\"_blank\">Get-StealthCOI</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-COI.ps1\" download=\"List-COI.ps1\">List-COI.ps1</a></li></ul></div>",
        "operationId": "listCoi",
        "responses": {
          "200": {
            "description": "A collection of COI entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Cois"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cois"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthCOI",
        "x-samples": [
          "List-COI.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "post": {
        "tags": [
          "COI"
        ],
        "summary": "Create COI",
        "description": "Creates a COI in the Enterprise Manager database.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthCOI.html\" target=\"_blank\">New-StealthCOI</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/create_coi.py\" download=\"create_coi.py\">create_coi.py</a></li></ul></div>",
        "operationId": "createCoi",
        "requestBody": {
          "description": "The COI to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Coi"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Coi"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Coi"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coi"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthCOI",
        "x-samples": [
          "create_coi.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/coi/import": {
      "post": {
        "tags": [
          "COI"
        ],
        "summary": "Import COI",
        "description": "Imports a COI into the Enterprise Manager database.\n\nYou can import a COI that you have previously exported from a separate Stealth environment.\n\nTo export a COI and import it on another system, you must first create and install an Import/Export [certificate](#tag/Certificate). The certificate you use to import the COI must be the one used on the system the COI was exported from. See the _Unisys Stealth Information Center_ for more information on import/export certificates.\n\nYou must specify the **name** query parameter when you import a COI. This value is used as the name of the COI when it is imported. The value you enter must be in URL-encoded format before you include it in the request. See [Query Parameters](#section/General-Information/Query-Parameters) on the General Information page for additional information about URL encoding.\n\nIf you do not include an input entity in the request, you must ensure a COI .blo file exists in the <b>&lt;_Stealth data files directory_&gt;\\Stealth Files\\Keys</b> directory with a file name that matches the name specified in the <b>name</b> query parameter.\n\nYou must make a subsequent [Update COI](#operation/updateCoi) request to update the imported COI if you want to set a description or change it to a Service COI.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Import-StealthCOI.html\" target=\"_blank\">Import-StealthCOI</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/ExportImport-COI.ps1\" download=\"ExportImport-COI.ps1\">ExportImport-COI.ps1</a></li><li><a href=\"./examples/ruby/export_import_coi.rb\" download=\"export_import_coi.rb\">export_import_coi.rb</a></li></ul></div>",
        "operationId": "importCoi",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The [name](#section/Validation/Names) of the COI to import.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificate",
            "in": "query",
            "description": "The unique identifier of an Import/Export certificate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "overwrite",
            "in": "query",
            "description": " If set to true, this option overwrites any file with the name of the COI provided.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The binary data for the COI to import. This is the binary data that was returned from a previous [Export COI](#operation/exportCoi) request, or the contents of a .blo file created when a COI was exported using the Enterprise Manager.",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The COI was successfully imported.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Coi"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coi"
                }
              }
            }
          },
          "400": {
            "description": "The name provided for the COI already exists, or a file with this name already exist.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "There is no certificate with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Import-StealthCOI",
        "x-samples": [
          "ExportImport-COI.ps1",
          "export_import_coi.rb"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/coi/regenerateCredential": {
      "post": {
        "tags": [
          "COI"
        ],
        "summary": "Regenerate COI Credential",
        "description": "Regenerates the credentials for the specified COIs in the Enterprise Manager database.\n\nYou can specify a list of COIs to regenerate credentials for using the **coi** query parameter.  You can regenerate the credentials for workgroup COIs, Service COIs, or all COIs by specifying the **action** query parameter.\n\nIf the **coi** query parameter is specified, the value passed into the **action** query parameter is ignored.\n\nYou must specify either the **coi** or the **action** query parameter.\n\n_**CAUTION:** Regenerating the credentials does not invalidate the previous key material already in use. Rather, it updates the key material held in the Enterprise Manager database. For an endpoint rekey, you need to provision configurations to get the new key material to the Authorization Server. If the Service COI is regenerated, you must update and distribute the endpoint packages. Additionally, you must import/export the regenerated COI material if endpoints in different enclaves use the COI to communicate with each other. Provisioning configurations in the other Stealth environment is also required._\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "regenerateCredential",
        "parameters": [
          {
            "name": "coi",
            "in": "query",
            "description": "A set of unique identifiers of COIs to regenerate credentials for.\n\n You can specify multiple unique identifiers of COIs by including the query parameter multiple times. Duplicate COI unique identifiers are accepted and ignored.\n\nYou must specify either the **coi** or the **action** query parameter.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "action",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "You must specify either the **coi** or the **action** query parameter.\n\n_**Note:** If any **coi** is provided, **action** is ignored._\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| Workgroup | 1 | Regenerate the credentials for all workgroup COIs. |\n| Service | 2 | Regenerate the credentials for all service COIs. |\n| All | 3 | Regenerate the credentials for all COIs. |\n"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request to regenerate the COI credentials has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The values provided for the parameters are invalid.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/coi/{id}": {
      "get": {
        "tags": [
          "COI"
        ],
        "summary": "Get COI",
        "description": "Gets information about a specific COI.\n\n_**Note:** The **direction** and **filterSet** fields are associated with the COI within the context of a role, which means these fields are present only when querying a role or configuration. In the former case, the **recursive** option can be set to either true or false. In the latter case, it must be set to true._\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthCOI.html\" target=\"_blank\">Get-StealthCOI</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getCoiById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the COI.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "COI with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Coi"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coi"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthCOI",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "put": {
        "tags": [
          "COI"
        ],
        "summary": "Update COI",
        "description": "Updates a COI in the Enterprise Manager database.\n\nThe Update COI request supports the following scenarios:\n * Changing the name or description of a COI\n * Changing the COI type (the isService value)\n * Changing the COI direction\n * Adding, removing, or changing a filter set\n\nSee [Data Handling During Update](#section/General-Request-Conventions/Data-Handling-During-Update) for examples on how to construct the payload for an update request.\n\n_**Note:** You cannot change the COI type if the COI is in use._\n\n### Changing COI Direction or Filter Set\n\nThe direction and filter set apply to the COI only within the context of a [role](#tag/Role). You must pass the associated role's unique identifier in the update request to update a COI's direction or filter set. Only the unique identifier field in the filter set is used; all other fields in the filter set are ignored.\n\nThis means that these fields are ignored when you update a COI and do not specify a role in the request.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthCOI.html\" target=\"_blank\">Set-StealthCOI</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/update_coi.py\" download=\"update_coi.py\">update_coi.py</a></li></ul></div>",
        "operationId": "updateCoi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the COI to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "The unique identifier of the COI's parent role. Provide this when updating a COI's direction or filter set.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Coi"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Coi"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because there is nothing to update."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthCOI",
        "x-samples": [
          "update_coi.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.2"
      },
      "delete": {
        "tags": [
          "COI"
        ],
        "summary": "Delete COI",
        "description": "Deletes a COI in the Enterprise Manager database.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthCOI.html\" target=\"_blank\">Remove-StealthCOI</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/delete_coi.py\" download=\"delete_coi.py\">delete_coi.py</a></li></ul></div>",
        "operationId": "deleteCoi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the COI to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to false or not provided, the resource cannot be deleted if it is in use. If set to true, the resource is always deleted, even if it is in use.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background. Used if **force** is true.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "The resource has been deleted. No response entity is returned. Used if **force** is false."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthCOI",
        "x-samples": [
          "delete_coi.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/coi/{id}/export": {
      "get": {
        "tags": [
          "COI"
        ],
        "summary": "Export COI",
        "description": "Exports a COI from the Enterprise Manager database.\n\nYou can export an existing COI that you can then import in a separate Stealth environment.\n\nTo export a COI and import it on another system, you must first create and install an import/export [certificate](#tag/Certificate). The certificate you use to export the COI must be initially created on the system in which you want to import the COI, and subsequently imported into the system in which you want to export the COI. This certificate is used to secure the COI. See the _Unisys Stealth Information Center_ for more information on import/export certificates.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Export-StealthCOI.html\" target=\"_blank\">Export-StealthCOI</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/ExportImport-COI.ps1\" download=\"ExportImport-COI.ps1\">ExportImport-COI.ps1</a></li><li><a href=\"./examples/python/export_coi.py\" download=\"export_coi.py\">export_coi.py</a></li><li><a href=\"./examples/ruby/export_import_coi.rb\" download=\"export_import_coi.rb\">export_import_coi.rb</a></li></ul></div>",
        "operationId": "exportCoi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the COI to export.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certificate",
            "in": "query",
            "description": "The unique identifier of an import/export certificate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The binary contents of the .blo file."
          },
          "404": {
            "description": "There is no COI or certificate with the given unique identifier.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Export-StealthCOI",
        "x-samples": [
          "ExportImport-COI.ps1",
          "export_coi.py",
          "export_import_coi.rb"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/computerSystem": {
      "get": {
        "tags": [
          "Computer System"
        ],
        "summary": "List Computer Systems",
        "description": "Gets information about all of the Stealth systems.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthComputerSystem.html\" target=\"_blank\">Get-StealthComputerSystem</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li><li>Portal Operator</li><li>Audit Administrator</li></ul></div>",
        "operationId": "listComputerSystem",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, displays all information contained within all the Stealth systems, including license and service information. If false or not provided, displays only the Stealth system data and the unique identifiers of the license and service resource.\n\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All Stealth systems returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerSystems"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerSystems"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthComputerSystem",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration",
          "Portal Operator",
          "Audit Administrator"
        ],
        "x-since": "3.2.2"
      },
      "put": {
        "tags": [
          "Computer System"
        ],
        "summary": "Add Computer System",
        "description": "Adds a computer system that has the Stealth Monitor Service installed. This service is included in the software for the Standalone Authorization Servers, SRA Gateways, Secure Virtual Gateways, and Stealth 2.8 Appliances.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthComputerSystem.html\" target=\"_blank\">New-StealthComputerSystem</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Add-ComputerSystem.ps1\" download=\"Add-ComputerSystem.ps1\">Add-ComputerSystem.ps1</a></li></ul></div>",
        "operationId": "addComputerSystem",
        "requestBody": {
          "description": "The computer system information containing the URL.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ComputerSystem"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputerSystem"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The computer system was added successfully; no response entity is returned."
          }
        },
        "x-cmdlet": "New-StealthComputerSystem",
        "x-samples": [
          "Add-ComputerSystem.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      }
    },
    "/computerSystem/{id}": {
      "get": {
        "tags": [
          "Computer System"
        ],
        "summary": "Get Computer System",
        "description": "Gets information about a specific Stealth system.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthComputerSystem.html\" target=\"_blank\">Get-StealthComputerSystem</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li><li>Portal Operator</li><li>Audit Administrator</li></ul></div>",
        "operationId": "getComputerSystemById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the Stealth system.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If true, displays all information contained within all the Stealth systems, including license and service information. If false or not provided, displays only the Stealth system data and the unique identifiers of the license and service resource.\n\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stealth system with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerSystem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerSystem"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthComputerSystem",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration",
          "Portal Operator",
          "Audit Administrator"
        ],
        "x-since": "3.2.2"
      },
      "delete": {
        "tags": [
          "Computer System"
        ],
        "summary": "Delete Computer System",
        "description": "Deletes a computer system that has the Stealth Monitor Service installed. This service is included in the software for the Standalone Authorization Servers, SRA Gateways, Secure Virtual Gateways, and Stealth 2.8 Appliances.\n\n_**Note:** The Management Server cannot be deleted._\n\n_**CAUTION:** Deleting a system that provides authorization or license services removes these systems from all Configurations and can prevent endpoints from being authorized and licensed._\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthComputerSystem.html\" target=\"_blank\">Remove-StealthComputerSystem</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Delete-ComputerSystem.ps1\" download=\"Delete-ComputerSystem.ps1\">Delete-ComputerSystem.ps1</a></li></ul></div>",
        "operationId": "deleteComputerSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the computer system.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource has been deleted. No response entity is returned."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthComputerSystem",
        "x-samples": [
          "Delete-ComputerSystem.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      }
    },
    "/configuration": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "List Configurations",
        "description": "Gets information about all configurations.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthConfiguration.html\" target=\"_blank\">Get-StealthConfiguration</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-Configuration.ps1\" download=\"List-Configuration.ps1\">List-Configuration.ps1</a></li><li><a href=\"./examples/python/list_configuration.py\" download=\"list_configuration.py\">list_configuration.py</a></li><li><a href=\"./examples/ruby/list_configuration.rb\" download=\"list_configuration.rb\">list_configuration.rb</a></li></ul></div>",
        "operationId": "listConfiguration",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of configuration entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Configurations"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configurations"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthConfiguration",
        "x-samples": [
          "List-Configuration.ps1",
          "list_configuration.py",
          "list_configuration.rb"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Create Configuration",
        "description": "Creates a configuration in the Enterprise Manager database.\n\nThe new configuration can include a list of associated Authorization Services, License Services, and roles. For each role, a new role is created and associated with the configuration. If the configuration is a global configuration, only global roles can be created and assigned to it. Global roles cannot be assigned to non-global configurations. Note that the names of the children roles of a configuration must be unique.\n\nRefer to the [Create Role](#operation/createRole) request for a description of how child roles are handled during a create request.\n\nThis request uses the [semi-independent tasks pattern](#semiindependentTask). See the [Create Filter Set](#operation/createFilterSet) request for an example of how that pattern applies to creating a tree of resources.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthConfiguration.html\" target=\"_blank\">New-StealthConfiguration</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-Configuration.ps1\" download=\"Create-Configuration.ps1\">Create-Configuration.ps1</a></li><li><a href=\"./examples/python/create_configuration.py\" download=\"create_configuration.py\">create_configuration.py</a></li></ul></div>",
        "operationId": "createConfiguration",
        "requestBody": {
          "description": "The configuration to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Configuration"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The create request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthConfiguration",
        "x-samples": [
          "Create-Configuration.ps1",
          "create_configuration.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/configuration/{id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Configuration",
        "description": "Gets information about a specific configuration.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthConfiguration.html\" target=\"_blank\">Get-StealthConfiguration</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Get-IsolatedEntities.ps1\" download=\"Get-IsolatedEntities.ps1\">Get-IsolatedEntities.ps1</a></li></ul></div>",
        "operationId": "getConfigurationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the configuration.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthConfiguration",
        "x-samples": [
          "Get-IsolatedEntities.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Configuration",
        "description": "Updates a configuration as specified by its unique identifier.\n\nThe Update Configuration request supports the following scenarios:\n* Changing the name or description of a configuration\n* Adding one or more existing Authorization Services to a configuration\n* Removing one or more Authorization Services from a configuration\n* Adding one or more existing License Services to a configuration\n* Removing one or more License Services from a configuration\n\nYou can complete all of these scenarios in separate requests or in a single request.\n\nRoles cannot be updated through an Update Configuration request. Use the [Create Role](#operation/createRole) or [Delete Role](#operation/deleteRole) request to add or remove roles from the configuration.\n\nLicense and authorization services cannot be updated on a global configuration.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthConfiguration.html\" target=\"_blank\">Set-StealthConfiguration</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/update_configuration.py\" download=\"update_configuration.py\">update_configuration.py</a></li><li><a href=\"./examples/python/update_configuration_add_auth.py\" download=\"update_configuration_add_auth.py\">update_configuration_add_auth.py</a></li><li><a href=\"./examples/python/update_configuration_add_license.py\" download=\"update_configuration_add_license.py\">update_configuration_add_license.py</a></li><li><a href=\"./examples/python/update_configuration_remove_auth.py\" download=\"update_configuration_remove_auth.py\">update_configuration_remove_auth.py</a></li><li><a href=\"./examples/python/update_configuration_remove_license.py\" download=\"update_configuration_remove_license.py\">update_configuration_remove_license.py</a></li></ul></div>",
        "operationId": "updateConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the configuration to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A configuration that contains the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Configuration"
              },
              "examples": {
                "Update Name": {
                  "description": "Update Name",
                  "value": {
                    "configuration": {
                      "name": "My new name"
                    }
                  }
                },
                "Update Description": {
                  "description": "Update Description",
                  "value": {
                    "configuration": {
                      "description": "My new description"
                    }
                  }
                },
                "Update Authorization or License Services": {
                  "description": "Update Authorization or License Services",
                  "value": {
                    "configuration": {
                      "authorizationServices": {
                        "authorizationService": [
                          {
                            "id": "176B3A43-D4BE-4351-BD2A-4FE145A52D1E"
                          },
                          {
                            "id": "77D263A9-0E1F-48B8-A409-2C6B348E54CF"
                          }
                        ]
                      },
                      "licenseServices": {
                        "licenseService": [
                          {
                            "id": "EE1B0093-CC12-4543-B42F-A8682A312194"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration"
              },
              "examples": {
                "Update Name": {
                  "description": "Update Name",
                  "value": {
                    "name": "My new name"
                  }
                },
                "Update Description": {
                  "description": "Update Description",
                  "value": {
                    "description": "My new description"
                  }
                },
                "Update Authorization or License Services": {
                  "description": "Update Authorization or License Services",
                  "value": {
                    "authorizationService": [
                      {
                        "id": "176B3A43-D4BE-4351-BD2A-4FE145A52D1E"
                      },
                      {
                        "id": "77D263A9-0E1F-48B8-A409-2C6B348E54CF"
                      }
                    ],
                    "licenseService": [
                      {
                        "id": "EE1B0093-CC12-4543-B42F-A8682A312194"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because there is nothing to update."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthConfiguration",
        "x-samples": [
          "update_configuration.py",
          "update_configuration_add_auth.py",
          "update_configuration_add_license.py",
          "update_configuration_remove_auth.py",
          "update_configuration_remove_license.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Delete Configuration",
        "description": "Deletes a configuration, as specified by its unique identifier.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthConfiguration.html\" target=\"_blank\">Remove-StealthConfiguration</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Delete-Configuration.ps1\" download=\"Delete-Configuration.ps1\">Delete-Configuration.ps1</a></li></ul></div>",
        "operationId": "deleteConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the configuration you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "The force setting is passed to the children of the roles in the configuration. The value of force does not affect the configuration or its roles; it affects only the roles' children. This parameter is ignored if **recursive** is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to true, all roles and their children are deleted. If force is set to false, then only roles and children that are not in use are deleted. If force is set to true, then all roles and children are deleted, regardless of whether they are in use.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background. Used if **recursive** is true.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "The resource has been deleted. No response entity is returned. Used if **recursive** is false."
          },
          "404": {
            "description": "There is no configuration with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthConfiguration",
        "x-samples": [
          "Delete-Configuration.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/configuration/{id}/provision": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Provision Configuration",
        "description": "Provisions Authorization Services in a configuration.\n\nThis request returns immediately. Therefore, if you want your script to determine when the provisioning request is completed, the script should either wait some time or should poll the request status until the status is done. If an error occurs, the request status contains a descriptive error message for the service being provisioned.\n\nNote that authorization services cannot be assigned to the global configuration. Therefore, to provision a global configuration, you must make the following request without specifying any authorization services:\n\n **POST /configuration/{id}/provision**\n\n The request uses the [semi-independent tasks pattern](#semiindependentTask). See the [Create Filter Set](#operation/createFilterSet) request for an example of how that pattern applies to creating a tree of resources.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Invoke-StealthProvisionConfiguration.html\" target=\"_blank\">Invoke-StealthProvisionConfiguration</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Provision-Configuration.ps1\" download=\"Provision-Configuration.ps1\">Provision-Configuration.ps1</a></li><li><a href=\"./examples/python/provision_configuration.py\" download=\"provision_configuration.py\">provision_configuration.py</a></li></ul></div>",
        "operationId": "provisionConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the configuration.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "query",
            "description": "The unique identifier of the Authorization Service to provision for the configuration. You can specify multiple service entries to provision multiple Authorization Services. If you do not specify a service, then all Authorization Services defined are provisioned.",
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "service",
            "in": "query",
            "description": "The unique identifier of the [Authorization Service](#tag/Service) to provision for the configuration. You can specify multiple service entries to provision multiple Authorization Services. Each Authorization Service you specify must belong to the configuration. If you do not specify a service, then all Authorization Services defined are provisioned.\n\nAuthorization Services cannot be assigned to the global configuration. Therefore, to provision a global configuration, you must **not** specify any _service_ entries.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The provision request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Invoke-StealthProvisionConfiguration",
        "x-samples": [
          "Provision-Configuration.ps1",
          "provision_configuration.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      }
    },
    "/endpoint": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "List Endpoints",
        "description": "Gets all of the monitoring and packet inspection configuration information for the endpoints that have been configured to use the Packet Inspection Enablement feature.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthEndpointInspection.html\" target=\"_blank\">Get-StealthEndpointInspection</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li><li>Portal Operator</li><li>Audit Administrator</li></ul></div>",
        "operationId": "listEndpoint",
        "responses": {
          "200": {
            "description": "A collection of endpoint entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoints"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoints"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthEndpointInspection",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration",
          "Portal Operator",
          "Audit Administrator"
        ],
        "x-since": "4.0"
      },
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Enable Packet Inspection",
        "description": "Configures the monitoring and packet inspection information for an endpoint in the Enterprise Manager database.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthEndpointInspection.html\" target=\"_blank\">New-StealthEndpointInspection</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Monitor-Endpoint.ps1\" download=\"Monitor-Endpoint.ps1\">Monitor-Endpoint.ps1</a></li></ul></div>",
        "operationId": "createEndpoint",
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "If the value is set to true, the endpoint monitoring and packet inspection information will be overridden with the new information. If this value is set to false, or is omitted, and the information is for an endpoint that has already been configured, an error is returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The monitoring and packet inspection information for the endpoint.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Endpoint"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Endpoint"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The endpoint monitoring and packet inspection information was successfully created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthEndpointInspection",
        "x-samples": [
          "Monitor-Endpoint.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0"
      },
      "delete": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Disable All Packet Inspections",
        "description": "Removes the monitoring and packet inspection information for all endpoints.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthEndpointInspection.html\" target=\"_blank\">Remove-StealthEndpointInspection</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Monitor-Endpoint.ps1\" download=\"Monitor-Endpoint.ps1\">Monitor-Endpoint.ps1</a></li></ul></div>",
        "operationId": "deleteAllEndpoint",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "If this value is set to true, the endpoint monitoring and packet inspection information is deleted from all endpoints. If this value is set to false, the information is not deleted.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The endpoint monitoring and packet inspection information has been successfully deleted and no response entity is returned."
          },
          "400": {
            "description": "The query parameter must be set to true to delete all endpoints.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthEndpointInspection",
        "x-samples": [
          "Monitor-Endpoint.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0"
      }
    },
    "/endpoint/deploy": {
      "post": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Apply Packet Inspection Settings",
        "description": "Applies the monitoring and packet inspection settings to all of the endpoints that have been so configured.\n\nAdditionally, removes all endpoint monitoring and packet inspection configuration information whose deletion was deferred.\n\n_**CAUTION:** This request is completed after the monitoring and packet inspection data is sent to the Authorization Service. Depending on the network configuration and speed, it could take several minutes for the updated configuration information to be sent to the endpoints and for the endpoints to respond by starting to submit packets to the Packet Inspection Enablement server or to stop submitting packets (depending on whether endpoint monitoring was configured or deleted)._\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Send-StealthEndpointInspection.html\" target=\"_blank\">Send-StealthEndpointInspection</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "deployEndpoint",
        "responses": {
          "204": {
            "description": "The request completed successfully and no response entity is returned."
          }
        },
        "x-cmdlet": "Send-StealthEndpointInspection",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0"
      }
    },
    "/endpoint/{id}": {
      "get": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Get Endpoint",
        "description": "Gets the monitoring and packet inspection information for a specific endpoint.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthEndpointInspection.html\" target=\"_blank\">Get-StealthEndpointInspection</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li><li>Portal Operator</li><li>Audit Administrator</li></ul></div>",
        "operationId": "getEndpointById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the endpoint.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthEndpointInspection",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration",
          "Portal Operator",
          "Audit Administrator"
        ],
        "x-since": "4.0"
      },
      "put": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Update Packet Inspection Settings",
        "description": "Updates the monitoring and packet inspection information for an endpoint in the Enterprise Manager database.\n\nThe update endpoint request supports the following scenarios:\n\n * Changing the display name or description of an endpoint\n * Changing monitoring and inspection information of an endpoint\n\nYou can perform these tasks in separate requests or in a single request.\n\nNote that you cannot change the name of the endpoint. The name is the endpoint's fully qualified domain name. If the name of the actual Stealth endpoint changes and you want to continue monitoring the endpoint, you must create a new endpoint in the Enterprise Manager database with the new fully qualified domain name and remove the endpoint that has the old name.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthEndpointInspection.html\" target=\"_blank\">Set-StealthEndpointInspection</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Monitor-Endpoint.ps1\" download=\"Monitor-Endpoint.ps1\">Monitor-Endpoint.ps1</a></li></ul></div>",
        "operationId": "updateEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the endpoint to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An endpoint that contains the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Endpoint"
              },
              "examples": {
                "Update Display Name": {
                  "description": "Update Display Name",
                  "value": {
                    "endpoint": {
                      "displayName": "My new name"
                    }
                  }
                },
                "Changing Endpoint Inspection Options": {
                  "description": "Changing Endpoint Inspection Options",
                  "value": {
                    "endpoint": {
                      "inspectionInfo": {
                        "rate": {
                          "kiloBytes": 512
                        }
                      }
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Endpoint"
              },
              "examples": {
                "Update Display Name": {
                  "description": "Update Display Name",
                  "value": {
                    "displayName": "My new name"
                  }
                },
                "Changing Endpoint Inspection Options": {
                  "description": "Changing Endpoint Inspection Options",
                  "value": {
                    "inspectionInfo": {
                      "rate": {
                        "kiloBytes": 512
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The resource was updated.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Endpoint"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthEndpointInspection",
        "x-samples": [
          "Monitor-Endpoint.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0"
      },
      "delete": {
        "tags": [
          "Endpoint"
        ],
        "summary": "Disable Packet Inspection",
        "description": "Removes the monitoring and packet inspection information for an endpoint, as specified by its unique identifier.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthEndpointInspection.html\" target=\"_blank\">Remove-StealthEndpointInspection</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Monitor-Endpoint.ps1\" download=\"Monitor-Endpoint.ps1\">Monitor-Endpoint.ps1</a></li></ul></div>",
        "operationId": "deleteEndpoint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the endpoint whose monitoring and packet inspection information is to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deferred",
            "in": "query",
            "description": "If this value is set to false, the endpoint monitoring and packet inspection information is deleted right away. If this value is set to true, the deletion is delayed until an [Apply Package Inspection Settings](#operation/deployEndpoint) request is made.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The endpoint monitoring and packet inspection information has been successfully deleted and no response entity is returned."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthEndpointInspection",
        "x-samples": [
          "Monitor-Endpoint.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0"
      }
    },
    "/endpointPackage": {
      "get": {
        "tags": [
          "Endpoint Package"
        ],
        "summary": "List Endpoint Packages",
        "description": "Gets information about all endpoint packages.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthEndpointPackage.html\" target=\"_blank\">Get-StealthEndpointPackage</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listEndpointPackage",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "If set to true, all base packages are included in the list of endpoint packages. If set to false, only endpoint packages the user creates are included in the list.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of endpoint package entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPackages"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPackages"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthEndpointPackage",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      },
      "post": {
        "tags": [
          "Endpoint Package"
        ],
        "summary": "Create Endpoint Package",
        "description": "Creates a new endpoint package.\n\nThe endpoint package must contain at least one configuration. In addition, all included configurations must have both an Authorization Service and a Service Role with a Service COI.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthEndpointPackage.html\" target=\"_blank\">New-StealthEndpointPackage</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/create_endpoint_package.py\" download=\"create_endpoint_package.py\">create_endpoint_package.py</a></li></ul></div>",
        "operationId": "createEndpointPackage",
        "requestBody": {
          "description": "The endpoint package to create",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EndpointPackage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointPackage"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The create request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthEndpointPackage",
        "x-samples": [
          "create_endpoint_package.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/endpointPackage/{id}": {
      "get": {
        "tags": [
          "Endpoint Package"
        ],
        "summary": "Get Endpoint Package",
        "description": "Gets information about a specific endpoint package.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthEndpointPackage.html\" target=\"_blank\">Get-StealthEndpointPackage</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getEndpointPackageById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the endpoint package.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint package with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPackage"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPackage"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthEndpointPackage",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      },
      "post": {
        "tags": [
          "Endpoint Package"
        ],
        "summary": "Update Endpoint Package",
        "description": "Updates an endpoint package.\n\nUpon updating, a new endpoint package is created containing the new information. A request status is provided with the unique identifier of the new endpoint package.\n\nA unique name must always be provided.\n\nThe following fields can be updated for an endpoint package:\n* description\n* audit\n* certName\n* certType\n* configurationId\n* endpointMode\n* useStealthTunnelingPriority\n\nThe following fields are ignored when updating an endpoint package:\n* basePackageType\n* creationDate\n* profileName\n* revision\n* softwareLevel\n\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/update_endpoint_package.py\" download=\"update_endpoint_package.py\">update_endpoint_package.py</a></li></ul></div>",
        "operationId": "updateEndpointPackage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the endpoint package you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The information that will be used to update the endpoint package.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EndpointPackage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointPackage"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-samples": [
          "update_endpoint_package.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "delete": {
        "tags": [
          "Endpoint Package"
        ],
        "summary": "Delete Endpoint Package",
        "description": "Deletes an endpoint package as specified by its unique identifier.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthEndpointPackage.html\" target=\"_blank\">Remove-StealthEndpointPackage</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Delete-EndpointPackage.ps1\" download=\"Delete-EndpointPackage.ps1\">Delete-EndpointPackage.ps1</a></li></ul></div>",
        "operationId": "deleteEndpointPackage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the endpoint package you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource has been deleted. No response entity is returned."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthEndpointPackage",
        "x-samples": [
          "Delete-EndpointPackage.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/endpointPackage/{id}/distribute": {
      "post": {
        "tags": [
          "Endpoint Package"
        ],
        "summary": "Distribute Endpoint Package",
        "description": "Distributes an endpoint package.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/update_endpoint_package.py\" download=\"update_endpoint_package.py\">update_endpoint_package.py</a></li></ul></div>",
        "operationId": "distributeEndpointPackage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the endpoint package you want to distribute.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "The unique identifier of the role you want to apply the software against. You can specify multiple roles by providing multiple <i>role</i> query parameters.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request to distribute the endpoint package has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "Cannot distribute an endpoint package to a service role.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "There is no endpoint package or role with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-samples": [
          "update_endpoint_package.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/endpointPropertySet": {
      "get": {
        "tags": [
          "Endpoint Property Set"
        ],
        "summary": "List Endpoint Property Sets",
        "description": "Gets information about all Endpoint Property Sets.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listEndpointPropertySet",
        "responses": {
          "200": {
            "description": "A collection of Endpoint Property Set entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPropertySets"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPropertySets"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/endpointPropertySet/distribute": {
      "post": {
        "tags": [
          "Endpoint Property Set"
        ],
        "summary": "Distribute Endpoint Property Set",
        "description": "Notifies the Authorization Servers that the Endpoint Property Set has changed.\n\nAll endpoints that are authorized and using the Endpoint Property Set are sent an update during the next keep-alive response, and the new endpoint package downloads and installs automatically.\n\n_**Note:** This results in the endpoints losing all their tunnels as the software or new configuration updates._\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "distributeEndpointPropertySet",
        "parameters": [
          {
            "name": "runAt",
            "in": "query",
            "description": "The [date and time](#section/Validation/Date-and-Time) of when to execute the task. See [scheduling requests](#section/General-Information/Scheduling-Requests) for more information.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "deploymentId",
            "in": "query",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) object(s) that are affected by the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eps",
            "in": "query",
            "description": "The unique identifier of an Endpoint Property Set that has changed. You can specify multiple Endpoint Property Sets by providing multiple **eps** query parameters.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request was accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "404": {
            "description": "At least one of the Endpoint Property Sets with the given unique identifier does not exist.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/endpointPropertySet/{id}": {
      "get": {
        "tags": [
          "Endpoint Property Set"
        ],
        "summary": "Get Endpoint Property Set",
        "description": "Gets information about a specific Endpoint Property Set.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getEndpointPropertySetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Endpoint Property Set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Endpoint Property Set with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPropertySet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPropertySet"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/endpointReport": {
      "get": {
        "tags": [
          "Endpoint Report"
        ],
        "summary": "List Configuration Audit Reports",
        "description": "Gets a set of the endpoint configuration audit reports (CARs).\n\nTo get all reports, a client initially makes this request omitting the **marker** query parameter. The response to that request contains the first 100 CAR entries. The client then makes subsequent calls using the **nextUri** returned by the prior call. The **nextUri** contains a **marker** query parameter set to a value that yields the next batch of reports. Once no reports are returned, the client should wait between calls, at which point only the new reports registered since the prior call are returned. Example PowerShell code that performs this algorithm follows:\n\n```powershell\n$user = 'admin@example.com'\n$pwd = 'pa$$w0rd'\n$em = 'em.example.com'\n$combo = [System.Text.Encoding]::ASCII.GetBytes(\"$user`:$pwd\")\n$encoded = [System.Convert]::ToBase64String($combo)\n$headers = @{ Authorization = \"Basic $encoded\" }\n$uri = \"https://$($em):8448/uisStealth/EcoApi/endpointReport\"\nwhile ($true) {\n  $result = Invoke-RestMethod $uri -Headers $headers\n  $uri = $result.endpointReport.nextUri\n  $result.endpointReport.endpoints.endpoint |\n       Select-Object name, lastTime, sequence\n  Start-Sleep -s 10\n}\n```\n\nThe above example lists the **name**, **lastTime** and **sequence** values for the reports. You could replace the Select-Object command with a command that obtains the CAR XML and passes it to code to process it. For example, replace the `while` loop with the following:\n\n```powershell\nwhile ($true) {\n  $result = Invoke-RestMethod $uri -Headers $headers\n  $uri = $result.endpointReport.nextUri\n  $result.endpointReport.endpoints.endpoint |\n       Select-Object xml |\n           <code to process CAR>\n  Start-Sleep -s 10\n}\n```\n\n\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthEndpointReport.html\" target=\"_blank\">Get-StealthEndpointReport</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Audit Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-CAR.ps1\" download=\"List-CAR.ps1\">List-CAR.ps1</a></li></ul></div>",
        "operationId": "listEndpointReport",
        "parameters": [
          {
            "name": "marker",
            "in": "query",
            "description": "A continuation marker used to get the next set of reports. If not supplied, the oldest 100 reports are returned.\n\n_**Note:** The **marker** is specific to the types of reports being requested. For example, you cannot use a marker value returned for a **showAll** request (which yields both change and daily reports) and then use it in a request to get subsequent change reports. This is because different data is used to establish a marker value, depending on if **showAll** is set or not._",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The **start** query parameter can be used to limit the [date](#section/Validation/Date-and-Time) range of the reports returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The **end** query parameter can be used to limit the [date](#section/Validation/Date-and-Time) range of the reports returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "If the **max** query parameter is specified, the call returns (at most) the number of individual reports. If not specified, 100 reports are returned (at most).",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "showall",
            "in": "query",
            "description": "The **showall** query parameter can be **true** or **false**. If it is set to true, both change reports and daily reports are returned. If it is set to false (or if it is not specified), only change reports are returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The reports are returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointReport"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthEndpointReport",
        "x-samples": [
          "List-CAR.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Audit Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.1"
      }
    },
    "/endpointReport/{id}": {
      "get": {
        "tags": [
          "Endpoint Report"
        ],
        "summary": "Get Configuration Audit Report",
        "description": "Gets a set of the endpoint configuration audit reports (CARs) for a specific endpoint.\n\nAs an example, assume that something happened regarding the endpoint with the fully qualified domain name `server1.example.com` during the week of October 6th and you want to know the configuration for that endpoint for that week. You could ask for the reports for that week by using the [List Configuration Audit Reports](#operation/listEndpointReport) example script, replacing the line that sets the URI with the following:\n\n```powershell\n$uri = \"https://$($em):8448/uisStealth/EcoApi/endpointReport/server1.example.com?start=2019-10-06T00:00:00Z&end=2019-10-13T00:00:00Z\"\n```\n\n\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthEndpointReport.html\" target=\"_blank\">Get-StealthEndpointReport</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Audit Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getEndpointReportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The [fully qualified host name](#section/Validation/Domain-Names) of the endpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marker",
            "in": "query",
            "description": "A continuation marker used to get the next set of reports. If not supplied, the oldest 100 reports are returned.\n\n_**Note:** The **marker** is specific to the types of reports being requested. For example, you cannot use a marker value returned for a **showAll** request (which yields both change and daily reports) and then use it in a request to get subsequent change reports. This is because different data is used to establish a marker value, depending on if **showAll** is set or not._",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The **start** query parameter can be used to limit the [date](#section/Validation/Date-and-Time) range of the reports returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The **end** query parameter can be used to limit the [date](#section/Validation/Date-and-Time) range of the reports returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "If the **max** query parameter is specified, the call returns (at most) the number of individual reports. If not specified, 100 reports are returned (at most).",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "showall",
            "in": "query",
            "description": "The **showall** query parameter can be **true** or **false**. If it is set to true, both change reports and daily reports are returned. If it is set to false (or if it is not specified), only change reports are returned.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The reports are returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointReport"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthEndpointReport",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Audit Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.1"
      }
    },
    "/environment": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "List Environments",
        "description": "Gets information about all Environments.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listEnvironment",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If false, the returned Environment does not contain its Authorizations. If true, the returned Environment contains all data for its Authorizations.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Environment entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Environments"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environments"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/environment/{id}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get Environment",
        "description": "Gets information about a specific Environment.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getEnvironmentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If false, the returned Environment does not contain its Authorizations. If true, the returned Environment contains all data for its Authorizations.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Environment with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/filter": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "List Filters",
        "description": "Gets information about all filters.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listFilter",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of filter entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Filters"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filters"
                }
              }
            }
          }
        },
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Create Filter",
        "description": "Creates a new filter.\n\nA filter belongs to a unique filter list. The unique identifier of the associated filter list must be specified when creating a new filter.\n\nIf a filter contains a qualifier, and if you provide the qualifier's unique identifier, then the filter is associated with an existing qualifier; otherwise, a new qualifier is created. Creating an unnamed qualifier as part of a filter is the only way to create an unnamed qualifier. An unnamed qualifier cannot be referenced from another filter.\n\n\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-Filter.ps1\" download=\"Create-Filter.ps1\">Create-Filter.ps1</a></li></ul></div>",
        "operationId": "createFilter",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "The location to place the filter in the associated filter list. Accepted values are **first**, **last**, and the unique identifier of the filter to place the new one after.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The filter to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The create request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-samples": [
          "Create-Filter.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/filter/{id}": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get Filter",
        "description": "Gets information about a specific filter.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getFilterById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filter with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "delete": {
        "tags": [
          "Filter"
        ],
        "summary": "Delete Filter",
        "description": "Deletes a filter as specified by its unique identifier.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "deleteFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "This option also applies to filter children if **recursive** is set.  If set to true, all the children are deleted. If set to false or not provided, the filter children cannot be deleted if they are in use. Unnamed qualifiers are deleted regardless of the force value specified.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, only the resource with the unique identifier is deleted. If set to true, the resource with the unique identifier and the entire tree (its children and their children, and so on) is deleted. Unnamed qualifiers are deleted regardless of the recursive value specified.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background. Used if **recursive** is true.  The request uses the [independent tasks pattern](#independentTask). See the [Delete Filter List](#operation/deleteFilterList) request for an example of how that pattern applies to deleting a tree of resources.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "The resource has been deleted. No response entity is returned. Used if **recursive** is not true."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/filterList": {
      "get": {
        "tags": [
          "Filter List"
        ],
        "summary": "List Filter Lists",
        "description": "Gets information about all filter lists.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthFilterList.html\" target=\"_blank\">Get-StealthFilterList</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-FilterList.ps1\" download=\"List-FilterList.ps1\">List-FilterList.ps1</a></li><li><a href=\"./examples/python/list_filter_list.py\" download=\"list_filter_list.py\">list_filter_list.py</a></li><li><a href=\"./examples/ruby/list_filter_list.rb\" download=\"list_filter_list.rb\">list_filter_list.rb</a></li></ul></div>",
        "operationId": "listFilterList",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of filter list entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FilterLists"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterLists"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthFilterList",
        "x-samples": [
          "List-FilterList.ps1",
          "list_filter_list.py",
          "list_filter_list.rb"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2.2"
      },
      "post": {
        "tags": [
          "Filter List"
        ],
        "summary": "Create Filter List",
        "description": "Creates a filter list.\n\nA filter list to be created can include a list of associated child filter lists. If the child filter list contains a unique identifier, and a filter list with that unique identifier exists, then the filter list is associated with the existing child filter list. Otherwise, if the child filter list does not include a unique identifier, and an existing filter list does not have the same name, then a new child filter list is created and associated with the filter list.\n\nChild filters are always created. If you provide a unique identifier for a filter, the unique identifier is ignored. That is, there is no way to reuse a filter.\n\nIf a child filter contains a qualifier, and if you provide the qualifier's unique identifier, then the filter is associated with an existing qualifier; otherwise, a new qualifier is created. Creating a qualifier as part of a filter list or a filter are the only ways to create an unnamed qualifier. An unnamed qualifier cannot be referenced from another filter or filter list.\n\n The request uses the [semi-independent tasks pattern](#semiindependentTask). See the [Create Filter Set](#operation/createFilterSet) request for an example of how that pattern applies to creating a tree of resources.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthFilterList.html\" target=\"_blank\">New-StealthFilterList</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-FilterList.ps1\" download=\"Create-FilterList.ps1\">Create-FilterList.ps1</a></li></ul></div>",
        "operationId": "createFilterList",
        "requestBody": {
          "description": "The filter list to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FilterList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterList"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The create request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthFilterList",
        "x-samples": [
          "Create-FilterList.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      }
    },
    "/filterList/{id}": {
      "get": {
        "tags": [
          "Filter List"
        ],
        "summary": "Get Filter List",
        "description": "Gets information about a specific filter list.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthFilterList.html\" target=\"_blank\">Get-StealthFilterList</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-FilterList.ps1\" download=\"List-FilterList.ps1\">List-FilterList.ps1</a></li></ul></div>",
        "operationId": "getFilterListById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filter list with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FilterList"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterList"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthFilterList",
        "x-samples": [
          "List-FilterList.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2.2"
      },
      "post": {
        "tags": [
          "Filter List"
        ],
        "summary": "Update Filter List",
        "description": "Updates a filter list.\n\nThe Update Filter List request supports the following scenarios:\n * Changing the name or description of a filter list\n * Changing the order of the children of a filter list\n * Removing child filters and filter lists from a parent filter list\n * Adding one or more existing filter lists as the children of a parent filter list\n\nSee [Data Handling During Update](#section/General-Request-Conventions/Data-Handling-During-Update) for examples on how to construct the payload for an update request.\n\n_**Note:** If updates are made to the **IP address** or the **qualifiers** of a filter, a new filter is created with updated filter information. The updated filter replaces the old filter child in the specified order. Since this update creates a new filter, the unique identifier of the filter changes. However, if the only update to the filter is a description change, the unique identifier value of the child filter does not change._\n\n### Adding New Filters\n\n_**Note:** You can also accomplish this task using the [Create Filter](#operation/createFilter) request._\n\nYou can add a new filter to a parent filter list during an update request by specifying the complete filter data exactly as if the new filter was being created as part of a [Create Filter List](#operation/createFilterList) request. This includes creating new qualifiers (both named and unnamed) and referencing existing named qualifiers. The newly created filter is placed in the order specified.\n\nYou cannot simply specify the child filter you are adding because if you do, all the other children will be removed. Therefore, you need to identify all the children and include the new filter you want to create.\n\nThe _Request samples_ box shows how to add a new filter as the fourth child in the filter list.\n### Changing a Filter Description and IP Address of an Existing Filter\n\nA filter is entirely owned by its parent filter list. The only way to modify a filter is to make an update request on its parent filter list.\n\nYou cannot simply specify the child filter that you are changing because if you do, all the other children will be removed. Therefore, you need to identify all the children and include the updated description and IP address of the child filter you want to update.\n\nThe _Request samples_ box shows how to update the description and IP address of the first filter.\n\n### Changing the Qualifiers of an Existing Filter\n\nYou can modify the qualifiers in an existing filter during an update request by specifying the unique identifier of the filter and listing all associated qualifiers, including any new existing qualifiers that should be added or excluding any qualifiers that should be removed, in the order required.\n\nIf you want to remove all the qualifiers of a filter, an empty list must be specified.\n\nSee [Data Handling During Update](#section/General-Request-Conventions/Data-Handling-During-Update) for additional information about _Referencing Other Resources During an Update_.\n\n### Creating New Unnamed Qualifiers to a New or Existing Filter\n\nYou can add new unnamed qualifiers to an existing filter during an update request by specifying all required information to create new unnamed qualifiers and listing all the unique identifiers of the qualifiers associated with this filter.\n\nThe _Request samples_ box shows how to add a new unnamed qualifier to the first filter.\n\n\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthFilterList.html\" target=\"_blank\">Set-StealthFilterList</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-FilterList.ps1\" download=\"Update-FilterList.ps1\">Update-FilterList.ps1</a></li></ul></div>",
        "operationId": "updateFilterList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter list to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The filter list containing updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FilterList"
              },
              "examples": {
                "Adding New Filters": {
                  "description": "Adding New Filters",
                  "value": {
                    "filterList": {
                      "children": {
                        "child": [
                          {
                            "filter": {
                              "id": "7574DD35-E4F3-42CC-8F76-09991D641B3E"
                            }
                          },
                          {
                            "filter": {
                              "id": "28B17E06-3FB9-406D-BBC3-1C883DE108E2"
                            }
                          },
                          {
                            "filter": {
                              "id": "A2F88384-A34B-46B1-8C4F-DC2B718CA432"
                            }
                          },
                          {
                            "filter": {
                              "description": "Newly filter added during a filter list update request",
                              "ipAddress": "10.149.1.8-10.149.1.204",
                              "qualifiers": {
                                "qualifier": [
                                  {
                                    "name": "Qualifier for 10.149.8-204",
                                    "description": "Newly qualifier added during a filter list update request",
                                    "isProtocolQualifier": "true",
                                    "filters": {
                                      "filter": [
                                        {
                                          "exclude": "false",
                                          "protocol": "TCP",
                                          "localPort": "41347-44783",
                                          "remotePort": "5486-6454",
                                          "exceptPorts": {
                                            "exceptPort": [
                                              {
                                                "localPort": "43704",
                                                "remotePort": "5881"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "filterList": {
                              "id": "4B457AEA-C158-4816-BDA2-3F98E4A6471D"
                            }
                          },
                          {
                            "filterList": {
                              "id": "65BA3423-5BF7-4F54-8CEB-F160FF81DB75"
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Changing a Filter Description and IP Address": {
                  "description": "Changing a Filter Description and IP Address",
                  "value": {
                    "filterList": {
                      "children": {
                        "child": [
                          {
                            "filter": {
                              "id": "7574DD35-E4F3-42CC-8F76-09991D641B3E",
                              "description": "The updated Filter description and updated IP address.",
                              "ipAddress": "10.149.1.8"
                            }
                          },
                          {
                            "filter": {
                              "id": "28B17E06-3FB9-406D-BBC3-1C883DE108E2"
                            }
                          },
                          {
                            "filter": {
                              "id": "A2F88384-A34B-46B1-8C4F-DC2B718CA432"
                            }
                          },
                          {
                            "filterList": {
                              "id": "4B457AEA-C158-4816-BDA2-3F98E4A6471D"
                            }
                          },
                          {
                            "filterList": {
                              "id": "65BA3423-5BF7-4F54-8CEB-F160FF81DB75"
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Creating Unnamed Qualifiers": {
                  "description": "Creating Unnamed Qualifiers",
                  "value": {
                    "filterList": {
                      "children": {
                        "child": [
                          {
                            "filter": {
                              "id": "7574DD35-E4F3-42CC-8F76-09991D641B3E",
                              "qualifiers": {
                                "qualifier": [
                                  {
                                    "id": "F2466A7B-48C0-4650-B159-CD3415BBAE11"
                                  },
                                  {
                                    "id": "C4145A8C-9E51-47DA-A04D-EA80B8A9FF8C"
                                  },
                                  {
                                    "id": "EEFE69AE-5D2E-4367-BD41-3D69EB3D4B68"
                                  },
                                  {
                                    "description": "Newly unnamed qualifier created during a filter list update request",
                                    "isProtocolQualifier": "true",
                                    "filters": {
                                      "filter": [
                                        {
                                          "exclude": "false",
                                          "protocol": "TCP",
                                          "localPort": "41347-44783",
                                          "remotePort": "5486-6454",
                                          "exceptPorts": {
                                            "exceptPort": [
                                              {
                                                "localPort": "43704",
                                                "remotePort": "5881"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "filter": {
                              "id": "28B17E06-3FB9-406D-BBC3-1C883DE108E2"
                            }
                          },
                          {
                            "filter": {
                              "id": "A2F88384-A34B-46B1-8C4F-DC2B718CA432"
                            }
                          },
                          {
                            "filterList": {
                              "id": "4B457AEA-C158-4816-BDA2-3F98E4A6471D"
                            }
                          },
                          {
                            "filterList": {
                              "id": "65BA3423-5BF7-4F54-8CEB-F160FF81DB75"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterList"
              },
              "examples": {
                "Adding New Filters": {
                  "description": "Adding New Filters",
                  "value": {
                    "child": [
                      {
                        "filter": {
                          "id": "7574DD35-E4F3-42CC-8F76-09991D641B3E"
                        }
                      },
                      {
                        "filter": {
                          "id": "28B17E06-3FB9-406D-BBC3-1C883DE108E2"
                        }
                      },
                      {
                        "filter": {
                          "id": "A2F88384-A34B-46B1-8C4F-DC2B718CA432"
                        }
                      },
                      {
                        "filter": {
                          "description": "Newly filter added during a filter list update request",
                          "ipAddress": "10.149.1.8-10.149.1.204",
                          "qualifier": [
                            {
                              "name": "Qualifier for 10.149.8-204",
                              "description": "Newly qualifier added during a filter list update request",
                              "isProtocolQualifier": "true",
                              "filter": [
                                {
                                  "exclude": "false",
                                  "protocol": "TCP",
                                  "localPort": "41347-44783",
                                  "remotePort": "5486-6454",
                                  "exceptPort": [
                                    {
                                      "localPort": "43704",
                                      "remotePort": "5881"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "filterList": {
                          "id": "4B457AEA-C158-4816-BDA2-3F98E4A6471D"
                        }
                      },
                      {
                        "filterList": {
                          "id": "65BA3423-5BF7-4F54-8CEB-F160FF81DB75"
                        }
                      }
                    ]
                  }
                },
                "Changing a Filter Description and IP Address": {
                  "description": "Changing a Filter Description and IP Address",
                  "value": {
                    "child": [
                      {
                        "filter": {
                          "id": "7574DD35-E4F3-42CC-8F76-09991D641B3E",
                          "description": "The updated Filter description and updated IP address.",
                          "ipAddress": "10.149.1.8"
                        }
                      },
                      {
                        "filter": {
                          "id": "28B17E06-3FB9-406D-BBC3-1C883DE108E2"
                        }
                      },
                      {
                        "filter": {
                          "id": "A2F88384-A34B-46B1-8C4F-DC2B718CA432"
                        }
                      },
                      {
                        "filterList": {
                          "id": "4B457AEA-C158-4816-BDA2-3F98E4A6471D"
                        }
                      },
                      {
                        "filterList": {
                          "id": "65BA3423-5BF7-4F54-8CEB-F160FF81DB75"
                        }
                      }
                    ]
                  }
                },
                "Creating Unnamed Qualifiers": {
                  "description": "Creating Unnamed Qualifiers",
                  "value": {
                    "child": [
                      {
                        "filter": {
                          "id": "7574DD35-E4F3-42CC-8F76-09991D641B3E",
                          "qualifier": [
                            {
                              "id": "F2466A7B-48C0-4650-B159-CD3415BBAE11"
                            },
                            {
                              "id": "C4145A8C-9E51-47DA-A04D-EA80B8A9FF8C"
                            },
                            {
                              "id": "EEFE69AE-5D2E-4367-BD41-3D69EB3D4B68"
                            },
                            {
                              "description": "Newly unnamed qualifier created during a filter list update request",
                              "isProtocolQualifier": "true",
                              "filter": [
                                {
                                  "exclude": "false",
                                  "protocol": "TCP",
                                  "localPort": "41347-44783",
                                  "remotePort": "5486-6454",
                                  "exceptPort": [
                                    {
                                      "localPort": "43704",
                                      "remotePort": "5881"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      },
                      {
                        "filter": {
                          "id": "28B17E06-3FB9-406D-BBC3-1C883DE108E2"
                        }
                      },
                      {
                        "filter": {
                          "id": "A2F88384-A34B-46B1-8C4F-DC2B718CA432"
                        }
                      },
                      {
                        "filterList": {
                          "id": "4B457AEA-C158-4816-BDA2-3F98E4A6471D"
                        }
                      },
                      {
                        "filterList": {
                          "id": "65BA3423-5BF7-4F54-8CEB-F160FF81DB75"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because there is nothing to update."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthFilterList",
        "x-samples": [
          "Update-FilterList.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "delete": {
        "tags": [
          "Filter List"
        ],
        "summary": "Delete Filter List",
        "description": "Deletes a filter list as specified by its unique identifier.\n\nIf **force** is set to **true**, the request is processed in the background using the [semi-independent tasks pattern](#semiindependentTask). Consider the following example to understand how that pattern applies to a delete request. Assume that the following resources currently exist:\n\n<pre>\nFilterSet-1\n  FilterList-A\n    FilterList-B1\n      Qualifier-B1a\n    Qualifier-B2\n\nFilterSet-2\n  FilterList-A\n    &lt;children same as above&gt;\n\nFilterSet-3\n  FilterList-A\n    &lt;children same as above&gt;\n</pre>\nAssume that a script makes a request to delete FilterList-A with both **force** and **recursive** set to true.\n\nIn the first scenario, assume that the delete of Qualifier-B2 fails. In this case, the following resources exist:\n\n<pre>\nFilterSet-1\n\nFilterSet-2\n\nFilterSet-3\n\nQualifier-B2\n</pre>\n\nThat is, Qualifier-B2 still exists because the delete for it failed. The filter sets still exist because they were not targets of the delete request, but none of them contain a child filter list because FilterList-A was deleted using the **force** option. To recover from this error, the script could attempt to delete Qualifier-B2.\n\nIn the second scenario, assume that the EcoAPI is unable to remove FilterList-A from FilterSet-3. In this case, the following resources exist:\n\n<pre>\nFilterSet-1\n\nFilterSet-2\n\nFilterSet-3\n  FilterList-A\n</pre>\nThat is, FilterList-A still exists because the EcoAPI could not remove it from FilterSet-3. However, the EcoAPI successfully deleted the secondary resources (the other filter lists and qualifiers) and successfully removed FilterList-A from the other filter sets. To recover from this error, the script could attempt to delete FilterList-A again.\n\nIn the third scenario, assume that the task to delete FilterList-A failed. In this case, the following resources exist:\n\n<pre>\nFilterSet-1\n\nFilterSet-2\n\nFilterSet-3\n\nFilerList-A\n</pre>\n\nThat is, FilterList-A still exists because the EcoAPI could not delete it. However, the EcoAPI successfully deleted the secondary resources (the other filter lists and qualifiers) and successfully removed FilterList-A from the filter sets, which means that none of the filter sets have FilterList-A as a child. To recover from this error, the script could attempt to delete FilterList-A again.\r\n\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthFilterList.html\" target=\"_blank\">Remove-StealthFilterList</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Delete-FilterList.ps1\" download=\"Delete-FilterList.ps1\">Delete-FilterList.ps1</a></li><li><a href=\"./examples/ruby/delete_filter_list.rb\" download=\"delete_filter_list.rb\">delete_filter_list.rb</a></li></ul></div>",
        "operationId": "deleteFilterList",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to false or not provided, the resource cannot be deleted if it is in use. If set to true, the resource is always deleted, even if it is in use. This option applies to children also if **recursive** is set to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, only the resource with the unique identifier is deleted. If set to true, the resource with the unique identifier and the entire tree (its children and their children, and so on) is deleted.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background. Used if **force** or **recursive** is true.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "The resource has been deleted. No response entity is returned. Used if neither **force** nor **recursive** is true."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthFilterList",
        "x-samples": [
          "Delete-FilterList.ps1",
          "delete_filter_list.rb"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      }
    },
    "/filterSet": {
      "get": {
        "tags": [
          "Filter Set"
        ],
        "summary": "List Filter Sets",
        "description": "Gets information about all filter sets.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthFilterSet.html\" target=\"_blank\">Get-StealthFilterSet</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/ruby/list_filter_set.rb\" download=\"list_filter_set.rb\">list_filter_set.rb</a></li></ul></div>",
        "operationId": "listFilterSet",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of filter set entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FilterSets"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterSets"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthFilterSet",
        "x-samples": [
          "list_filter_set.rb"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2.2"
      },
      "post": {
        "tags": [
          "Filter Set"
        ],
        "summary": "Create Filter Set",
        "description": "Creates a filter set.\n\nOptionally, a filter set can include a list of filter lists to associate with the filter set. If the filter list contains a unique identifier, and if a filter list with that unique identifier exists, then the filter set is associated with that filter list. The EcoAPI returns a validation error if there is no filter list with the given unique identifier. Otherwise, if the filter list does not include a unique identifier, and if an existing filter list does not have the same name, then a new filter list is created. The EcoAPI returns a validation error if an existing filter list has the same name.\n\n The request uses the [semi-independent tasks pattern](#semiindependentTask). Consider the following example to understand how that pattern applies to a create request. Assume that a script makes a Create Filter Set request with the following resource tree, where none of the resources exist and are all created by this one request:\n\n<pre>FilterSet-1\n    FilterList-A\n       Qualifier-A1\n       Qualifier-A2\n    FilterList-B\n       FilterList-B1\n          Qualifier-B1a\n       Qualifier-B2\n    FilterList-C</pre>\n\nAssume that the create tasks for Qualifier-B2 and FilterList-A both fail. The final request status **state** is **incomplete**. In the [RequestStatus](#tag/Request-Status) messages, there are two messages with **type** of **warning**, one for Qualifier-B2 and the other for FilterList-A. If the script queries the filter set using the recursive option, it sees the following data:\n\n<pre>FilterSet-1\n    FilterList-B\n       FilterList-B1\n          Qualifier-B1a\n    FilterList-C</pre>\n\nThe FilterList-A and its dependents are missing because the create task for FilterList-A failed. In addition, Qualifier-B2 is missing from FilterList-B because its create task failed. However, if the script gets the list of all qualifiers, it receives the following list:\n\n<pre>Qualifier-A1\nQualifier-A2\nQualifier-B1a</pre>\n\nThe Qualifier-A1 and Qualifier-A2 appear because the tasks to create those secondary resources did not fail. Thus, the EcoAPI attempts the request for every secondary resource, and each secondary resource is handled independently.\n\nAt this point, the script could attempt to create the failed secondary resources again, and if successful, delete the filter set (not specifying the recursive option), then create the filter set again referencing the now-existing filter lists using their unique identifiers.\n\nHowever, if all secondary resources were created successfully, but the primary resource create failed, there is no filter set. If the script then queries the filter lists with the recursive option, it sees the following filter lists:\n\n<pre> FilterList-A\n    Qualifier-A1\n    Qualifier-A2\n\n FilterList-B\n    FilterList-B1\n       Qualifier-B1a\n    Qualifier-B2\n\n FilterList-C\n</pre>\n\nThat is, the secondary resources were created and are now available. At this point, the script could attempt to create FilterSet-1 again, referencing the three filter lists by their unique identifiers.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthFilterSet.html\" target=\"_blank\">New-StealthFilterSet</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/create_filter_set.py\" download=\"create_filter_set.py\">create_filter_set.py</a></li><li><a href=\"./examples/ruby/create_filter_set.rb\" download=\"create_filter_set.rb\">create_filter_set.rb</a></li></ul></div>",
        "operationId": "createFilterSet",
        "requestBody": {
          "description": "The filter set to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FilterSet"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterSet"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthFilterSet",
        "x-samples": [
          "create_filter_set.py",
          "create_filter_set.rb"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      }
    },
    "/filterSet/{id}": {
      "get": {
        "tags": [
          "Filter Set"
        ],
        "summary": "Get Filter Set",
        "description": "Gets information about a specific filter set.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthFilterSet.html\" target=\"_blank\">Get-StealthFilterSet</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getFilterSetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filter set with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FilterSet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterSet"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthFilterSet",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2.2"
      },
      "put": {
        "tags": [
          "Filter Set"
        ],
        "summary": "Update Filter Set",
        "description": "Updates a specific filter set.\n\nThe Update Filter Set request supports the following scenarios:\n\n* Changing the name or description of a filter set\n* Changing the order of the filter list children of a filter set\n* Removing a child filter list from a parent filter set\n* Adding one or more existing filter lists as the children of a parent filter set\n\nSee [Data Handling During Update](#section/General-Request-Conventions/Data-Handling-During-Update) for examples on how to construct the payload for an update request for scenarios above.\n\n### Changing the Boolean Allow Field\nTo change the allow field of a filter set, pass a Boolean value of true or false.\n\nThe *Request samples* box shows how to change this field.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthFilterSet.html\" target=\"_blank\">Set-StealthFilterSet</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-FilterSet.ps1\" download=\"Update-FilterSet.ps1\">Update-FilterSet.ps1</a></li></ul></div>",
        "operationId": "updateFilterSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter set to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The filter set containing the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/FilterSet"
              },
              "examples": {
                "Change Boolean Field": {
                  "description": "Change Boolean Field",
                  "value": {
                    "filterSet": {
                      "allow": "true"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterSet"
              },
              "examples": {
                "Change Boolean Field": {
                  "description": "Change Boolean Field",
                  "value": {
                    "allow": "true"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because there is nothing to update."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthFilterSet",
        "x-samples": [
          "Update-FilterSet.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "delete": {
        "tags": [
          "Filter Set"
        ],
        "summary": "Delete Filter Set",
        "description": "Deletes a filter set as specified by its unique identifier.\n\nIf either the **force** or **recursive** parameters are true, then the request processes in the background. The request uses the [independent tasks pattern](#independentTask). See the [Delete Filter List](#operation/deleteFilterList) request for an example of how that pattern applies to deleting a tree of resources.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthFilterSet.html\" target=\"_blank\">Remove-StealthFilterSet</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/ruby/delete_filter_set.rb\" download=\"delete_filter_set.rb\">delete_filter_set.rb</a></li></ul></div>",
        "operationId": "deleteFilterSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter set to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to false or not provided, the resource cannot be deleted if it is in use. If set to true, the resource is always deleted, even if it is in use. This option applies to children if <b>recursive</b> is also set to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, only the resource with the unique identifier is deleted. If set to true, the resource with the unique identifier and the entire tree (its children and their children, and so on) is deleted.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background. Returned if <b>force</b> or <b>recursive</b> is true.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "The resource has been deleted. No response entity is returned."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthFilterSet",
        "x-samples": [
          "delete_filter_set.rb"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      }
    },
    "/filterSet/{id}/filterList/{filterList}": {
      "put": {
        "tags": [
          "Filter Set"
        ],
        "summary": "Add or Move Filter List in Filter Set",
        "description": "Adds a filter list or moves an existing filter list in the filter set to a specified new location. If the list of filter lists is empty, then the filter set includes denied filter lists.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "addFilterListToFilterSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter set to add the filter list to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterList",
            "in": "path",
            "description": "The unique identifier of the filter list to add to the filter set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The location to place the filter list in the associated list of filter lists. Accepted values are **first**, **last**, and the unique identifier of the filter list to place this one after.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because the filter list is already associated with the filter set at that location."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "delete": {
        "tags": [
          "Filter Set"
        ],
        "summary": "Remove Filter List from Filter Set",
        "description": "Removes a specific filter list from the filter set.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "removeFilterListFromFilterSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the filter set to remove the filter list from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterList",
            "in": "path",
            "description": "The unique identifier of the filter list to remove from the filter set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because the filter list is not associated with the filter set."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/flow": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "List Flows",
        "description": "Gets information about all Flows.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthFlow.html\" target=\"_blank\">Get-StealthFlow</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listFlow",
        "responses": {
          "200": {
            "description": "A collection of Flow entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Flows"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flows"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthFlow",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/flow/{id}": {
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Get Flow",
        "description": "Gets information about a specific Flow.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthFlow.html\" target=\"_blank\">Get-StealthFlow</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getFlowById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Flow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Flow with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthFlow",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/group": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List Groups",
        "description": "Gets information about all groups.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthGroup.html\" target=\"_blank\">Get-StealthGroup</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-Group.ps1\" download=\"List-Group.ps1\">List-Group.ps1</a></li><li><a href=\"./examples/python/list_group.py\" download=\"list_group.py\">list_group.py</a></li><li><a href=\"./examples/ruby/list_group.rb\" download=\"list_group.rb\">list_group.rb</a></li></ul></div>",
        "operationId": "listGroup",
        "responses": {
          "200": {
            "description": "A collection of group entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthGroup",
        "x-samples": [
          "List-Group.ps1",
          "list_group.py",
          "list_group.rb"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create Group",
        "description": "Creates a group in the Enterprise Manager database.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthGroup.html\" target=\"_blank\">New-StealthGroup</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-Group.ps1\" download=\"Create-Group.ps1\">Create-Group.ps1</a></li><li><a href=\"./examples/python/create_group.py\" download=\"create_group.py\">create_group.py</a></li><li><a href=\"./examples/ruby/create_group.rb\" download=\"create_group.rb\">create_group.rb</a></li></ul></div>",
        "operationId": "createGroup",
        "requestBody": {
          "description": "The group to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthGroup",
        "x-samples": [
          "Create-Group.ps1",
          "create_group.py",
          "create_group.rb"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/group/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get Group",
        "description": "Gets information about a specific group.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthGroup.html\" target=\"_blank\">Get-StealthGroup</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the desired group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthGroup",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update Group",
        "description": "Updates a group.\n\n### Changing a Group's Description\nTo change the group's description, pass in the new description value.\n\nThe *Request samples* box shows how to change this field.\n\nNote that you cannot change the name of the group.  If a name is specified during the update, the new value will be ignored and the field will be unchanged.\n\n\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthGroup.html\" target=\"_blank\">Set-StealthGroup</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-Group.ps1\" download=\"Update-Group.ps1\">Update-Group.ps1</a></li></ul></div>",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group that you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The group containing the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              },
              "examples": {
                "Change Description": {
                  "description": "Change Description",
                  "value": {
                    "group": {
                      "description": "New Group Description"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              },
              "examples": {
                "Change Description": {
                  "description": "Change Description",
                  "value": {
                    "description": "New Group Description"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The resource was updated.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthGroup",
        "x-samples": [
          "Update-Group.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.2"
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete Group",
        "description": "Removes a group, as specified by its unique identifier.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthGroup.html\" target=\"_blank\">Remove-StealthGroup</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/delete_group.py\" download=\"delete_group.py\">delete_group.py</a></li></ul></div>",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the group you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to false or not provided, the resource cannot be deleted if it is in use. If set to true, the resource is always deleted, even if it is in use.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background. Used if <b>force</b> is true.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "The resource has been deleted. No response entity is returned."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthGroup",
        "x-samples": [
          "delete_group.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/ldapSettings": {
      "get": {
        "tags": [
          "LdapSettings"
        ],
        "summary": "Get LDAP Settings",
        "description": "Gets the settings used by Enterprise Manager and EcoAPI to connect to an LDAP server.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getLdapSettings",
        "responses": {
          "200": {
            "description": "LDAP settings returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSettings"
                }
              }
            }
          }
        },
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "put": {
        "tags": [
          "LdapSettings"
        ],
        "summary": "Update and Enable LDAP",
        "description": "Updates the LDAP settings and enables LDAP.\n\nAn installation of Stealth includes the default LDAP settings that are stored on the Management Server; this request merges the changes you supply with those original settings. The new settings are applied only if a connection can be established with the LDAP server. If establishing a connection with the LDAP server fails, an error is returned.\n\nA successful update impacts your ability to log into Enterprise Manager or to make subsequent requests using the EcoAPI. Once your script's current session times out, you are not be able to re-authenticate unless you have previously defined administrator users, which you can do with any of the following:\n\n* Define the **portaladmin** user in LDAP.\n\n* Have the script that updates the LDAP settings also register at least one local administrator user or one LDAP administrator user using the [Create Administrator User](#operation/createAdminUser) request, then identify that user as a **Portal Administrator** **Aware Administrator** using the [Add Administrator User to Administrator Role](#operation/addAdminUserToAdminRole) request. Note that you must set **allowNonLdapUser** to true to use a local administrator user.\n\nYou can then use those credentials to log into Enterprise Manager or make subsequent EcoAPI requests.\n\nIf you are locked out of Enterprise Manager and the EcoAPI, you can restore the prior LDAP settings. For more information, refer to the _Unisys Stealth Information Center_.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "updateLdapSettings",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/LdapSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The LDAP settings were successfully updated.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSettings"
                }
              }
            }
          },
          "400": {
            "description": "The input contains fields with invalid values, or unable to access LDAP with the given information.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "delete": {
        "tags": [
          "LdapSettings"
        ],
        "summary": "Disable LDAP",
        "description": "Disables LDAP.\n\n When LDAP is disabled, you must use the locally defined password for an administrator account the next time you log into Enterprise Manager or the next time you need to authenticate with the EcoAPI.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "disableLdapSettings",
        "responses": {
          "204": {
            "description": "LDAP has been disabled, no data is returned."
          }
        },
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/license": {
      "get": {
        "tags": [
          "License"
        ],
        "summary": "List Licenses",
        "description": "Gets information about all licenses.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthLicense.html\" target=\"_blank\">Get-StealthLicense</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/list_license.py\" download=\"list_license.py\">list_license.py</a></li></ul></div>",
        "operationId": "listLicense",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "If provided and set to true, the request returns all licenses, including those licenses that have been uninstalled. If false or not provided, the request only returns licenses with an SCN.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All licenses returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Licenses"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Licenses"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthLicense",
        "x-samples": [
          "list_license.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      },
      "post": {
        "tags": [
          "License"
        ],
        "summary": "Create License",
        "description": "Creates a license by installing the SCN.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthLicense.html\" target=\"_blank\">New-StealthLicense</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-License.ps1\" download=\"Create-License.ps1\">Create-License.ps1</a></li><li><a href=\"./examples/python/create_and_update_license.py\" download=\"create_and_update_license.py\">create_and_update_license.py</a></li><li><a href=\"./examples/ruby/create_license.rb\" download=\"create_license.rb\">create_license.rb</a></li></ul></div>",
        "operationId": "createLicense",
        "requestBody": {
          "description": "The license to create",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/License"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/License"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The create request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The SCN provided for the license already exists.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthLicense",
        "x-samples": [
          "Create-License.ps1",
          "create_and_update_license.py",
          "create_license.rb"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/license/{id}": {
      "get": {
        "tags": [
          "License"
        ],
        "summary": "Get License",
        "description": "Gets information about a specific license.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthLicense.html\" target=\"_blank\">Get-StealthLicense</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getLicenseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the license.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "in": "query",
            "description": "By default, only installed licenses are returned. If this parameter is provided and set to true, the license will always be returned, even if it's uninstalled.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "License with given unique identifier returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/License"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/License"
                }
              }
            }
          },
          "404": {
            "description": "There is no license with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthLicense",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      },
      "put": {
        "tags": [
          "License"
        ],
        "summary": "Update License",
        "description": "Applies a license to the installed SCN or updates the name and descriptionof a license in the Enterprise Manager database.\n\nYou must have installed an SCN (using the [POST /license](#operation/createLicense) request) before you can update the license.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/create_and_update_license.py\" download=\"create_and_update_license.py\">create_and_update_license.py</a></li></ul></div>",
        "operationId": "updateLicense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the license that you want to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The information that will be used to update the license.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/License"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/License"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because there is nothing to update."
          },
          "404": {
            "description": "There is no license with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-samples": [
          "create_and_update_license.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      },
      "delete": {
        "tags": [
          "License"
        ],
        "summary": "Delete License",
        "description": "Removes a license, as specified by the unique identifier.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthLicense.html\" target=\"_blank\">Remove-StealthLicense</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/delete_license.py\" download=\"delete_license.py\">delete_license.py</a></li></ul></div>",
        "operationId": "deleteLicense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the license you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "404": {
            "description": "There is no license with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthLicense",
        "x-samples": [
          "delete_license.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/nodeMap": {
      "get": {
        "tags": [
          "Node Map"
        ],
        "summary": "List Node Maps",
        "description": "Gets a collection of node maps based on the given parameters.\n\nThe results can be filtered by supplying an **epsId**, **ipAddress**, or **name** query parameter. If no parameter is provided, all node maps are returned.\n\n_**Note:** Only one query parameter can be provided for a request. The parameters are examined in the following order: **epsId**, **ipAddress**, **name**, with the first one selected and the others ignored._\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-NodeMap.ps1\" download=\"List-NodeMap.ps1\">List-NodeMap.ps1</a></li><li><a href=\"./examples/python/list_nodemap.py\" download=\"list_nodemap.py\">list_nodemap.py</a></li></ul></div>",
        "operationId": "listNodeMap",
        "parameters": [
          {
            "name": "epsId",
            "in": "query",
            "description": "An Endpoint Property Set (EPS) identifier. If given, the request returns all node maps with this EPS identifier. Many node maps can have the same EPS identifier, and thus several node maps can be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipAddress",
            "in": "query",
            "description": "An IPv4 address. You can specify multiple IPv4 addresses by including the query parameter multiple times. Duplicate addresses are accepted. If given, the request returns all node maps that have one of the given IPv4 addresses.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The host name of the node map to get.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of node map entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NodeMaps"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeMaps"
                }
              }
            }
          },
          "400": {
            "description": "The query parameter values were not valid.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-samples": [
          "List-NodeMap.ps1",
          "list_nodemap.py"
        ],
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/nodeMap/{id}": {
      "get": {
        "tags": [
          "Node Map"
        ],
        "summary": "Get Node Map",
        "description": "Gets information about a specific node map.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getNodeMapById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the node map.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The node map with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/NodeMap"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeMap"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "List Profiles",
        "description": "Gets information about all Profiles.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthProfile.html\" target=\"_blank\">Get-StealthProfile</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listProfile",
        "responses": {
          "200": {
            "description": "A collection of Profile entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Profiles"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profiles"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthProfile",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/profile/{id}": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get Profile",
        "description": "Gets information about a specific Profile.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthProfile.html\" target=\"_blank\">Get-StealthProfile</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getProfileById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Profile with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "The server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthProfile",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/profile/{id}/provision": {},
    "/project": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project",
        "description": "Returns a project containing the identified Solutions.\n\nThe returned project contains the identified Solutions as well as the following:\n\n* All Profiles contained within the Solutions\n* All Channels and Flows that reference the included Profiles\n* All Profiles referenced by all returned Channels and Flows that are not included within one of the Solutions\n\n_**Note:** The returned project does not contain information about objects in the Enterprise Management Solution unless the Enterprise Management Solution is one of the Solutions returned. For example, if you request a user Solution, then the returned Project contains the Channels and Flows that link the Profiles in the user Solution to the standalone Authorization Server Profile, but does not contain the standalone Authorization Server Profile itself._\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getProjectBySolutionId",
        "parameters": [
          {
            "name": "solution",
            "in": "query",
            "description": "The unique identifier of a Solution to include in the returned project. To specify multiple Solutions, repeat this parameter. For example:\n\n`GET /project?solution=1234&amp;solution=5678`.\n\nIf no unique identifiers are provided, the returned project contains all Solutions.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A project with selected Solutions is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "There is no Solution for one or more of the given unique identifiers.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/qualifier": {
      "get": {
        "tags": [
          "Qualifier"
        ],
        "summary": "List Qualifiers",
        "description": "Gets information about all qualifiers.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthQualifier.html\" target=\"_blank\">Get-StealthQualifier</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-Qualifier.ps1\" download=\"List-Qualifier.ps1\">List-Qualifier.ps1</a></li><li><a href=\"./examples/python/list_qualifier.py\" download=\"list_qualifier.py\">list_qualifier.py</a></li></ul></div>",
        "operationId": "listQualifier",
        "responses": {
          "200": {
            "description": "A collection of qualifier entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Qualifiers"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Qualifiers"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthQualifier",
        "x-samples": [
          "List-Qualifier.ps1",
          "list_qualifier.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2.2"
      },
      "post": {
        "tags": [
          "Qualifier"
        ],
        "summary": "Create Qualifier",
        "description": "Creates a qualifier in the Enterprise Manager database.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthQualifier.html\" target=\"_blank\">New-StealthQualifier</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-Qualifier.ps1\" download=\"Create-Qualifier.ps1\">Create-Qualifier.ps1</a></li><li><a href=\"./examples/python/create_qualifier.py\" download=\"create_qualifier.py\">create_qualifier.py</a></li></ul></div>",
        "operationId": "createQualifier",
        "requestBody": {
          "description": "The qualifier to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Qualifier"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Qualifier"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The qualifier was successfully created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Qualifier"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Qualifier"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthQualifier",
        "x-samples": [
          "Create-Qualifier.ps1",
          "create_qualifier.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      }
    },
    "/qualifier/{id}": {
      "get": {
        "tags": [
          "Qualifier"
        ],
        "summary": "Get Qualifier",
        "description": "Gets information about a specific qualifier.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthQualifier.html\" target=\"_blank\">Get-StealthQualifier</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getQualifierById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the qualifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Qualifier with given unique identifier returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Qualifier"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Qualifier"
                }
              }
            }
          },
          "404": {
            "description": "There is no qualifier with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthQualifier",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2.2"
      },
      "post": {
        "tags": [
          "Qualifier"
        ],
        "summary": "Update Qualifier",
        "description": "Updates a qualifier.\n\nThe Update Qualifier request supports the following scenarios:\n\n* Changing the name or description of a qualifier\n* Changing the content of an existing qualifier filter (Alternatively, use [Update Qualifier Filter](#operation/updateQualifierFilter))\n* Changing the ordering of qualifier filters (Alternatively, use [Update Qualifier Filter](#operation/updateQualifierFilter))\n* Adding a new qualifier filter (Alternatively, use [Create Qualifier Filter](#operation/createQualifierFilter))\n* Removing an existing qualifier filter (Alternatively, use [Delete Qualifier Filter](#operation/deleteQualifierFilter))\n\n_**Note:** Updates performed on the list of qualifier filters result in new unique identifiers for all qualifier filters in the list._\n\nSee [Data Handling During Update](#section/General-Request-Conventions/Data-Handling-During-Update) for examples of how to construct the payload for an update request.\n\n\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthQualifier.html\" target=\"_blank\">Set-StealthQualifier</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-Qualifier.ps1\" download=\"Update-Qualifier.ps1\">Update-Qualifier.ps1</a></li></ul></div>",
        "operationId": "updateQualifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the qualifier to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The qualifier containing the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Qualifier"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Qualifier"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because there is nothing to update."
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "There is no qualifier with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthQualifier",
        "x-samples": [
          "Update-Qualifier.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.2"
      },
      "delete": {
        "tags": [
          "Qualifier"
        ],
        "summary": "Delete Qualifier",
        "description": "Deletes a qualifier as specified by the unique identifier.\n\n\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthQualifier.html\" target=\"_blank\">Remove-StealthQualifier</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Delete-Qualifier.ps1\" download=\"Delete-Qualifier.ps1\">Delete-Qualifier.ps1</a></li></ul></div>",
        "operationId": "deleteQualifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the qualifier to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to false or not provided, the resource cannot be deleted if it is in use. If set to true, the resource is always deleted, even if it is in use.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background. Used if **force** is true.  The request uses the [independent tasks pattern](#independentTask). See the [Delete Filter List](#operation/deleteFilterList) request for an example of how that pattern applies to deleting an in-use resource.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "The resource has been deleted. No response entity is returned. Used if **force** is false or not set."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthQualifier",
        "x-samples": [
          "Delete-Qualifier.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      }
    },
    "/qualifierFilter": {
      "get": {
        "tags": [
          "Qualifier Filter"
        ],
        "summary": "List Qualifier Filters",
        "description": "Gets information about all qualifier filters.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listQualifierFilter",
        "responses": {
          "200": {
            "description": "A collection of qualifier filter entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/QualifierFilters"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualifierFilters"
                }
              }
            }
          }
        },
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "post": {
        "tags": [
          "Qualifier Filter"
        ],
        "summary": "Create Qualifier Filter",
        "description": "Creates a qualifier filter.\n\n_**Note:** Creating a qualifier filter results in all the qualifier filters under the specified qualifier having new unique identifiers._\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/ruby/create_qualifier_filter.rb\" download=\"create_qualifier_filter.rb\">create_qualifier_filter.rb</a></li></ul></div>",
        "operationId": "createQualifierFilter",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "The location to place the qualifier filter in the associated qualifier's list. Accepted values are **first**, **last**, and the unique identifier of the qualifier filter to place the new one after.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/QualifierFilter"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QualifierFilter"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The create request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-samples": [
          "create_qualifier_filter.rb"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/qualifierFilter/{id}": {
      "get": {
        "tags": [
          "Qualifier Filter"
        ],
        "summary": "Get Qualifier Filter",
        "description": "Gets information about a specific qualifier filter.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getQualifierFilterById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier for the qualifier filter.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Qualifier filter with given unique identifier returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/QualifierFilter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualifierFilter"
                }
              }
            }
          },
          "404": {
            "description": "There is no qualifier filter with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "post": {
        "tags": [
          "Qualifier Filter"
        ],
        "summary": "Update Qualifier Filter",
        "description": "Updates a qualifier filter.\n\nThe Update Qualifier Filter request supports the following scenarios:\n\n* Changing the content of the qualifier filter\n* Changing the ordering of the qualifier filter\n\nYou can complete all of the previously listed scenarios in separate requests or in a single request.\n\nWhen updating except ports, you must provide all the except ports you want\n to keep. Any except ports not provided are removed.\n\n_**Note:** Updating a qualifier filter results in all the qualifier filters under the parent qualifier having new unique identifiers._\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "updateQualifierFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the qualifier filter to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "in": "query",
            "description": "The location to move the qualifier filter in the associated qualifier's list to. Accepted values are **first**, **last**, and the unique identifier of the qualifier filter to place this one after. By default, the qualifier filter's location remains the same. The location also remains the same if the value is the same as unique identifier of the qualifier filter being updated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The qualifier filter containing the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/QualifierFilter"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QualifierFilter"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because there is nothing to update."
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "There is no qualifier filter with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      },
      "delete": {
        "tags": [
          "Qualifier Filter"
        ],
        "summary": "Delete Qualifier Filter",
        "description": "Deletes a qualifier filter.\n\n_**Note:** Deleting a qualifier filter results in all the qualifier filters under the parent qualifier having new unique identifiers._\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "deleteQualifierFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the qualifier filter to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/requestStatus": {
      "get": {
        "tags": [
          "Request Status"
        ],
        "summary": "List Request Statuses",
        "description": "Gets the status of all recent asynchronous requests.\n\nThe status of an asynchronous request is kept for about a day after the request finishes; therefore, this query results in the status for all asynchronous requests for the past day. In addition, the status for an asynchronous request is no longer available if the EcoAPI service is restarted.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthRequestStatus.html\" target=\"_blank\">Get-StealthRequestStatus</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listRequestStatus",
        "responses": {
          "200": {
            "description": "All request statuses returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatuses"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatuses"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthRequestStatus",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2"
      }
    },
    "/requestStatus/{id}": {
      "get": {
        "tags": [
          "Request Status"
        ],
        "summary": "Get Request Status",
        "description": "Gets the status of a specific asynchronous request.\n\n_**Note:** The status for an asynchronous request is retained for one day after the request is finished. In addition, the status for an asynchronous request is no longer available if the EcoAPI service is restarted._\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthRequestStatus.html\" target=\"_blank\">Get-StealthRequestStatus</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getRequestStatusById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The request status unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request status returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "404": {
            "description": "There is no request status for the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthRequestStatus",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2"
      }
    },
    "/role": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "List Roles",
        "description": "Gets information about all roles.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthRole.html\" target=\"_blank\">Get-StealthRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listRole",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._\n\nThe exception is COIs, where the direction and the filter set assigned to each COI within the context of this role are always provided in addition to the unique identifier of the COI.\n\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of role entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthRole",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Create Role",
        "description": "Creates a new role.\n\nThe new role can contain a child filter set and a list of children COIs. To include an existing filter set or COI, include the unique identifier for that resource in the request. If the children do not contain unique identifiers, and if the role does not already have a child with the same name, a new child is created and associated with the role.\n\n_**Note:** If the role is a global isolation role, accounts (users and groups) and endpoints cannot be assigned to that role. If you try to assign a user, group, or endpoint to the role, that request is ignored. (See [Isolate Users or Endpoints](#operation/isolateRole) for more information.)_\n\n The request uses the [semi-independent tasks pattern](#semiindependentTask).\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthRole.html\" target=\"_blank\">New-StealthRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/ruby/create_role.rb\" download=\"create_role.rb\">create_role.rb</a></li></ul></div>",
        "operationId": "createRole",
        "requestBody": {
          "description": "The role to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The create request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthRole",
        "x-samples": [
          "create_role.rb"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/role/isolate": {
      "put": {
        "tags": [
          "Role"
        ],
        "summary": "Isolate Users or Endpoints",
        "description": "Isolates one or more users or endpoints to one or more global isolation roles.\n\nThe XML or JSON passed to this request is very similar to the one returned  by the [List Roles](#operation/listRole) request. However, only a limited set of data  is examined, as follows:\n\n* The unique identifier of the role\n* The name of the user\n* The name of the endpoint\n\nThe given request sample adds several users and endpoints into multiple roles. Here are some points to note about the data:\n\n * Each role must be an existing global isolation role.\n * The same global isolation role can appear multiple times. For example, if the previous example had a third role with the same unique identifier as the first role, that would be allowed.\n * Each global isolation role entry can have any number of user or endpoint entries, including none. Even a role with no users or endpoints is acceptable.\n * If a user or endpoint appears twice, it must be in the same global isolation role; you cannot specify that a single user or endpoint be placed into two separate roles.\n * If a user or endpoint is already isolated in a different global isolation role, that user or endpoint is moved to the desired role.\n * If a user or endpoint is already isolated in the desired global isolation role, no change is made.\n\n\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Add-StealthIsolation.html\" target=\"_blank\">Add-StealthIsolation</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Isolate-UsersAndEndpoints.ps1\" download=\"Isolate-UsersAndEndpoints.ps1\">Isolate-UsersAndEndpoints.ps1</a></li></ul></div>",
        "operationId": "isolateRole",
        "requestBody": {
          "description": "A list of roles that contains the information about the users and endpoints to be isolated into roles.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              },
              "examples": {
                "Isolate Multiple User and Groups to Multiple Roles": {
                  "description": "Isolate Multiple User and Groups to Multiple Roles",
                  "value": {
                    "roles": {
                      "role": [
                        {
                          "id": "4b9fef36-57e3-11e9-8647-d663bd873d93",
                          "accounts": {
                            "user": [
                              {
                                "name": "margo.tran"
                              },
                              {
                                "name": "micellibm"
                              }
                            ]
                          },
                          "endpoints": {
                            "endpoint": {
                              "name": "web-server-1"
                            }
                          }
                        },
                        {
                          "id": "8fa4510b-8f78-4159-8771-a8e64cec528b",
                          "endpoints": {
                            "endpoint": [
                              {
                                "name": "east-fs-23"
                              },
                              {
                                "name": "eu-dublin-3"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              },
              "examples": {
                "Isolate Multiple User and Groups to Multiple Roles": {
                  "description": "Isolate Multiple User and Groups to Multiple Roles",
                  "value": {
                    "role": [
                      {
                        "id": "4b9fef36-57e3-11e9-8647-d663bd873d93",
                        "accounts": {
                          "user": [
                            {
                              "name": "margo.tran"
                            },
                            {
                              "name": "micellibm"
                            }
                          ]
                        },
                        "endpoint": [
                          {
                            "name": "web-server-1"
                          }
                        ]
                      },
                      {
                        "id": "8fa4510b-8f78-4159-8771-a8e64cec528b",
                        "endpoint": [
                          {
                            "name": "east-fs-23"
                          },
                          {
                            "name": "eu-dublin-3"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The users and endpoints have been isolated to the indicated global isolation roles, no response entity is returned."
          },
          "400": {
            "description": "The request contains invalid data. No users or endpoints have been isolated.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Add-StealthIsolation",
        "x-samples": [
          "Isolate-UsersAndEndpoints.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.1"
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Unisolate Users or Endpoints",
        "description": "Removes one or more users or endpoints from isolation.\n\nThe following is an example request that removes both a user and endpoint from isolation:\n\n`URI: DELETE /role/isolate?username=john.smith@example.com&hostname=pc1.example.com`\n\nNote that multiple usernames and hostnames can be specified.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthIsolation.html\" target=\"_blank\">Remove-StealthIsolation</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Unisolate-UsersAndEndpoints.ps1\" download=\"Unisolate-UsersAndEndpoints.ps1\">Unisolate-UsersAndEndpoints.ps1</a></li><li><a href=\"./examples/python/unisolate_users_and_endpoints.py\" download=\"unisolate_users_and_endpoints.py\">unisolate_users_and_endpoints.py</a></li></ul></div>",
        "operationId": "unisolateRole",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "A list of usernames to remove from isolation. See the [user name validation](#section/Validation/User-Names) page for information on how to determine a valid username for the authorization type.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "hostname",
            "in": "query",
            "description": "A list of hostnames to remove endpoints from isolation.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The request to remove one or more users or endpoints from isolation has completed."
          }
        },
        "x-cmdlet": "Remove-StealthIsolation",
        "x-samples": [
          "Unisolate-UsersAndEndpoints.ps1",
          "unisolate_users_and_endpoints.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.1"
      }
    },
    "/role/{id}": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Get Role",
        "description": "Gets information about a specific role.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthRole.html\" target=\"_blank\">Get-StealthRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the specific role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, the returned resources contain only the unique identifiers of the immediate children. If set to true, the returned resources contain the entire tree (children and their children, and so on).\n\n_**CAUTION:** If the Enterprise Manager database contains many COIs, filters, and qualifiers, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._\n\nThe exception is COIs, where the direction and the filter set assigned to each COI within the context of this role are always provided in addition to the unique identifier of the COI.\n\n",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthRole",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "put": {
        "tags": [
          "Role"
        ],
        "summary": "Update Role",
        "description": "Updates a role.\n\n_**Note:** If the role is a global isolation role, accounts (users and groups) and endpoints cannot be assigned to or removed from that role. If you try to assign or remove a user, group, or endpoint to or from the role, that request is ignored. (See [Isolate Users or Endpoints](#operation/isolateRole) and [Unisolate Users or Endpoints](#operation/unisolateRole) for more information.)_\n\n### Add an Existing Filter Set\n Pass just the unique identifier of the filter set to add it. Note that this procedure also applies to changing the role's filter set to another existing filter set. In this case, the original filter set is removed from the role, and the new filter set is added.\n\n### Remove a Filter Set\n Pass an empty filter set.\n\n### Change the Direction of a COI\n To change the direction of COIs for a role, supply a list of COIs containing the unique identifiers from the COIs already attached to the role, including the direction field with the appropriate value. In the `Change COI Direction` Request Sample, the COI identified by B699C750-BC5A-11E8-B568-0800200C9A66 is changed to have a direction of `Initiate`, whereas the directions associated with COIs identified by 2CD718A0-BC5B-11E8-B568-0800200C9A66 and 4BC0EA20-BC5B-11E8-B568-0800200C9A66 remain unchanged.\n\n### Add a User or Group\n To add a user or group to a role, supply an account collection with a list of users and groups that you want to add, including the unique identifiers from the users and groups already attached to the role, and the new users and groups that you want to add.\n\n### Remove the Account\n To remove all users and groups from a role, supply an empty account collection.\n\n\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthRole.html\" target=\"_blank\">Set-StealthRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-Role.ps1\" download=\"Update-Role.ps1\">Update-Role.ps1</a></li><li><a href=\"./examples/python/update_role.py\" download=\"update_role.py\">update_role.py</a></li></ul></div>",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the role to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The role that contains the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              },
              "examples": {
                "Change COI Direction": {
                  "description": "Change COI Direction",
                  "value": {
                    "role": {
                      "cois": {
                        "coi": [
                          {
                            "id": "B699C750-BC5A-11E8-B568-0800200C9A66",
                            "direction": "Initiate"
                          },
                          {
                            "id": "2CD718A0-BC5B-11E8-B568-0800200C9A66"
                          },
                          {
                            "id": "4BC0EA20-BC5B-11E8-B568-0800200C9A66"
                          }
                        ]
                      }
                    }
                  }
                },
                "Remove the Account": {
                  "description": "Remove the Account",
                  "value": {
                    "role": {
                      "accounts": {}
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              },
              "examples": {
                "Change COI Direction": {
                  "description": "Change COI Direction",
                  "value": {
                    "coi": [
                      {
                        "id": "B699C750-BC5A-11E8-B568-0800200C9A66",
                        "direction": "Initiate"
                      },
                      {
                        "id": "2CD718A0-BC5B-11E8-B568-0800200C9A66"
                      },
                      {
                        "id": "4BC0EA20-BC5B-11E8-B568-0800200C9A66"
                      }
                    ]
                  }
                },
                "Remove the Account": {
                  "description": "Remove the Account",
                  "value": {
                    "accounts": {}
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The update request has been accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because there is nothing to update."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthRole",
        "x-samples": [
          "Update-Role.ps1",
          "update_role.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.2"
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Delete Role",
        "description": "Deletes a role as specified by its unique identifier.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthRole.html\" target=\"_blank\">Remove-StealthRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Delete-Role.ps1\" download=\"Delete-Role.ps1\">Delete-Role.ps1</a></li></ul></div>",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the role that you want to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "This option does not affect the role itself because a role can only be associated with one configuration, and this option is ignored for children roles if **recursive** is set to false. However, if **recursive** is set to true, and if **force**  is set to false or is not provided, the role's children cannot be deleted if they are in use. If **recursive** and **force** are both set to true, the role's children are always deleted.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If set to false or not provided, this option deletes only the specified role. If set to true, this option deletes the role and its associated children, depending on the value of **force**.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The delete request has been accepted and is being processed in the background. Used if **recursive** is true.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "204": {
            "description": "The resource has been deleted. No response entity is returned. Used if **recursive** is false."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthRole",
        "x-samples": [
          "Delete-Role.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/role/{id}/group/{groupId}": {
      "put": {
        "tags": [
          "Role"
        ],
        "summary": "Add Group to Role",
        "description": "Adds a group to a role.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Add-StealthGroupToRole.html\" target=\"_blank\">Add-StealthGroupToRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "addGroupToRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the role to add the group to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique identifier of the group to add to the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group added.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because the group is already associated with the role."
          },
          "404": {
            "description": "There is no role or group with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Add-StealthGroupToRole",
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Remove Group from Role",
        "description": "Removes a group from a role.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthGroupFromRole.html\" target=\"_blank\">Remove-StealthGroupFromRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "removeGroupFromRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the role to remove the group from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The unique identifier of the group to remove from the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group removed.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because the group is not associated with the role."
          },
          "404": {
            "description": "There is no role or group with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthGroupFromRole",
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/role/{id}/user/{userId}": {
      "put": {
        "tags": [
          "Role"
        ],
        "summary": "Add User to Role",
        "description": "Adds a user to a role.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Add-StealthUserToRole.html\" target=\"_blank\">Add-StealthUserToRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "addUserToRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the role to add the user to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to add to the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User added.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because the user is already associated with the role."
          },
          "404": {
            "description": "There is no role or user with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Add-StealthUserToRole",
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "summary": "Remove User from Role",
        "description": "Removes a user from a role.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthUserFromRole.html\" target=\"_blank\">Remove-StealthUserFromRole</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "removeUserFromRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the role to remove the user from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to remove from the role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User removed.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "204": {
            "description": "No update was performed because the user is not associated with the role."
          },
          "404": {
            "description": "There is no role or user with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthUserFromRole",
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/service": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List Services",
        "description": "Gets information about all Stealth services.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthProvisionService.html\" target=\"_blank\">Get-StealthProvisionService</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-Service.ps1\" download=\"List-Service.ps1\">List-Service.ps1</a></li><li><a href=\"./examples/python/list_service.py\" download=\"list_service.py\">list_service.py</a></li><li><a href=\"./examples/ruby/list_service.rb\" download=\"list_service.rb\">list_service.rb</a></li></ul></div>",
        "operationId": "listService",
        "responses": {
          "200": {
            "description": "A collection of service entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Services"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Services"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthProvisionService",
        "x-samples": [
          "List-Service.ps1",
          "list_service.py",
          "list_service.rb"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create Service",
        "description": "Creates a **License Admin** service in the Enterprise Manager database.\n\nServices for a computer system that is being monitored are auto discovered and do not need to be created using this request.\n\nSince you cannot add an Enterprise Manager to monitor, you can use this request to add a **License Admin** service of another Enterprise Manager.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-Service.ps1\" download=\"Create-Service.ps1\">Create-Service.ps1</a></li><li><a href=\"./examples/powershell/Demo-LicenseDistro.ps1\" download=\"Demo-LicenseDistro.ps1\">Demo-LicenseDistro.ps1</a></li></ul></div>",
        "operationId": "createService",
        "requestBody": {
          "description": "The service to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Service"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Service"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-samples": [
          "Create-Service.ps1",
          "Demo-LicenseDistro.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/service/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get Service",
        "description": "Gets information about a specific Stealth service.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthProvisionService.html\" target=\"_blank\">Get-StealthProvisionService</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getServiceById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Stealth service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthProvisionService",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.3"
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Delete Service",
        "description": "Deletes a License Admin service in the Enterprise Manager database.\n\nYou can only use this request to delete a License Admin service which was previously created using the [Create Service](#operation/createService) request.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Delete-Service.ps1\" download=\"Delete-Service.ps1\">Delete-Service.ps1</a></li><li><a href=\"./examples/powershell/Demo-LicenseDistro.ps1\" download=\"Demo-LicenseDistro.ps1\">Demo-LicenseDistro.ps1</a></li></ul></div>",
        "operationId": "deleteLicenseService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the service to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource has been deleted. No response entity is returned."
          },
          "400": {
            "description": "You cannot delete a service other than a License Admin service that was previously created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-samples": [
          "Delete-Service.ps1",
          "Demo-LicenseDistro.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "4.0.027"
      }
    },
    "/session": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "List Sessions",
        "description": "Gets the sessions that have been established between the endpoints and the Authorization Services.\n\nThere are two distinct behaviors for this request:\n\n1. The Authorization Services are asked to refresh the list of stored session information, and then the list of stored session information is returned. This is the pre-5.0 release behavior.\n\n2. The existing list of stored session information is returned - no refresh is performed first. This is a new behavior introduced in the Stealth 5.0 release.\n\nThe request uses the first behavior if you include the **computerSystem** query parameter, or if you include neither the **computerSystem** nor **start** query parameters. Thus, both the `GET /session` and `GET /session?computerSystem={id}` requests result in the first behavior. These are the only request URIs that were available before the Stealth 5.0 release, so they retain their pre-5.0 behavior.\n\nThe request uses the second behavior only if you include the **start** query parameter, and do not include the **computerSystem** query parameter. Thus, the `GET /session?start={index}` request results in the second behavior. When using this behavior, the client should examine the **createdAt** timestamp in the returned session objects and use that to determine if the session information is recent enough, or if the client should make a [Refresh Session](#operation/refreshSession) first and then get the session information again.\n\nThe second behavior enables you to paginate through the sessions. For example, if there are 950 sessions, you can request the sessions 100 at a time with the last request yielding the final 50 sessions. To do this, use `GET /session?start=0` for the first request. The response contains a **nextUri** field that is pre-filled to obtain the next 100 sessions: `/session?start=100&max=100&expired=false`. Use the **nextUri** field returned by each request to obtain the next page of sessions until you receive none back.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthSession.html\" target=\"_blank\">Get-StealthSession</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li><li>Portal Operator</li><li>Audit Administrator</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/List-Session.ps1\" download=\"List-Session.ps1\">List-Session.ps1</a></li></ul></div>",
        "operationId": "listSessions",
        "parameters": [
          {
            "name": "computerSystem",
            "in": "query",
            "description": "The unique identifier of the [computer system](#tag/Computer-System) to return sessions for. You can specify multiple **computerSystem** query parameters to return sessions for multiple computer systems. If you do not specify a **computerSystem**, and do not specify a **start** index, then all sessions are returned.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Sessions starting with the index are retrieved. The index is zero-relative.\n\n This query parameter is ignored if **computerSystem** is provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "expired",
            "in": "query",
            "description": "Determines whether expired sessions are retrieved. If **true**, the returned sessions include both sessions that have expired (the session's **expiresAt** field value is in the past) and sessions that have not expired. If **false**, only sessions that have not expired are returned.\n\nThis query parameter is ignored if the **start** index is not provided or ignored.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number of sessions to return. If zero or less, the default value of **100** is used.\n\n  This query parameter is ignored if the **start** index is not provided or ignored.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of session entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Sessions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sessions"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthSession",
        "x-samples": [
          "List-Session.ps1"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration",
          "Portal Operator",
          "Audit Administrator"
        ],
        "x-since": "3.2.2"
      }
    },
    "/session/refresh": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Refresh Sessions",
        "description": "Refreshes the sessions that have been established between the endpoints and the Authorization Services. If no **computerSystem** is provided, all the sessions that have been established between the endpoints and the Authorization Services are refreshed.\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li><li>Portal Operator</li><li>Audit Administrator</li></ul></div>",
        "operationId": "refreshSessions",
        "parameters": [
          {
            "name": "computerSystem",
            "in": "query",
            "description": "The unique identifier of the [computer system](#tag/Computer-System) indicating a session to refresh. You can specify multiple **computerSystem** entries to refresh multiple sessions. The **computerSystem** must support the Authorization Service. If you do not specify a **computerSystem**, then all available sessions are refreshed.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request was accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration",
          "Portal Operator",
          "Audit Administrator"
        ],
        "x-since": "5.0"
      }
    },
    "/session/reset": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Reset Sessions",
        "description": "Resets sessions between endpoints and their Authorization Services. This request allows you to specify multiple sessions in a single request.\n\n The request uses the [independent tasks pattern](#independentTask). If a background task encounters an invalid IP address (one for which there is no Session), or if the job to reset the session fails, a warning is noted in the request status object, after which processing continues with the next IP address.\n\n_**CAUTION**: The response is returned immediately; however, the reset session might still appear until the endpoint is able to re-establish a connection to the Authorization Service. Therefore, if you need to retrieve the new session information for the endpoint, the script should poll the sessions periodically until the new session appears._\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Reset-StealthSession.html\" target=\"_blank\">Reset-StealthSession</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "resetSessionsById",
        "parameters": [
          {
            "name": "ipAddress",
            "in": "query",
            "description": "Identifies the IP address of an endpoint to reset. You can specify multiple IP addresses by providing multiple `ipAddress` query parameters.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request was accepted and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Reset-StealthSession",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2.2"
      }
    },
    "/session/{id}": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Get Session",
        "description": "Gets a specific session that has been established between an endpoint and an Authorization Service.\n\nThis request uses the pre-5.0 release behavior defined in [List Sessions](#operation/listSessions). The session information is retained for five minutes after a List Sessions request is made. Thus, you can use the session's unique identifier to obtain the session information again. After the five minutes have passed, a session information refresh is performed on all Authorization Services before the session information can be returned.\n\nTherefore, we recommend that you do not use this request, but instead use the new behavior of the List Sessions request. Get the current list of sessions and use the **createdAt** timestamp to determine if the session information is recent enough for your purposes. If it is not, then make a [Refresh Session](#operation/refreshSessions) request to update the session information and then list the sessions again.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthSession.html\" target=\"_blank\">Get-StealthSession</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li><li>Portal Operator</li><li>Audit Administrator</li></ul></div>",
        "operationId": "getSessionsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier assigned to the session.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Session with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthSession",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration",
          "Portal Operator",
          "Audit Administrator"
        ],
        "x-since": "3.2.2"
      }
    },
    "/session/{id}/reset": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Reset Session",
        "description": "Resets a previously established session between the endpoint and the Authorization Service. This command cannot be used to reset multiple sessions. Use the [Reset Sessions](#operation/resetSessionsById) request to reset multiple sessions.\n\n_**CAUTION**: The response is returned immediately; however, the reset session might still appear until the endpoint is able to re-establish a connection to the Authorization Service. Therefore, if you need to retrieve the new session information for the endpoint, the script should poll the sessions periodically until the new session appears._\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Reset-StealthSession.html\" target=\"_blank\">Reset-StealthSession</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Reset-Session.ps1\" download=\"Reset-Session.ps1\">Reset-Session.ps1</a></li><li><a href=\"./examples/powershell/Reset-SessionUsingIP.ps1\" download=\"Reset-SessionUsingIP.ps1\">Reset-SessionUsingIP.ps1</a></li><li><a href=\"./examples/python/reset_session.py\" download=\"reset_session.py\">reset_session.py</a></li></ul></div>",
        "operationId": "resetSessionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the session to reset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The reset completed successfully. No response entity is returned."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Reset-StealthSession",
        "x-samples": [
          "Reset-Session.ps1",
          "Reset-SessionUsingIP.ps1",
          "reset_session.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.2.2"
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Settings",
        "description": "Gets the EcoAPI service status information.\n\nThe response is an XML string using the following format:\n\n```xml\n<?xml version=\"1.0\"?>\n<xml>\n  <dl class=\"Status\" style=\"margin-left: 1cm\">\n    <dt><span class=\"PropName\">xxx</span></dt>\n    <dd><span class=\"PropValue\">xxx</span></dd>\n    . . .\n\n  </dl>\n  <dl class=\"Global\" style=\"margin-left: 1cm\">\n    <dt><span class=\"PropName\">xxx</span></dt>\n    <dd><span class=\"PropValue\">xxx</span></dd>\n    . . .\n  </dl>\n</xml>\n```\n\nThis format enables the Stealth Monitor Service to place the response into a HTML page.\n\n_**Note:** This request does not support a JSON response entity._\n\nThe data returned includes the following information. For items in quotation marks, the contents (designated xxx in the XML response listed previously) are the quoted value.\n\n|&lt;dl&gt; Tag Class|PropName Content|PropValue Content|\n|--- |--- |--- |\n|Status|\"List ID\"|\"EcoAPI Service Information\"|\n|Status|\"EcoAPI Service Health State\"|\"5\"|\n|Status|\"EcoAPI Service Primary Status\"|\"1\"|\n|Global|\"List ID\"|\"EcoAPI API Information\"|\n|Global|\"StealthReleaseLevel\"|The Stealth software release level; this is the same as the EcoAPI version.|\n|Global|\"EcoAPI SSL Cert Name\"|The name of the HTTPS certificate used for the EcoAPI, typically \"root\".|\n|Global|\"EcoAPI SSL Cert Thumbprint\"|The SHA-256 digest of this certificate.|\n|Global|\"EcoAPI SSL Cert Expiration\"|The date and time when this certificate expires, using the UTC time zone and the following format: yyyyMMddhhmmss|\n|Global|\"EcoAPI Service ID\"|\"ecoapi\"|\n|Global|\"EcoAPI Base URI|The base URI with the fully qualified host name and a trailing slash.|\n|Global|\"EcoAPI Service Version\"|The EcoAPI release version; this is the same as the Stealth software release level.|\n|Global|\"Last Started Time\"|The date and time when the EcoAPI service started, using the UTC time zone and this format: yyyyMMddhhmmss|\n|Global|\"API Version\"|\"1\"|\n|Global|\"Number of APIs\"|The number of resources to which requests have been made so far (that is, identifies the number of entries in the Request Type and Request Count entries).|\n|Global|\"Request Type\"|A comma-separated list of resources for which requests have been made.|\n|Global|\"Request Count\"|A comma-separated list of counts for the number of times requests have been made for each resource listed in the Request Type entry.|\n|Global|\"Total Request Count\"|The total number of requests that have been made.|\n\nThis request does not require any specific role; any account can be used to make the request.\n\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthApiSetting.html\" target=\"_blank\">Get-StealthApiSetting</a></div>",
        "operationId": "getSettings",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "If set to false or not provided, the **Request Type**, **Request Count**, and **Total Request Count** property values will not contain information regarding the `/settings` requests. If set to true, those property values will contains information regarding the `/settings` requests.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Settings returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthApiSetting",
        "x-since": "3.1"
      }
    },
    "/solution": {
      "get": {
        "tags": [
          "Solution"
        ],
        "summary": "List Solutions",
        "description": "Gets information about all Solutions.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthSolution.html\" target=\"_blank\">Get-StealthSolution</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "listSolution",
        "parameters": [
          {
            "name": "recursive",
            "in": "query",
            "description": "If false or not provided, the returned Solution contains the unique identifiers of its Profiles and Channels. If true, the returned Solution contains all data for its Profiles, Channels, and Flows.\n\n_**CAUTION:** If the Enterprise Manager database contains many Solutions, Profiles, Channels, and Flows, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeOrphans",
            "in": "query",
            "description": "If false or not provided, the returned Solution contains information about Channels and Flows only if both Profiles referenced by those Channels and Flows are also included in the Solution. If true, the returned Solution also contains information about Channels and Flows if only one of the two Profiles referenced by the Channels and Flows is included in the Solution.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of Solution entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Solutions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solutions"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthSolution",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/solution/{id}": {
      "get": {
        "tags": [
          "Solution"
        ],
        "summary": "Get Solution",
        "description": "Gets information about a specific Solution.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthSolution.html\" target=\"_blank\">Get-StealthSolution</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getSolutionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Solution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "If false or not provided, the returned Solution contains the unique identifiers of its Profiles and Channels. If true, the returned Solution contains all data for its Profiles, Channels, and Flows.\n\n_**CAUTION:** If the Enterprise Manager database contains many Solutions, Profiles, Channels, and Flows, setting **recursive** to **true** might result in an [out of memory error](#section/Troubleshooting/Resolving-an-Out-of-Memory-Error). If this happens, repeat the request with **recursive** set to **false**, and make separate requests for each child object._",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeOrphans",
            "in": "query",
            "description": "If false or not provided, the returned Solution contains information about Channels and Flows only if both Profiles referenced by those Channels and Flows are also included in the Solution. If true, the returned Solution also contains information about Channels and Flows if only one of the two Profiles referenced by the Channels and Flows is included in the Solution.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Solution with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Solution"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solution"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthSolution",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/solution/{id}/provision": {
      "post": {
        "tags": [
          "Solution"
        ],
        "summary": "Provision Solution",
        "description": "Provisions a Solution.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature enabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Invoke-StealthProvisionSolution.html\" target=\"_blank\">Invoke-StealthProvisionSolution</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "provisionSolution",
        "parameters": [
          {
            "name": "runAt",
            "in": "query",
            "description": "The [date and time](#section/Validation/Date-and-Time) of when to execute the task. See [scheduling requests](#section/General-Information/Scheduling-Requests) for more information.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "deploymentId",
            "in": "query",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) object(s) that are affected by the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Solution.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The provision request was accepted (passed validation), and is being processed in the background.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Invoke-StealthProvisionSolution",
        "x-feature": "aware",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "5.0"
      }
    },
    "/status": {
      "get": {
        "tags": [
          "API Status"
        ],
        "summary": "Get API Status",
        "description": "Gets information about the status of the EcoAPI service.\n\nThis request does not require any specific role; any account can be used to make the request.\n",
        "operationId": "getApiStatus",
        "responses": {
          "200": {
            "description": "API status returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/API%20Status"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API%20Status"
                }
              }
            }
          }
        },
        "x-since": "5.0"
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "Gets information about all Stealth users.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthUser.html\" target=\"_blank\">Get-StealthUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/list_user.py\" download=\"list_user.py\">list_user.py</a></li></ul></div>",
        "operationId": "listUser",
        "responses": {
          "200": {
            "description": "A collection of user entries. The collection is empty if there are none.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthUser",
        "x-samples": [
          "list_user.py"
        ],
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create User",
        "description": "Creates a user in the Enterprise Manager database.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/New-StealthUser.html\" target=\"_blank\">New-StealthUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Create-User.ps1\" download=\"Create-User.ps1\">Create-User.ps1</a></li><li><a href=\"./examples/python/create_user.py\" download=\"create_user.py\">create_user.py</a></li></ul></div>",
        "operationId": "createUser",
        "requestBody": {
          "description": "The user to create.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The request contained invalid information or the server was unable to complete the request due to errors.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "New-StealthUser",
        "x-samples": [
          "Create-User.ps1",
          "create_user.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User",
        "description": "Gets information about a specific Stealth user.\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthUser.html\" target=\"_blank\">Get-StealthUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Stealth Administrator</li><li>Service Administration</li></ul></div>",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the desired user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with the given unique identifier is returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthUser",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Stealth Administrator",
          "Service Administration"
        ],
        "x-since": "3.4"
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "Updates the description or password for a user in the Enterprise Manager database.\n\nSee [Data Handling During Update](#section/General-Request-Conventions/Data-Handling-During-Update) for  an example on updating the description for a user.\n\n_**Note:** Changing the name or display name of a user is not allowed. If a name or display name is specified during the update, the values are ignored and the fields are unchanged._\n\n### Changing a User's Password\nTo change the password for a user, pass XML or JSON containing the previous password as well as the new password. Both passwords must be encrypted using the public key of the valid, in-use Management Certificate.\n\nIf a password is specified for a user that does not already have a password, an error is returned.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Set-StealthUser.html\" target=\"_blank\">Set-StealthUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/powershell/Update-User.ps1\" download=\"Update-User.ps1\">Update-User.ps1</a></li></ul></div>",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the user to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User object containing the updated values.",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resource was updated.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Set-StealthUser",
        "x-samples": [
          "Update-User.ps1"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.2"
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "description": "Deletes a user from the Enterprise Manager database, as specified by its unique identifier.\n<div class=\"ecoapi\"><i><b>Note:</b> This request can only be made when Stealth is installed with the Stealth(aware) feature disabled.</i></div>\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Remove-StealthUser.html\" target=\"_blank\">Remove-StealthUser</a></div>\n<div class=\"ecoapi\">Roles Allowed:<ul><li>Portal Administrator</li><li>Aware Administrator</li><li>Cryptographic Administrator</li><li>Service Administration</li></ul></div>\n<div class=\"ecoapi\">Examples (Right click \"Save As...\"):<ul><li><a href=\"./examples/python/delete_user.py\" download=\"delete_user.py\">delete_user.py</a></li></ul></div>",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If set to false or not provided, the resource cannot be deleted if it is in use. If set to true, the resource is always deleted, even if it is in use. An in-use user is assigned to one or more roles.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource has been deleted. No response entity is returned."
          },
          "404": {
            "description": "Unable to find the resource with the given unique identifier.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        },
        "x-cmdlet": "Remove-StealthUser",
        "x-samples": [
          "delete_user.py"
        ],
        "x-feature": "legacy",
        "x-rolesAllowed": [
          "Portal Administrator",
          "Aware Administrator",
          "Cryptographic Administrator",
          "Service Administration"
        ],
        "x-since": "3.4.1"
      }
    },
    "/version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Get Version",
        "description": "This request returns the version number of the EcoAPI service.\n\nThis request does not require any specific role; any account can be used to make the request.\n\n<div class=\"ecoapi\">PowerShell Cmdlet: <a href=\"./ecoapi-powershell-docs/Unisys.Stealth/Unisys.Stealth.EcoApi/Get-StealthVersion.html\" target=\"_blank\">Get-StealthVersion</a></div>",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "The EcoAPI version number returned.",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            }
          }
        },
        "x-cmdlet": "Get-StealthVersion",
        "x-since": "3.1"
      }
    }
  },
  "components": {
    "schemas": {
      "API Status": {
        "type": "object",
        "properties": {
          "ecoapiVersion": {
            "type": "integer",
            "description": "The API version.",
            "format": "int32"
          },
          "lastStartedTime": {
            "type": "string",
            "description": "The [date](#section/Validation/Date-and-Time) when the EcoAPI service was last started.",
            "format": "date-time"
          },
          "resource": {
            "type": "array",
            "description": "A list of EcoAPI resources that have been accessed since the last time the EcoAPI was started, along with the total number of requests made to each of them.",
            "xml": {
              "name": "resources",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Resource"
            }
          },
          "runningAware": {
            "type": "boolean",
            "description": "Indicates whether the EcoAPI is running with the Stealth(aware) feature enabled or not."
          },
          "stealthReleaseLevel": {
            "type": "string",
            "description": "The Stealth software release version."
          }
        },
        "description": "Contains information about the EcoAPI service.",
        "xml": {
          "name": "status"
        }
      },
      "AccessPoint": {
        "required": [
          "protocol"
        ],
        "type": "object",
        "properties": {
          "port": {
            "type": "string",
            "description": "The [port](#section/Validation/Server-Port) used by the provider Profile to provide the service.\n\nOnly a single port number can be specified. This field is required if the **protocol** is **UDP** or **TCP** and is ignored otherwise."
          },
          "protocol": {
            "type": "string",
            "description": "The [protocol](#section/Validation/Network-Protocol) used by the provider Profile to provide the service."
          }
        },
        "description": "The port and protocol that provides a service supported by the provider Profile.",
        "xml": {
          "name": "accessPoint"
        }
      },
      "Accounts": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "A group included in this role. There can be any number of groups in a role (including zero).",
            "xml": {
              "name": "group"
            },
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "users": {
            "type": "array",
            "description": "A user included in this role. There can be any number of users in a role (including zero).",
            "xml": {
              "name": "user"
            },
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "description": "A collection of [users](#tag/User) and [groups](#tag/Group) included in this role.\n\nFor a global isolation role, only the names of users isolated in this role appear; no other user data or group information appears. This field is read-only for a global isolation role. To isolate users (and add them to a global  isolation role), use the [Isolate Users or Endpoints](#operation/isolateRole) request. To remove users from isolation, use the [Unisolate Users or Endpoints](#operation/unisolateRole) request.",
        "xml": {
          "name": "accounts"
        }
      },
      "AdminRole": {
        "type": "object",
        "properties": {
          "adminUser": {
            "type": "array",
            "description": "The list of users assigned to the administrator user role.",
            "xml": {
              "name": "adminUsers",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/AdminUser"
            }
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the administrator user role."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the administrator user role by Enterprise Manager."
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the administrator user role."
          }
        },
        "xml": {
          "name": "adminRole"
        }
      },
      "AdminRoles": {
        "required": [
          "adminRole"
        ],
        "type": "object",
        "properties": {
          "adminRole": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminRole"
            }
          }
        },
        "xml": {
          "name": "adminRoles"
        }
      },
      "AdminUser": {
        "required": [
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A [description](#section/Validation/Descriptions) of the user as provided by the administrator."
          },
          "displayName": {
            "type": "string",
            "description": "The [display name](#section/Validation/Names) for a user. This is usually the combination of the user's first name, middle initial, and last name. This value must be unique.\n\nThis field will default to the **name** value if not specified."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the user by Enterprise Manager.",
            "readOnly": true
          },
          "isLocal": {
            "type": "boolean",
            "description": "Indicates whether the user is an Enterprise Manager local user (true) or is an LDAP or Active Directory user (false).\n\nDuring a create, if this field is not specified, the value will default to false.",
            "x-since": "4.0.027"
          },
          "name": {
            "type": "string",
            "description": "The [user ID](#section/Validation/User-Names) used to sign in to Enterprise Manager. For example, **portaladmin**. This value must be unique."
          },
          "organizationalUnit": {
            "type": "string",
            "description": "Indicates the organizational unit (OU) of an LDAP or Active Directory user.\n\nThis field is only returned if LDAP was enabled when the user was created in Enterprise Manager.\n\nThe information provided in this field is the user's organizational unit at the time the user is created in Enterprise Manager. Any modifications made in the LDAP or Active Directory configuration after the user has been created will not be reflected in this field.",
            "readOnly": true,
            "x-since": "4.0.027"
          },
          "password": {
            "type": "string",
            "description": "This field contains the user's encrypted and encoded [password](#section/Validation/Password).\n\nThis password is used only for a local administrator account or when LDAP is not enabled.\n\nThe password must be encrypted using the public key of the valid, in-use Management Certificate. The encryption must use PKCS#1. The ciphertext must be in little-endian format. The password must be encoded in either simple Hex or Base64. This field is not returned in the response, and it is only used when creating a user.",
            "x-since": "4.0.027"
          },
          "previousPassword": {
            "type": "string",
            "description": "The user's previous [password](#section/Validation/Password), which is required in an update password request.\n\nThe password must be encrypted using the public key of the valid, in-use Management Certificate. The encryption must use PKCS#1. The ciphertext must be in little-endian format. The password must be either Hex or Base64-encoded. This field will never appear in the XML/JSON output.",
            "x-since": "4.0.027"
          }
        },
        "xml": {
          "name": "adminUser"
        }
      },
      "AdminUsers": {
        "required": [
          "adminUser"
        ],
        "type": "object",
        "properties": {
          "adminUser": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminUser"
            }
          }
        },
        "xml": {
          "name": "adminUsers"
        }
      },
      "Authorization": {
        "required": [
          "authenticationScheme",
          "id",
          "name",
          "port",
          "providerAddress"
        ],
        "type": "object",
        "properties": {
          "authenticationScheme": {
            "type": "string",
            "description": "Identifies the authentication scheme supported by the Authorization Set.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| CERTIFICATE  | certificate                     | Authentication is based on certificates.                       |\n| IWA          | integratedwindowsauthentication | Authentication is based on the local Windows accounts.         |\n| LDAP         | ldap                            | Authentication is based on the accounts defined in an LDAP server. |\n| REGISTRATION | registration                    | This authentication information is used to register endpoints. |",
            "enum": [
              "CERTIFICATE",
              "IWA",
              "LDAP",
              "REGISTRATION"
            ],
            "x-desc": "Identifies the authentication scheme supported by the Authorization Set."
          },
          "certAge": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of days the authorization certificate is valid.\n\nThe value must be positive; a negative value changes to 0.\n\nThis field is ignored if **authenticationScheme** is set to **registration**.",
            "format": "int32"
          },
          "checkCrl": {
            "type": "boolean",
            "description": "Indicates whether the Certificate Authority (CA) Certificate Revocation List (CRL) is checked for certificate-based authentication.\n\nThis field is used only when **authenticationScheme** is set to **certificate**."
          },
          "debug": {
            "type": "boolean",
            "description": "Indicates whether the Authorization Service generates additional debugging information when it deploys the Authorization Group generated from the Authorization Set.\n\nThis field is ignored if **authenticationScheme** is set to **registration**."
          },
          "deploymentId": {
            "type": "string",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) objects affected by the request."
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the Authorization Set."
          },
          "environmentId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the parent Environment.\n\nThe unique identifier must be for an Environment of type **EM**.\n\nThis field is required only if the Authorization Set is being created standalone. If the Authorization Set is embedded within an Environment, this field is ignored because the parent Environment is implied."
          },
          "exportable": {
            "type": "boolean",
            "description": "Indicates whether you want the private key of the generated authorization certificate to be exportable.\n\nThis field is ignored if **authenticationScheme** is set to **registration**."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the Authorization Set."
          },
          "ldap": {
            "$ref": "#/components/schemas/Ldap"
          },
          "name": {
            "maxLength": 45,
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the Authorization Set.\n\nThe name must be unique among all Authorization Set names."
          },
          "port": {
            "maximum": 65535,
            "minimum": 1,
            "type": "integer",
            "description": "The port used to access the Authorization Service.\n\nThe port must be unique among all Authorization Set ports.\n\nThe value must be a single port; it cannot be a range or an asterisk (*).",
            "format": "int32"
          },
          "providerAddress": {
            "type": "array",
            "description": "The [IP addresses](#section/Validation/IP-Address) or fully qualified [domain names](#section/Validation/Domain-Names)  (FQDN) of the Authorization Set members.\n\nOnly single IPv4 addresses or domain names are allowed (no IPv6 addresses, ranges, or CIDR addresses). Must not exceed more than 100 addresses or domain names.\n\n",
            "xml": {
              "name": "providerAddresses",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "description": "The [IP addresses](#section/Validation/IP-Address) or fully qualified [domain names](#section/Validation/Domain-Names)  (FQDN) of the Authorization Set members.\n\nOnly single IPv4 addresses or domain names are allowed (no IPv6 addresses, ranges, or CIDR addresses). Must not exceed more than 100 addresses or domain names.\n\n",
              "xml": {
                "name": "providerAddress"
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Identifies the purpose of the Authorization Set.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| BOOTSTRAP | Bootstrap | The Authorization Set is used to bootstrap the Management Server or standalone Authorization Server when it first starts running.                 |\n| OTHER     | Other     | Used for all other Authorization Sets.                                                                                                            |\n| SELF_AUTH | SelfAuth  | The Authorization Set describes the 127.0.0.1 IP address used by the Management Server or standalone Authorization Server for self-authorization. |",
            "default": "Other",
            "enum": [
              "BOOTSTRAP",
              "OTHER",
              "SELF_AUTH"
            ],
            "x-desc": "Identifies the purpose of the Authorization Set."
          },
          "useFqdn": {
            "type": "boolean",
            "description": "Indicates whether fully qualified domain names (FQDN) are used with an  **authenticationScheme** of **integratedwindowsauthentication**."
          }
        },
        "description": "A list of Authorization Sets for the Endpoint Property Set.\n\nFor a load request, only the **id** field is examined and must reference an existing Authorization Set.",
        "xml": {
          "name": "authorization"
        },
        "x-ordered": "Authorization Sets"
      },
      "Authorizations": {
        "required": [
          "authorization"
        ],
        "type": "object",
        "properties": {
          "authorization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            }
          }
        },
        "xml": {
          "name": "authorizations"
        }
      },
      "Cache": {
        "type": "object",
        "properties": {
          "hitCount": {
            "type": "integer",
            "description": "The number of times that an entry was found in the cache.",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to this cache."
          },
          "queryCount": {
            "type": "integer",
            "description": "The number of times that the cache was searched for an entry.",
            "format": "int32"
          }
        },
        "xml": {
          "name": "cache"
        }
      },
      "Caches": {
        "required": [
          "cache"
        ],
        "type": "object",
        "properties": {
          "cache": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cache"
            }
          }
        },
        "xml": {
          "name": "caches"
        }
      },
      "Certificate": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "authServiceId": {
            "type": "string",
            "description": "The unique identifier of the [Authorization Service](#tag/Service)."
          },
          "certificate": {
            "type": "array",
            "description": "If this certificate is a signing root certificate, then this field contains a collection of certificate-based authorization certificates signed by this signing root certificate. This field is set to null for every other certificate type.",
            "readOnly": true,
            "xml": {
              "name": "certificates",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Certificate"
            },
            "x-since": "4.0.027"
          },
          "description": {
            "type": "string",
            "description": "For Authorization certificates only, a [description](#section/Validation/Descriptions) of the certificate. (The description can only be provided for Authorization certificates; it is null for all other certificate types.)",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the certificate by Enterprise Manager.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the certificate.\n\nThis field is ignored for an Authorization certificate; instead the IP address of the associated [Authorization Service](#tag/Service) is used. See the **authServiceId** field."
          },
          "notAfter": {
            "type": "string",
            "description": "The [date](#section/Validation/Date-and-Time) that the certificate expires.",
            "format": "date-time",
            "readOnly": true
          },
          "notBefore": {
            "type": "string",
            "description": "The [date](#section/Validation/Date-and-Time) that the certificate was issued.",
            "format": "date-time",
            "readOnly": true
          },
          "publicKeySize": {
            "type": "integer",
            "description": "The public key size of the certificate.",
            "format": "int32",
            "readOnly": true
          },
          "sha1Fingerprint": {
            "type": "string",
            "description": "The SHA1 fingerprint of the certificate.\n\nIf this value is provided during a create request, an attempt is made to import a certificate from the Windows Certificate Store with this fingerprint."
          },
          "signingRootCertificateId": {
            "type": "string",
            "description": "If this certificate is a certificate-based authorization certificate, then this field contains the unique identifier of the signing root certificate that signed this certificate. This field is set to null for every other certificate type.",
            "readOnly": true,
            "x-since": "4.0.027"
          },
          "type": {
            "type": "string",
            "description": "| Mnemonic      | Value                            | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n|---------------|----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| authorization | Authorization                    | Certificates used by the Authorization Service to secure COI information between each AuthGroup and endpoints. This is created automatically, unless you provide a certificate before you create the AuthGroup, as described in the Unisys Stealth Solution Information Center. The public key size must be 3072-bit RSA or 256-bit Elliptic Curve.                                                                                                                                   |\n| cba           | Certificate-Based Authentication | A certificated-based authorization certificate is used to authorize Stealth endpoints. This certificate is used instead of user name and password authentication. This type of certificate must exist in the Local Computer/Personal Certificate Store. The certificate must include the User Principal Name (UPN).                                                                                                                                                                   |\n| importExport  | Import/Export                    | Certificates used to import and export COIs. This type of certificate must exist in the User Certificate Store. This certificate is used to securely transfer COI information between Management Servers in separate Stealth networks.                                                                                                                                                                                                                                                |\n| management    | Management                       | Certificates used by the Management Server to encrypt sensitive configuration information, such as passwords. The public key size must be a minimum of 3072 bits. This type of certificate must exist in the Personal Certificate Store of the user account used to install Enterprise Manager.                                                                                                                                                                                       |\n| signing       | Signing                          | Secures `settings.xml` and `crypto.xml` by signing them. This must be signed by a root (signing root) certificate and must exist in the Local Computer/Personal Certificate Store on the Management Server. Only one signing certificate can be in use at a time.                                                                                                                                                                                                                     |\n| signingRoot   | Signing Root                     | Signs and validates the Signing certificate by establishing the trust chain for the signing certificate. The Public Key size must be 2048 bits (minimum) and must include Certificate Issuer information. This type of certificate must also exist in the Local Computer/Personal Certificate Store on the Management Server and each Windows endpoint. It must exist in the CA certificates store on each Linux endpoint. Only one signing root certificate can be in use at a time. |\n| ssl           | SSL                              | Certificates used to protect HTTPS communication to a server.<br/><br/>You cannot create SSL certificates (using a [Create Certificate](#operation/createCertificate) request); you can only obtain information about SSL certificates (using a [List Certificates](#operation/listCertificate) or [Get Certificate](#operation/getCertificateById) request).                                                                                                                         |",
            "enum": [
              "management",
              "authorization",
              "importExport",
              "signing",
              "signingRoot",
              "cba",
              "ssl"
            ]
          },
          "userId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the [user](#tag/User) that the certificate is assigned to.\n\nYou can use the **userId** with a [Get User](#operation/getUserById) request to obtain the user's name, which is what appears in the UPN column on the Cerificates page of the Stealth Enterprise Manager.\n\nNote that this only applies to certificate-based authorization certificates; this field is set to null for every other certificate type."
          },
          "valid": {
            "type": "boolean",
            "description": "Indicates whether the certificate is valid.",
            "readOnly": true
          }
        },
        "xml": {
          "name": "certificate"
        }
      },
      "Certificates": {
        "required": [
          "certificate"
        ],
        "type": "object",
        "properties": {
          "certificate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Certificate"
            }
          }
        },
        "xml": {
          "name": "certificates"
        }
      },
      "Channel": {
        "required": [
          "id",
          "name",
          "primaryProfile"
        ],
        "type": "object",
        "properties": {
          "coiName": {
            "maxLength": 91,
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the Community of Interest (COI) used for a Stealth-enabled Channel.\n\nIf not provided in a load request, a COI name is generated with the same name as the Channel. This value cannot be changed once the Channel is loaded. In order to change this value, you must remove the Channel and re-add it with the new COI name and all of its Flows."
          },
          "deploymentId": {
            "type": "string",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) objects affected by the request."
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the Channel."
          },
          "flow": {
            "type": "array",
            "description": "The Flows that belong to the Channel.",
            "xml": {
              "name": "flows",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Flow"
            }
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the Channel."
          },
          "name": {
            "maxLength": 91,
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the Channel.\n\nThe name must be unique among all Channel names."
          },
          "primaryProfile": {
            "$ref": "#/components/schemas/ProfileInformation"
          },
          "secondaryProfile": {
            "$ref": "#/components/schemas/ProfileInformation"
          }
        },
        "description": "The Channels that are part of the Solution.\n\nDuring a load request, you must provide only the new Channels being defined. If the load request updates an existing Solution, all Channels that were previously defined for the Profiles that are still in the Solution are retained. Thus, only new Channels for existing Profiles and Channels used by new Profiles need to be defined.",
        "xml": {
          "name": "channel"
        }
      },
      "Channels": {
        "required": [
          "channel"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            }
          }
        },
        "xml": {
          "name": "channels"
        }
      },
      "Child": {
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/Filter"
          },
          "filterList": {
            "$ref": "#/components/schemas/FilterList"
          }
        },
        "description": "A collection of one or more children of the filter list. A filter list child can be either a [filter](#tag/Filter) (that is, a filter with one or more qualifiers) or a filter list.\n\nWhen querying a filter list, you will get either **filter** or **filterList**, but not both.\n\nWhen creating or updating a filter list, you can set either **filter** or **filterList**, but not both. If you set both **filter** and **filterList**, then **filterList** is ignored.",
        "xml": {
          "name": "filterListChild"
        },
        "x-ordered": "filter lists and filters"
      },
      "Coi": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A [description](#section/Validation/Descriptions) of the COI and its purpose."
          },
          "direction": {
            "type": "string",
            "description": "Directional [COIs](#tag/COI) are used to manage inbound and outbound Stealth tunnel establishment.\n\nThis value is present only when querying a [role](#tag/Role) or [configuration](#tag/Configuration). In the former case, the **recursive** option can be set to either true or false. In the latter case, it must be set to true.\n\nWhen creating a COI within a role, this field is ignored for a service COI (and the value **Default** is used). Also, the value **Default** is used if no value is specified for a workgroup COI.\n\nWhen updating a COI within a role, this field cannot be changed for service COIs, and it is ignored.\n\nWhen updating a COI that does not belong to a role, this field is ignored.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| Default  | 0     | Enables the Stealth workgroup COI to both initiate outbound tunnels and accept inbound tunnels.                                                            |\n| Initiate | 16201 | Restricts the Stealth workgroup COI to initiate outbound Stealth tunnels. Once a tunnel is established, communication can flow in either direction.      |\n| Accept   | 16202 | Restricts the Stealth workgroup COI to accept inbound Stealth tunnel requests. Once a tunnel is established, communication can flow in either direction. |",
            "enum": [
              "Default",
              "Initiate",
              "Accept"
            ],
            "x-desc": "Directional [COIs](#tag/COI) are used to manage inbound and outbound Stealth tunnel establishment.\n\nThis value is present only when querying a [role](#tag/Role) or [configuration](#tag/Configuration). In the former case, the **recursive** option can be set to either true or false. In the latter case, it must be set to true.\n\nWhen creating a COI within a role, this field is ignored for a service COI (and the value **Default** is used). Also, the value **Default** is used if no value is specified for a workgroup COI.\n\nWhen updating a COI within a role, this field cannot be changed for service COIs, and it is ignored.\n\nWhen updating a COI that does not belong to a role, this field is ignored."
          },
          "filterSet": {
            "$ref": "#/components/schemas/FilterSet"
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the COI by Enterprise Manager.\n\nThe unique identifier is ignored for the create request. If the COI is associated with a role, refer to the [Create Role](#operation/createRole) request for a description of how the unique identifier is used."
          },
          "isService": {
            "type": "boolean",
            "description": "An indicator of whether the COI is a service COI or a workgroup COI. This field can only be updated if the COI is not in use."
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the COI."
          }
        },
        "description": "A COI represents the group of Stealth endpoints that can communicate securely. A COI can be added in conjunction with other COIs for a given role.",
        "xml": {
          "name": "coi"
        },
        "x-ordered": "COIs"
      },
      "Cois": {
        "required": [
          "coi"
        ],
        "type": "object",
        "properties": {
          "coi": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coi"
            }
          }
        },
        "xml": {
          "name": "cois"
        }
      },
      "ComputerSystem": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "communicationStatus": {
            "type": "string",
            "description": "The availability of the system through the network.\n\n| Mnemonic          | Value | Description                                                                                            |\n|-------------------|-------|--------------------------------------------------------------------------------------------------------|\n| unknown           | 0     | The system's network connection status is unknown.                                                     |\n| notAvailable      | 1     | The system is unable to report the state of its connection to the network.                             |\n| ok                | 2     | Network communication is reported as satisfactory.                                                     |\n| lostCommunication | 3     | The system has lost the network connection. This could be a hardware problem or a configuration issue. |\n| noContact         | 4     | The system is connected to the network but is not able to contact other computers.                     |",
            "readOnly": true,
            "enum": [
              "unknown",
              "notAvailable",
              "ok",
              "lostCommunication",
              "noContact"
            ],
            "x-desc": "The availability of the system through the network."
          },
          "description": {
            "type": "string",
            "description": "A [description](#section/Validation/Descriptions) of the system as provided by the user.",
            "readOnly": true
          },
          "healthState": {
            "type": "string",
            "description": "An indicator of the health of the system in regards to Stealth. It incorporates both the hardware and software components required to support the Stealth software.\n\n| Mnemonic            | Value | Description                                                                                                      |\n|---------------------|-------|------------------------------------------------------------------------------------------------------------------|\n| unknown             | 0     | The health state is not defined.                                                                                 |\n| ok                  | 1     | The health state is ok.                                                                                          |\n| degradedWarning     | 2     | The system functionality is degraded. This typically indicates that one or more Stealth services are not running.|\n| minorFailure        | 3     | The system has experienced a minor failure.                                                                      |\n| majorFailure        | 4     | The system has experienced a major failure.                                                                      |\n| criticalFailure     | 5     | The system has experienced a critical failure.                                                                   |\n| nonRecoverableError | 6     | The system has experienced a non-recoverable error.                                                              |",
            "readOnly": true,
            "enum": [
              "unknown",
              "ok",
              "degradedWarning",
              "minorFailure",
              "majorFailure",
              "criticalFailure",
              "nonRecoverableError"
            ],
            "x-desc": "An indicator of the health of the system in regards to Stealth. It incorporates both the hardware and software components required to support the Stealth software."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier assigned to the system. The value is either the [host name](#section/Validation/Domain-Names) or [IP address](#section/Validation/IP-Address) of the system.",
            "readOnly": true
          },
          "installedDate": {
            "type": "string",
            "description": "The [time](#section/Validation/Date-and-Time) at which the system was added to the Enterprise Manager database.",
            "format": "date-time",
            "readOnly": true
          },
          "license": {
            "$ref": "#/components/schemas/License"
          },
          "name": {
            "type": "string",
            "description": "An alternate, more descriptive [name](#section/Validation/Names) for the system that was provided when the system was added to the Enterprise Manager database. The default is the same value as **id**.",
            "readOnly": true
          },
          "operationalStatus": {
            "type": "array",
            "description": "A collection of operation statuses of the system. Each instance holds the operational status and its corresponding description.",
            "readOnly": true,
            "xml": {
              "name": "operationalStatuses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/OperationalStatus"
            }
          },
          "otherIdentifyingInfo": {
            "type": "array",
            "description": "A collection of additional information regarding the system.\n\nPossible values are the MAC address (using the format \"MAC:<i>{address}</i>\") or a unique identifier (using the format \"GUID:<i>{uuid}</i>\").",
            "readOnly": true,
            "xml": {
              "name": "otherIdentifyingInfos",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "description": "A collection of additional information regarding the system.\n\nPossible values are the MAC address (using the format \"MAC:<i>{address}</i>\") or a unique identifier (using the format \"GUID:<i>{uuid}</i>\").",
              "readOnly": true,
              "xml": {
                "name": "otherIdentifyingInfo"
              }
            }
          },
          "primaryStatus": {
            "type": "string",
            "description": "The highest level view of the state of the system in regards to Stealth, including both hardware and software elements.\n\n| Mnemonic | Value | Description                                                                                 |\n|----------|-------|---------------------------------------------------------------------------------------------|\n| unknown  | 0     | The state of the system cannot be determined.                                               |\n| ok       | 1     | The computer is working as expected to support Stealth.                                     |\n| degraded | 2     | The system has lost capability and might not support Stealth.                               |\n| error    | 3     | The system is reporting an error. Check the **operationalStatus** for additional information. |",
            "readOnly": true,
            "enum": [
              "unknown",
              "ok",
              "degraded",
              "error"
            ],
            "x-desc": "The highest level view of the state of the system in regards to Stealth, including both hardware and software elements."
          },
          "role": {
            "type": "array",
            "description": "A collection of roles for installed services on the system.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| appliance | Appliance | Has the Stealth 2.8 Appliance role. |\n| authorization | Authorization | The system is running the Authorization Service. This includes Management Servers and standalone Authorization Servers. |\n| license | License | Has the License Host role and is providing licenses to other systems. |\n| management | Management | Has the Management Server role. |\n| marketplace | AWS Marketplace | Has the AWS Marketplace role. |\n| sra | SRA | Has the Secure Remote Access (SRA) Gateway role. |\n| vpn | VPN | Has the Secure Virtual Gateway role. |\n",
            "readOnly": true,
            "xml": {
              "name": "roles",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "description": "| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| appliance | Appliance | Has the Stealth 2.8 Appliance role. |\n| authorization | Authorization | The system is running the Authorization Service. This includes Management Servers and standalone Authorization Servers. |\n| license | License | Has the License Host role and is providing licenses to other systems. |\n| management | Management | Has the Management Server role. |\n| marketplace | AWS Marketplace | Has the AWS Marketplace role. |\n| sra | SRA | Has the Secure Remote Access (SRA) Gateway role. |\n| vpn | VPN | Has the Secure Virtual Gateway role. |\n",
              "readOnly": true,
              "xml": {
                "name": "role"
              },
              "x-desc": "A collection of roles for installed services on the system."
            },
            "x-desc": "A collection of roles for installed services on the system."
          },
          "service": {
            "type": "array",
            "description": "A collection of services on the system.",
            "readOnly": true,
            "xml": {
              "name": "services",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Service"
            },
            "x-since": "5.0"
          },
          "systemNumber": {
            "type": "string",
            "description": "A value associated with the system, typically containing the same MAC address found in **otherIdentifyingInfo**.",
            "readOnly": true
          },
          "timeOfLastStateChange": {
            "type": "string",
            "description": "The [date and time](#section/Validation/Date-and-Time) of the most recent change in the state of the system.",
            "format": "date-time",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "The IP address and port number used by the Stealth Monitor Service running on the system.\n\nDuring a create request, the field value should be a valid URL containing the IP address and port number of a system that has the Stealth Monitor Service installed. If a port number is not specified, the default port number 443 is used.",
            "x-since": "3.4"
          }
        },
        "xml": {
          "name": "computerSystem"
        }
      },
      "ComputerSystems": {
        "required": [
          "computerSystem"
        ],
        "type": "object",
        "properties": {
          "computerSystem": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComputerSystem"
            }
          }
        },
        "xml": {
          "name": "computerSystems"
        }
      },
      "Configuration": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "authorizationService": {
            "type": "array",
            "description": "A list of all Authorization Services in the configuration.\n\nThis list is ignored for a global configuration.\n\nFor create and update requests, only the unique identifier (the **id** field of the **service**) is used; all other fields are ignored.\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "authorizationServices",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Service"
            },
            "x-ordered": "Authorization Services"
          },
          "description": {
            "type": "string",
            "description": "A [description](#section/Validation/Descriptions) of the configuration and its purpose."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the configuration by Enterprise Manager.",
            "readOnly": true
          },
          "licenseService": {
            "type": "array",
            "description": "A list of all License Admin Services in the configuration.\n\nThis list is ignored for a global configuration.\n\nFor create and update requests, only the unique identifier (the **id** field of the **service**) is used; all other fields are ignored.\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "licenseServices",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Service"
            },
            "x-ordered": "License Services"
          },
          "name": {
            "maxLength": 256,
            "type": "string",
            "description": "A descriptive [name](#section/Validation/Names) for the configuration."
          },
          "role": {
            "type": "array",
            "description": "A list of Stealth roles in the configuration.\n\nThis field is ignored when updating a configuration. See the [Role](#tag/Role) resource for information on creating, deleting, or updating roles.",
            "xml": {
              "name": "roles",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "type": {
            "type": "string",
            "description": "Identifies how the configuration is used.\n\nIf not entered during a create request, the default value **Standard** is used. For a create request, only **Standard** or **Global** are allowed; all other values are read-only. This field is ignored during an update request; you cannot change the configuration type once created.\n\n| Mnemonic  | Value     | Description                                                                                                                                                                                                            |\n|-----------|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| BOOTSTRAP | Bootstrap | Identifies a configuration corresponding to the Profile that identifies an endpoint used by a Stealth administrator to access the Stealth Management Server.<br/>This value is not valid when creating a configuration. |\n| EM        | EM        | Identifies a configuration corresponding to the Profile that identifies the Enterprise Server.<br/>This value is not valid when creating a configuration.                                                               |\n| GLOBAL    | Global    | Identifies a global configuration used to isolate endpoints and users. There can be at most one global configuration in a Stealth environment.                                                                          |\n| SAAS      | SAAS      | Identifies a configuration corresponding to the Profile that identifies a standalone Authorization Server.<br/>This value is not valid when creating a configuration.                                                   |\n| STANDARD  | Standard  | Identifies a standard Stealth configuration.                                                                                                                                                                            |\n| USER      | User      | Identifies a configuration corresponding to a Profile in a user Solution.<br/>This value is not valid when creating a configuration.                                                                                    |",
            "default": "Standard",
            "enum": [
              "STANDARD",
              "GLOBAL",
              "EM",
              "SAAS",
              "BOOTSTRAP",
              "USER"
            ],
            "x-desc": "Identifies how the configuration is used.\n\nIf not entered during a create request, the default value **Standard** is used. For a create request, only **Standard** or **Global** are allowed; all other values are read-only. This field is ignored during an update request; you cannot change the configuration type once created.",
            "x-since": "4.0.1"
          }
        },
        "description": "A configuration is defined by a group of roles, users, and groups as well as associated COIs and filters for a particular set of Stealth communications. A configuration is deployed by the Management Server or standalone Authorization Server for use by the endpoints using the configuration. Your environment can include one or more configurations.",
        "xml": {
          "name": "configuration"
        }
      },
      "Configurations": {
        "required": [
          "configuration"
        ],
        "type": "object",
        "properties": {
          "configuration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Configuration"
            }
          }
        },
        "xml": {
          "name": "configurations"
        }
      },
      "CreatedResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of this newly created resource."
          },
          "oldId": {
            "type": "string",
            "description": "For some update requests, for some child resources (such as a Filter), the child cannot be directly updated and is instead recreated. This field contains the [unique identifier](#section/Validation/IDs) of the child before it was updated, and the **id** field contains the new unique identifier for the child.",
            "x-since": "3.4"
          },
          "uri": {
            "type": "string",
            "description": "The full URI that can be used to get this newly created resource. The URI can be empty if the newly created resource cannot be accessed directly."
          }
        },
        "description": "If the request was to create a resource, then this is a list of information about the created resources. This field is used during create requests and in some update requests that require new resources to be created. This field is unused for all other requests.\n\nInformation about one of the created resources. The first entry in the list usually pertains to the primary resource. However, if a resource is created during an update, that resource might not be the primary resource.",
        "xml": {
          "name": "createdResource"
        }
      },
      "Endpoint": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "An optional [description](#section/Validation/Descriptions) of the endpoint."
          },
          "displayName": {
            "type": "string",
            "description": "A user friendly name for this endpoint. Defaults to **name**."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to this endpoint by Enterprise Manager.",
            "readOnly": true
          },
          "inspectionInfo": {
            "$ref": "#/components/schemas/InspectionInfo"
          },
          "name": {
            "type": "string",
            "description": "The fully qualified [domain name](#section/Validation/Domain-Names) of the endpoint. This value should be the same as what is reported in the **endPointId** field for the [Session](#tag/Session) for that endpoint.\n\nThis field is ignored when updating the endpoint.",
            "format": "hostname"
          }
        },
        "description": "A collection of isolated endpoints. This information is available only for a global isolation role.\n\nTo isolate endpoints (and add them to a global isolation role), use the [Isolate Users or Endpoints](#operation/isolateRole) request. To remove endpoints from isolation, use the [Unisolate Users or Endpoints](#operation/unisolateRole) request.\n\nAn endpoint that has been isolated in this global isolation role. There can be any number of endpoints in a global isolation role (including zero).",
        "xml": {
          "name": "endpoint"
        },
        "x-since": "4.0.1"
      },
      "EndpointConfiguration": {
        "type": "object",
        "properties": {
          "changeTime": {
            "type": "string",
            "description": "The [date and time](#section/Validation/Date-and-Time) at which the individual endpoint configuration report was generated. The value reflects the system time on the endpoint, converted to UTC.",
            "format": "date-time"
          },
          "checksum": {
            "type": "string",
            "description": "An SHA256 checksum of the configuration data in the **xml**  field.\n\n"
          },
          "lastTime": {
            "type": "string",
            "description": "The most recent [date and time](#section/Validation/Date-and-Time) at which the endpoint reported this configuration. (Endpoints report their configuration every 24 hours.) The value reflects the system time on the endpoint, converted to UTC.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The fully qualified [host name](#section/Validation/Domain-Names) of the endpoint."
          },
          "sequence": {
            "type": "integer",
            "description": "A sequence number assigned to this entry by the endpoint.\n\nSee _Configuration Audit Report Overview_ in the _Unisys Stealth Information Center_ for more information about sequence numbers.",
            "format": "int32"
          },
          "xml": {
            "type": "string",
            "description": "The endpoint report XML.\n\nThe Configuration Audit Report XML documents are defined by a schema, which is included in the AuditSchema folder in the Unisys Stealth Solution ISO file. The schema is named Audit.xsd, and it includes a file named StealthCommon.xsd. These two files can be used to understand the structure and contents of the XML documents generated by Stealth-enabled endpoints."
          }
        },
        "description": "A collection of containers for individual configuration audit reports. There can be up to 100 reports.",
        "xml": {
          "name": "endpoint"
        }
      },
      "EndpointPackage": {
        "required": [
          "basePackageType",
          "configurationId",
          "endpointMode",
          "name",
          "profileName"
        ],
        "type": "object",
        "properties": {
          "audit": {
            "type": "boolean",
            "description": "Indicates if configuration audit reports are enabled for the endpoint package (and will be sent by the endpoint). This value is true if enabled, false if disabled (default), and null if unknown."
          },
          "basePackageType": {
            "type": "string",
            "description": "The base package operating system type.\n\nWhen creating an endpoint package, this value cannot be set to **unknown**; it must match the operating system of the endpoint on which you want to install the endpoint package.\n\n| Mnemonic | Value | Description                                   |\n|----------|-------|-----------------------------------------------|\n| unknown  | 0     | The operating system type is not defined.     |\n| Win64    | 1     | A Windows 64-bit operating system is defined. |\n| Win32    | 2     | A Windows 32-bit operating system is defined. |\n| Linux    | 3     | A Linux operating system is defined.          |",
            "enum": [
              "unknown",
              "Win64",
              "Win32",
              "Linux"
            ],
            "x-desc": "The base package operating system type.\n\nWhen creating an endpoint package, this value cannot be set to **unknown**; it must match the operating system of the endpoint on which you want to install the endpoint package."
          },
          "certName": {
            "type": "string",
            "description": "The certificate name, if certificate-based authorization is used. (This can be null, if the endpoint uses LDAP or Integrated Windows Authentication instead.) This can be either a common name or an [Object Identifier](#section/Validation/Object-Identifier).\n\nThe following are the Unisys default values:\n\n* Common Name (User Name Authorization) - StealthAuthentication\n* Enhanced Key Usage (Computer Name Authorization) - 1.3.6.1.4.1.223.52.1.1\n* Enhanced Key Usage (User Name Authorization) - 1.3.6.1.4.1.223.52.1.2"
          },
          "certType": {
            "type": "string",
            "description": "The type of certificate, if certificate-based authorization is used. If no value for this field is provided, a default value of **none** will be used instead.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| unknown | 0 | The certificate lookup mechanism has not been specified. |\n| none | 1 | There is no certificate. |\n| commonName | 2 | Use the common name specified in the certificate name field to find the CBA certificate (Common Name (User Name Authorization)). |\n| ekuComputer | 3 | Use the Enhanced Key Usage (EKU) value specified in the certificate name field to find the CBA certificate among the certificates registered for the computer (Enhanced Key Usage (Computer Name Authorization)). |\n| ekuUser | 4 | Use the Enhanced Key Usage (EKU) value specified in the certificate name field to find the CBA certificate among the certificates registered for the user (Enhanced Key Usage (User Name Authorization)). |\n",
            "enum": [
              "unknown",
              "none",
              "commonName",
              "ekuComputer",
              "ekuUser"
            ],
            "x-desc": "The type of certificate, if certificate-based authorization is used. If no value for this field is provided, a default value of **none** will be used instead."
          },
          "configurationId": {
            "type": "array",
            "description": "A list of configuration unique identifiers. Enterprise Manager allows you to add multiple configurations to an endpoint package.\n\nYou cannot specify the global isolation configuration.",
            "xml": {
              "name": "configurations",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "description": "A list of configuration unique identifiers. Enterprise Manager allows you to add multiple configurations to an endpoint package.\n\nYou cannot specify the global isolation configuration.",
              "xml": {
                "name": "configurationId"
              }
            }
          },
          "creationDate": {
            "type": "string",
            "description": "The [date](#section/Validation/Date-and-Time) when the endpoint package was created.",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the endpoint package provided by the user."
          },
          "endpointMode": {
            "type": "string",
            "description": "The endpoint mode that determines the endpoint behavior.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| CAO      | ClientAlwaysOn | This is a client endpoint, and Stealth is always enabled.                                      |\n| COD      | ClientOnDemand | This is a client endpoint, and Stealth can be enabled or disabled by the logged in user.       |\n| SAO      | ServerAlwaysOn | This is a server endpoint, and Stealth is always enabled.                                      |\n| SOD      | ServerOnDemand | This is a server endpoint, and Stealth can be enabled or disabled by the server administrator. |",
            "enum": [
              "CAO",
              "COD",
              "SAO",
              "SOD"
            ],
            "x-desc": "The endpoint mode that determines the endpoint behavior."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the endpoint package by Enterprise Manager.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the endpoint package.\n\nWhen creating an endpoint package, this field should be a simple file name, not a full file path. If this field is set to a full file path, the simple file name will be extracted and used instead.\n\nWhen reading an endpoint package, this field is set to the full file path."
          },
          "profileName": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the settings profile, which is used to correlate the original endpoint package and any revisions.\n\nThis field is ignored during an update."
          },
          "revision": {
            "type": "integer",
            "description": "The revision number is incremented if the endpoint package is updated with either new settings or new base software. In either case, a new endpoint package file is created. Starts at 1.",
            "format": "int32",
            "readOnly": true
          },
          "softwareLevel": {
            "type": "string",
            "description": "The version string of the Enterprise Manager software.",
            "readOnly": true
          },
          "useStealthTunnelingPriority": {
            "type": "boolean",
            "description": "Indicates processing priority for the endpoint; that is, whether it should prioritize Stealth traffic over clear text traffic after a Stealth tunnel is created. Set the value to false if you want to prioritize clear text traffic (the default) or to true if you want to prioritize Stealth traffic. Null will default to clear text priority."
          }
        },
        "xml": {
          "name": "endpointPackage"
        }
      },
      "EndpointPackages": {
        "required": [
          "endpointPackage"
        ],
        "type": "object",
        "properties": {
          "endpointPackage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointPackage"
            }
          }
        },
        "xml": {
          "name": "endpointPackages"
        }
      },
      "EndpointPropertySet": {
        "required": [
          "authorization",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "auditReporting": {
            "type": "boolean",
            "description": "Indicates whether Configuration Audit Reports (CAR) should be sent by the endpoints."
          },
          "authorization": {
            "type": "array",
            "description": "A list of Authorization Sets for the Endpoint Property Set.\n\nFor a load request, only the **id** field is examined and must reference an existing Authorization Set.\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "authorizations",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Authorization"
            },
            "x-ordered": "Authorization Sets"
          },
          "certName": {
            "type": "string",
            "description": "The [certificate name](#section/Validation/Certificate-Names) used for certificate authentication.\n\nThe certificate name is required if **certType** is set to **commonName**, **ekuComputer**, or **ekuUser**."
          },
          "certType": {
            "type": "string",
            "description": "The type of certificate used for certificate authentication.\n\nNote that the value **0** or **unknown**, while a valid certificate type, is not used for Endpoint Property Sets and automatically converts to the value **none**.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| none | 1 | There is no certificate. |\n| commonName | 2 | Use the common name specified in the certificate name field to find the CBA certificate (Common Name (User Name Authorization)). |\n| ekuComputer | 3 | Use the Enhanced Key Usage (EKU) value specified in the certificate name field to find the CBA certificate among the certificates registered for the computer (Enhanced Key Usage (Computer Name Authorization)). |\n| ekuUser | 4 | Use the Enhanced Key Usage (EKU) value specified in the certificate name field to find the CBA certificate among the certificates registered for the user (Enhanced Key Usage (User Name Authorization)). |\n"
          },
          "deploymentId": {
            "type": "string",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) objects affected by the request."
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the Endpoint Property Set."
          },
          "endpointMode": {
            "type": "string",
            "description": "The Stealth mode defined for the endpoints in the Endpoint Property Set.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| CAO      | ClientAlwaysOn | This is a client endpoint, and Stealth is always enabled.                                      |\n| COD      | ClientOnDemand | This is a client endpoint, and Stealth can be enabled or disabled by the logged in user.       |\n| SAO      | ServerAlwaysOn | This is a server endpoint, and Stealth is always enabled.                                      |\n| SOD      | ServerOnDemand | This is a server endpoint, and Stealth can be enabled or disabled by the server administrator. |",
            "default": "ServerAlwaysOn",
            "enum": [
              "CAO",
              "COD",
              "SAO",
              "SOD"
            ],
            "x-desc": "The Stealth mode defined for the endpoints in the Endpoint Property Set."
          },
          "id": {
            "maxLength": 4,
            "type": "string",
            "description": "The Endpoint Property Set identifier.\n\nThe value can contain letters and numbers and is case-insensitive. For example, \"aaa\" and \"Aaa\" are the same identifiers. The identifier is always stored in all uppercase, as in the example identifier \"AAA\".\n\nThe value \"0\" is reserved for system use.\n\nUse a value of \"DEFC\" to define an Endpoint Property Set for client nodes that are not defined as a [Node Map](#tag/Node-Map). Use a value of \"DEFS\" to define an Endpoint Property Set for server nodes that are not defined as a Node Map."
          },
          "name": {
            "maxLength": 45,
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the Endpoint Property Set."
          },
          "useStealthTunnelingPriority": {
            "type": "boolean",
            "description": "The processing priority for the endpoint, which determines whether it should prioritize Stealth traffic over clear text traffic after a Stealth tunnel is created. Set the value to false if you want to prioritize clear text traffic or to true if you want to prioritize Stealth traffic. If not specified, clear text priority is assumed."
          }
        },
        "description": "An Endpoint Property Set is a group of attributes used to build the Authorization Sets to support that authorization of endpoints and the endpoint package's settings.xml file.",
        "xml": {
          "name": "endpointPropertySet"
        }
      },
      "EndpointPropertySets": {
        "required": [
          "endpointPropertySet"
        ],
        "type": "object",
        "properties": {
          "endpointPropertySet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointPropertySet"
            }
          }
        },
        "xml": {
          "name": "endpointPropertySets"
        }
      },
      "EndpointReport": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "array",
            "description": "A collection of containers for individual configuration audit reports. There can be up to 100 reports.",
            "xml": {
              "name": "endpoints",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/EndpointConfiguration"
            }
          },
          "nextUri": {
            "type": "string",
            "description": "The URI you can use to obtain the next set of configuration audit reports.\n\n_**Note:** If all available entries are listed on the prior call, the link to the next set might not provide any data._"
          }
        },
        "xml": {
          "name": "endpointReport"
        }
      },
      "Endpoints": {
        "required": [
          "endpoint"
        ],
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            }
          }
        },
        "xml": {
          "name": "endpoints"
        }
      },
      "Environment": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "authorization": {
            "type": "array",
            "description": "The Authorization Sets defined for the Environment.\n\nAuthorization Sets can only be defined for Environments of type **EM**.\n\nWhen querying an Environment, this field is filled in if the **recursive** query parameter is set to **true**. This field is omitted if the **recursive** query parameter is set to **false** or not provided.",
            "xml": {
              "name": "authorizations",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Authorization"
            }
          },
          "deploymentId": {
            "type": "string",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) objects affected by the request."
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the Environment."
          },
          "enforcement": {
            "type": "string",
            "description": "The minimum level of enforcement or filtering required for network traffic.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| ipAddresses | 1 | Filters are generated to enforce IP address policies. |\n| ports | 2 | Filters are generated to enforce port policies. |\n| ipAddressesAndPorts | 3 | Filters are generated to enforce IP address policies and local port policies. |\n",
            "default": "ports"
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the Environment."
          },
          "name": {
            "maxLength": 45,
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the Environment.\n\nThe name must be unique among all Environment names."
          },
          "type": {
            "type": "string",
            "description": "The type of Environment.\n\nYou can only create one Environment of type **EM**.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| EM       | EM    | Identifies an Enterprise Manager environment, which consists of servers that are part of the Stealth infrastructure.             |\n| USER     | User  | Identifies a user environment, which consists of servers that provide user services. This is equivalent to a Stealth(aware) Project. |",
            "default": "User",
            "enum": [
              "EM",
              "USER"
            ],
            "x-desc": "The type of Environment.\n\nYou can only create one Environment of type **EM**."
          }
        },
        "description": "An Environment contains a set of Solutions to be configured separately, such as test and production Environments. A configuration is created for each Environment, with each configuration containing the role and COI information for the Environment.",
        "xml": {
          "name": "environment"
        }
      },
      "Environments": {
        "required": [
          "environment"
        ],
        "type": "object",
        "properties": {
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Environment"
            }
          }
        },
        "xml": {
          "name": "environments"
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "key": {
            "type": "integer",
            "description": "Identifies the error. Each error has a unique number.",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "The error message. The message appears in the language specified by the `Accept-Language` HTTP Header if a translation is available for the indicated language."
          }
        },
        "xml": {
          "name": "error"
        }
      },
      "Errors": {
        "type": "object",
        "properties": {
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "xml": {
          "name": "errors"
        }
      },
      "ExceptPort": {
        "type": "object",
        "properties": {
          "localPort": {
            "type": "string",
            "description": "Identifies a single [port](#section/Validation/Server-Port) or port range to exclude from the filter's local port range. This value cannot be an asterisk (\\*). This value can be omitted, but in that case **remotePort** is required."
          },
          "remotePort": {
            "type": "string",
            "description": "Identifies a single [port](#section/Validation/Server-Port) or port range to exclude from the filter's remote port range. This value cannot be an asterisk (\\*). This value can be omitted, but in that case **localPort** is required."
          }
        },
        "description": "The except ports apply exceptions to the local and remote ports defined for the qualifier filter. This tag is valid only if **localPort** or **remotePort** contains a port range.\n\nEach **remotePort** identifies a pair of ports that are exceptions to the declared local and remote port ranges. Consider the following example:\n\n```xml\n <localPort>9000-9999</localPort>\n <remotePort>*</remotePort>\n <exceptPorts>\n   <exceptPort>\n     <localPort>9100</localPort>\n     <remotePort>32000-65535</remotePort>\n   </exceptPort>\n   <exceptPort>\n     <localPort>9200</localPort>\n   </exceptPort>\n   <exceptPort>\n     <remotePort>1024-31999</remotePort>\n   </exceptPort>\n </exceptPorts>\n```\n\nThe first two lines mean that local ports 9000 through 9999 will accept connections from any remote port.\n\nThe first except port means that for local port 9100, any connections from remote ports 32000 through 65535 will not be accepted. However, that port will accept connections from remote ports that are less than 32000.\n\nThe second except port means that local port 9200 will not accept connections from any remote port. This is the same as defining two filters: one with local ports 9000-9199 and the other with local ports 9201-9999.\n\nThe third except port means that local ports 9000 through 9999 will not accept any connections from remote ports 1024 through 319999.",
        "xml": {
          "name": "exceptPort"
        },
        "x-since": "3.3"
      },
      "Filter": {
        "required": [
          "filterListId",
          "ipAddress"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A [description](#section/Validation/Descriptions) of the filter as provided by the user."
          },
          "filterListId": {
            "type": "string",
            "description": "The unique identifier of the [filter list](#tag/Filter-List) that owns this filter.\n\nIf you are creating the resource directly using a [Create Filter](#operation/createFilter) request, you must specify a value for this tag. If you are creating the resource as part of a [Create Filter List](#operation/createFilterList) or an [Update Filter List](#operation/createFilterList) request, this tag is ignored because the unique identifier of the filter list is assumed, meaning that you cannot change which filter list owns this filter."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the filter by Enterprise Manager."
          },
          "ipAddress": {
            "type": "string",
            "description": "The [IP address](#section/Validation/IP-Address) included in the filter.\n\nIf you need to modify the IP address of an existing filter, you must make an [Update Filter List](#operation/updateFilterList) request."
          },
          "qualifier": {
            "type": "array",
            "description": "A collection of qualifiers included in this filter.\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "qualifiers",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Qualifier"
            },
            "x-ordered": "qualifiers"
          },
          "qualifiersId": {
            "type": "string",
            "description": "The unique identifier assigned to the filter by Enterprise Manager.",
            "readOnly": true
          }
        },
        "description": "The [filter](#tag/Filter), which might include embedded qualifiers, included in this filter list.\n\n",
        "xml": {
          "name": "filter"
        }
      },
      "FilterList": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "child": {
            "type": "array",
            "description": "A collection of one or more children of the filter list. A filter list child can be either a [filter](#tag/Filter) (that is, a filter with one or more qualifiers) or a filter list.\n\nWhen querying a filter list, you will get either **filter** or **filterList**, but not both.\n\nWhen creating or updating a filter list, you can set either **filter** or **filterList**, but not both. If you set both **filter** and **filterList**, then **filterList** is ignored.\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "children",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Child"
            },
            "x-ordered": "filter lists and filters"
          },
          "createdOn": {
            "type": "string",
            "description": "The [date and time](#section/Validation/Date-and-Time) when the filter list was created.",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the filter list as provided by the user."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to this filter list by Enterprise Manager.\n\nThe unique identifier is ignored for the primary resource (that is, the filter list at the root of the filter list tree) during a create or update request. For creating a filter list, refer to the [Create Filter List](#operation/createFilterList) request for a description of how the unique identifier is used for secondary resources (that is, for the child filter lists). For updating a filter list, refer to the [Update Filter List](#operation/updateFilterList) request for a description of how the unique identifier is used for child filter lists."
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the filter list.\n\nThe name must be unique among all of the filter lists in the Enterprise Manager database."
          }
        },
        "description": "A collection of [filter lists](#tag/Filter-List) associated with the filter set or parent filter list.\n\n",
        "xml": {
          "name": "filterList"
        },
        "x-ordered": "filter lists"
      },
      "FilterLists": {
        "required": [
          "filterList"
        ],
        "type": "object",
        "properties": {
          "filterList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterList"
            }
          }
        },
        "xml": {
          "name": "filterLists"
        }
      },
      "FilterSet": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "allow": {
            "type": "boolean",
            "description": "If true, the filter set identifies allowed resources; if false, the filter set identifies denied resources. This value is present only when there is one or more filter lists in this filter set.\n\nThis value is required if either of the following occurs:\n * A filter set is created with filter lists\n * A filter set without filter lists is updated to contain filter lists\n\n_**Note:** The allow field is ignored during an update if the filter set does not contain a list of filter lists._"
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the resource.\n\n"
          },
          "filterList": {
            "type": "array",
            "description": "A collection of [filter lists](#tag/Filter-List) associated with the filter set or parent filter list.\n\n\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "filterLists",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/FilterList"
            },
            "x-ordered": "filter lists"
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to this resource by Enterprise Manager."
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the resource."
          }
        },
        "description": "A collection of filter lists used to restrict communications",
        "xml": {
          "name": "filterSet"
        }
      },
      "FilterSets": {
        "required": [
          "filterSet"
        ],
        "type": "object",
        "properties": {
          "filterSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterSet"
            }
          }
        },
        "xml": {
          "name": "filterSets"
        }
      },
      "Filters": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        },
        "xml": {
          "name": "filters"
        }
      },
      "Flow": {
        "required": [
          "consumerProfileId",
          "id",
          "policy",
          "providerProfileId"
        ],
        "type": "object",
        "properties": {
          "accessPoint": {
            "$ref": "#/components/schemas/AccessPoint"
          },
          "channelId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the parent Channel."
          },
          "consumerProfileId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the Profile that consumes the service through the Flow. This Profile must be one of the Profiles defined in the parent Channel."
          },
          "deploymentId": {
            "type": "string",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) objects affected by the request."
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the Flow."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the Flow."
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the Flow.\n\nUnlike other Stealth(aware) objects, a Flow does not require a name. If a name is given, it must be unique among all Flow names."
          },
          "policy": {
            "type": "string",
            "description": "Identifies the traffic policy for the Flow.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| allowStealth | 1 | Allow only Stealth traffic to the endpoint, and block all clear text traffic. |\n| allowClearText | 2 | Allow only clear text traffic to the endpoint, and block Stealth traffic. |\n| block | 3 | Block all traffic to the endpoint. |\n"
          },
          "providerProfileId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the Profile providing the service through the Flow. This Profile must be one of the Profiles defined in the parent Channel."
          }
        },
        "description": "The Flows that belong to the Channel.",
        "xml": {
          "name": "flow"
        }
      },
      "Flows": {
        "required": [
          "flow"
        ],
        "type": "object",
        "properties": {
          "flow": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Flow"
            }
          }
        },
        "xml": {
          "name": "flows"
        }
      },
      "Group": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "[Description](#section/Validation/Descriptions) supplied by the administrator to inform the reader about the purpose of the group and other helpful information."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IP-Address) assigned to the group by Enterprise Manager.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Group-Names) of the group.\n\nThis field is ignored when updating the group."
          }
        },
        "description": "A group included in this role. There can be any number of groups in a role (including zero).",
        "xml": {
          "name": "group"
        }
      },
      "Groups": {
        "required": [
          "group"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        },
        "xml": {
          "name": "groups"
        }
      },
      "InspectionInfo": {
        "required": [
          "pieServer"
        ],
        "type": "object",
        "properties": {
          "deferred": {
            "type": "boolean",
            "description": "If this value is set to true, the inspection configuration provided in the request is not applied to the endpoint until an [Apply Package Inspection Settings](#operation/deployEndpoint) request is made; if this value set to false, or not set, the configuration is applied immediately.\n\nNo value is provided for this field during a read request."
          },
          "enabled": {
            "type": "boolean",
            "description": "If this value is set to true, the endpoint is monitored; if this value is set to false, the endpoint is not monitored."
          },
          "pieServer": {
            "type": "string",
            "description": "The [IP address](#section/Validation/IP-Address), [host name or fully qualified domain name](#section/Validation/Domain-Names) of the Packet Inspection Enablement Server. The host name or fully qualified domain name must be resolvable using a Domain Name Service (DNS) from the endpoint. All monitored traffic for this endpoint is sent to this server."
          },
          "rate": {
            "$ref": "#/components/schemas/InspectionRate"
          }
        },
        "description": "Data that identifies the packet inspection options. This data will not be present if the endpoint is not being monitored.",
        "xml": {
          "name": "inspectionInfo"
        }
      },
      "InspectionRate": {
        "type": "object",
        "properties": {
          "elapsedTimeMS": {
            "maximum": 3600000,
            "minimum": 1000,
            "type": "integer",
            "description": "The period of time, in milliseconds, between each send of monitored packets to the Packet Inspection Enablement Service.\n\nIf you omit the value or provide a value less than 1, it will be automatically reset to the default value (3600000). If the value is between 1 and 1000, it will be reset to the minimum value (1000). If the value is greater than 3600000, it will be reset to the maximum value (3600000).",
            "format": "int64",
            "default": 3600000
          },
          "kiloBytes": {
            "maximum": 100000,
            "minimum": 1,
            "type": "integer",
            "description": "The number of kilobytes of monitored data that will be gathered before the monitored packets are sent to the Packet Inspection Enablement Service.\n\nIf you omit the value or provide a value less than 1, it will be automatically reset to the default value (60). If the value is greater than 100000, it will be reset to the maximum value (100000).",
            "format": "int32",
            "default": 60
          },
          "packetCount": {
            "maximum": 100000,
            "minimum": 1,
            "type": "integer",
            "description": "The number of monitored data packets that will be gathered before the monitored packets are sent to the Packet Inspection Enablement Service.\n\nIf you omit the value or provide a value less than 1, it will be automatically reset to the default value of 40. If the value is greater than 100000, it will be reset to the maximum value (100000).",
            "format": "int32",
            "default": 40
          }
        },
        "description": "These fields specify how often an endpoint should sent packets to the Packet Inspection Enablement Server.\n\nNote that the first threshold reached for **elapsedTimeMS**, **kiloBytes**, or **packetCount**, causes the monitored packets to be delivered to the Packet Inspection Enablement Server. If the value for all three is set to 1, the monitored packets are delivered immediately.",
        "xml": {
          "name": "inspectionRate"
        }
      },
      "Ldap": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The location of the LDAP server. For example:\n\n`LDAP://ldap.server:3268/DC=mycompany,DC=com`"
          },
          "password": {
            "type": "string",
            "description": "The [password](#section/Validation/Password) for that user account. If a username is provided, a password must be specified.\n\nThe password must be encrypted using the public key of the valid, in-use Management Certificate. The encryption must use PKCS#1. The ciphertext must be in little-endian format. The password must be either Hex or Base64-encoded. This field is never returned in the XML/JSON output; it is only used when creating the Authorization Set.\n\n",
            "writeOnly": true
          },
          "referralChasing": {
            "type": "string",
            "description": "Specifies how referrals are chased when the Authorization Server issues the LDAP query.\n\n| Mnemonic    | Value       | Description                                                                                                                                                       |\n|-------------|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ALL         | All         | Chase referrals of either the subordinate or external type.                                                                                                       |\n| EXTERNAL    | External    | Chase external referrals.                                                                                                                                         |\n| NONE        | None        | Never chase the referred-to server. Setting this option prevents a client from contacting other servers in a referral process.                                    |\n| SUBORDINATE | Subordinate | Chase only subordinate referrals that are a subordinate naming context in a directory tree. The ADSI LDAP provider always turns off this flag for paged searches. |",
            "default": "All",
            "enum": [
              "ALL",
              "EXTERNAL",
              "NONE",
              "SUBORDINATE"
            ],
            "x-desc": "Specifies how referrals are chased when the Authorization Server issues the LDAP query."
          },
          "useSsl": {
            "type": "boolean",
            "description": "Indicates whether the LDAP server uses SSL."
          },
          "username": {
            "type": "string",
            "description": "The [name of a user account](#section/Validation/User-Names) that will be used to connect to the LDAP server.\n\nThis field is required if the authentication scheme is **integratedwindowsauthentication** or **certificate**."
          }
        },
        "description": "Identifies the LDAP settings to use for the Authorization Set.\n\nThis data is required if the **authorizationScheme** is **ldap** or **certificate**, is optional for **integratedwindowsauthentication**, and is not used for **registration**.",
        "xml": {
          "name": "ldap"
        }
      },
      "LdapSettings": {
        "type": "object",
        "properties": {
          "adminUserName": {
            "type": "string",
            "description": "The sAMAccountName (also known as the pre-Windows 2000 logon name) for the Administrator user account created for Enterprise Manager to communicate with the AD server along with the folder name in the following format:\n\n```CN=UserName,CN=FolderName```\n\nFor example, if the Administrator user account on your Active Directory server is named ADAdmin and is in the Users group, enter CN=ADAdmin,CN=Users."
          },
          "allowNonLdapUser": {
            "type": "boolean",
            "description": "True if non-LDAP users are allowed to connect. False if non-LDAP users are not allowed to connect in addition to LDAP users. This field is ignored unless LDAP is enabled."
          },
          "baseDn": {
            "type": "string",
            "description": "The Base Domain Name for the Active Directory domain that includes your users and groups. For example, if your domain is unisys.com, enter `dc=unisys,dc=com`."
          },
          "enabled": {
            "type": "boolean",
            "description": "True if LDAP is enabled, false otherwise. When LDAP is enabled, then the Management Server will:\n\n- Validate Administrative users when they sign in and when they're added to the Administration page against the users defined in the AD server\n- Validate Stealth users and groups against the users and groups defined in the AD server\n\nIf not enabled, only locally defined Administrator users can be created, and only local Administrator users' credentials are used to log in. For Stealth users or groups, no LDAP information is collected and used for allowing users to connect.",
            "readOnly": true
          },
          "groupDn": {
            "type": "string",
            "description": "The Group Domain Name. You can only specify one domain name. If your users are in organizational units, you must specify those organizational units, either in addition to a domain name or in place of a domain name, separated by semicolons.\n\nFor example, if you are using a group domain and it is named Groups, enter `CN=Groups`. However, if you are using organizational units, and your organization units are named Admins and Special Access, you should enter `CN=Groups;OU=Admins;OU=Special Access` or `OU=Admins;OU=Special Access`."
          },
          "host": {
            "type": "string",
            "description": "The [host name](#section/Validation/Domain-Names) or [IP address](#section/Validation/IP-Address) of the Active Directory server."
          },
          "password": {
            "type": "string",
            "description": "The password (in clear text) for the Active Directory server Administrator user account.",
            "writeOnly": true
          },
          "port": {
            "type": "string",
            "description": "The [port number](#section/Validation/Server-Port) to connect to the Active Directory server. The default is 389."
          },
          "searchGroupIdTag": {
            "type": "string",
            "description": "This should always be \"CN\".",
            "readOnly": true
          },
          "searchUserIdTag": {
            "type": "string",
            "description": "This should always be \"CN\".",
            "readOnly": true
          },
          "ssl": {
            "type": "boolean",
            "description": "This indicates if the connection to the LDAP server is secured with SSL or not."
          },
          "userDn": {
            "type": "string",
            "description": "The User Domain Name. You can only specify one domain name. If users are in organizational units, you must specify those organizational units, either in addition to a domain name or in place of a domain name, separated by semicolons.\n\nFor example, if you are using a user domain and it is named Users, enter `CN=Users`. However, if you are using organizational units, and your organization units are named Admins and Special Access, you should enter `CN=Users;OU=Admins;OU=Special Access` or `OU=Admins;OU=Special Access`."
          },
          "userIdTag": {
            "type": "string",
            "description": "This should always be \"sAMAccountName\".",
            "readOnly": true
          }
        },
        "xml": {
          "name": "ldapSettings"
        }
      },
      "License": {
        "required": [
          "providerId",
          "scn"
        ],
        "type": "object",
        "properties": {
          "adminUrl": {
            "type": "string",
            "description": "The License Admin Service URL.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the license."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the license by Enterprise Manager.",
            "readOnly": true
          },
          "licenseKey": {
            "type": "string",
            "description": "A license key used to install a license on the system. Required when updating or installing a license. Ignored when installing an SCN."
          },
          "name": {
            "type": "string",
            "description": "A [name](#section/Validation/Names) assigned to the license. If you do not specify a name in a create license request, the name defaults to \"Setting for &lt;host-id&gt;\"."
          },
          "provider": {
            "type": "string",
            "description": "The host name or fully qualified domain name of the license host (either the Management Server or standalone Authorization Server) that runs the License Service and provides licenses.",
            "readOnly": true
          },
          "providerId": {
            "type": "string",
            "description": "The unique identifier of the [computer system](#tag/Computer-System) (either the Management Server or standalone Authorization Server) that runs the License Service and provides licenses"
          },
          "scn": {
            "type": "string",
            "description": "The System Control Number (SCN) associated with the license."
          },
          "state": {
            "type": "string",
            "description": "| Mnemonic       | Value | Description                                  |\n|----------------|-------|----------------------------------------------|\n| notApplicable  | 0     | No information is available for the license. |\n| none           | 1     | There is no license.                         |\n| installed      | 2     | The license is installed.                    |\n| remote         | 3     | The license is remote.                       |\n| missing        | 4     | The license is missing.                      |\n| lostConnection | 5     | Cannot access the license information.       |",
            "readOnly": true,
            "enum": [
              "notApplicable",
              "none",
              "installed",
              "remote",
              "missing",
              "lostConnection"
            ]
          },
          "status": {
            "type": "array",
            "description": "The status of a specific license.",
            "readOnly": true,
            "xml": {
              "name": "statuses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Status"
            }
          },
          "stealthVersion": {
            "type": "string",
            "description": "The Stealth release version number.",
            "readOnly": true
          },
          "verificationKey": {
            "type": "string",
            "description": "A verification key used to install a license on the system. This value is required when installing or updating a license, and it is ignored when installing an SCN."
          },
          "webUrl": {
            "type": "string",
            "description": "The URL of the Dynamic Licensing Service.",
            "readOnly": true
          }
        },
        "description": "A license on the system.",
        "readOnly": true,
        "xml": {
          "name": "license"
        },
        "x-since": "5.0"
      },
      "Licenses": {
        "required": [
          "license"
        ],
        "type": "object",
        "properties": {
          "license": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          }
        },
        "xml": {
          "name": "licenses"
        }
      },
      "NodeMap": {
        "required": [
          "epsId",
          "id",
          "packageVersion"
        ],
        "type": "object",
        "properties": {
          "epsId": {
            "maxLength": 4,
            "type": "string",
            "description": "The [Endpoint Property Set (EPS)](#tag/Endpoint-Property-Set) identifier that indicates the authorization behavior for the endpoint."
          },
          "id": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "string",
            "description": "The unique identifier assigned to the node map.\n\n_**Note:** This is not a typical unique identifier in that it can only contain digits._"
          },
          "ipAddress": {
            "uniqueItems": true,
            "type": "array",
            "description": "The [IPv4 addresses](#section/Validation/IP-Address) of the endpoint represented by the node map.\n\nThe IPv4 address must be an individual IP address; it cannot be a range or contain a CIDR. The IP addresses must be unique among all the node maps in the Enterprise Manager database.\n\nWhen creating a node map, you must specify a **name** or at least one **IP address**.",
            "xml": {
              "name": "ipAddresses",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "ipAddress"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "The [hostname](#section/Validation/Domain-Names) of the endpoint associated with the node map.\n\nThe hostname must be unique among all the node maps in the Enterprise Manager database.\n\nWhen creating a node map, you must specify a **name** or at least one **IP address**.",
            "format": "hostname"
          },
          "packageVersion": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "The reversion number of the endpoint package installed on the endpoint.",
            "format": "int32"
          }
        },
        "description": "A node map is used to keep track of Endpoint Property Set node membership and versions. The Authorization Servers use this resource to keep track of when endpoint software needs to be updated or when a node's membership changes.",
        "xml": {
          "name": "nodeMap"
        }
      },
      "NodeMaps": {
        "required": [
          "nodeMap"
        ],
        "type": "object",
        "properties": {
          "nodeMap": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeMap"
            }
          }
        },
        "xml": {
          "name": "nodeMaps"
        }
      },
      "OperationalStatus": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The reason for the corresponding operational status value. This might be a text version of the operational status or an alternate description."
          },
          "status": {
            "type": "string",
            "description": "| Mnemonic              | Value | Description                                                                                                                                                          |\n|-----------------------|-------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| unknown               | 0     | The condition of the system is unknown.                                                                                                                              |\n| other                 | 1     | The operational status is other (something not defined in this document). See the corresponding description for more information.                                    |\n| ok                    | 2     | The system is working normally.                                                                                                                                      |\n| degraded              | 3     | The system performance is degraded and might not support the minimum requirements for running the Stealth software. Check other statuses for additional information. |\n| stressed              | 4     | The system does not have sufficient resources (memory, CPU, or disk space) to process the workload properly. Check other statuses for additional information.        |\n| predictFailure        | 5     | The system detects an imminent failure. Check other statuses for additional information.                                                                             |\n| error                 | 6     | The system has detected an internal error. Check other statuses for additional information.                                                                          |\n| nonRecoverableError   | 7     | The system has detected an error from which it cannot recover.                                                                                                       |\n| starting              | 8     | The system is in the process of starting.                                                                                                                            |\n| stopping              | 9     | The system is in the process of stopping.                                                                                                                            |\n| stopped               | 10    | The system is stopped.                                                                                                                                               |\n| inService             | 11    | The system is being serviced.                                                                                                                                        |\n| noContact             | 12    | The system has had no communication from other systems.                                                                                                              |\n| lostCommunication     | 13    | The system cannot be reached by other system.                                                                                                                        |\n| aborted               | 14    | Stealth software on the system has terminated.                                                                                                                       |\n| dormant               | 15    | Stealth software on the system is inactive.                                                                                                                          |\n| supportingEntityError | 16    | A service which supports Stealth on this computer has reported an error.                                                                                             |\n| completed             | 17    | The system has completed its latest operation.                                                                                                                       |\n| power                 | 18    | The system is changing its power state (powering on or off).                                                                                                         |",
            "enum": [
              "unknown",
              "other",
              "ok",
              "degraded",
              "stressed",
              "predictFailure",
              "error",
              "nonRecoverableError",
              "starting",
              "stopping",
              "stopped",
              "inService",
              "noContact",
              "lostCommunication",
              "aborted",
              "dormant",
              "supportingEntityError",
              "completed",
              "power"
            ]
          }
        },
        "description": "A collection of operation statuses of the system. Each instance holds the operational status and its corresponding description.",
        "readOnly": true
      },
      "Profile": {
        "required": [
          "endpointPropertySetId",
          "id",
          "name",
          "policy"
        ],
        "type": "object",
        "properties": {
          "classification": {
            "type": "string",
            "description": "Identifies how the Profile is used.\n\nThis field allows any value; however, the following values are reserved for Profiles for computer systems used in Stealth management:\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| Bootstrap   | Bootstrap                               | Identifies a Profile used by an endpoint that a Stealth administrator uses to access the Stealth Management Server. |\n| EM          | Stealth Management Server               | Identifies a Profile that defines the Enterprise Server.                                                          |\n| Global      | Global                                  | Identifies a global Profile used to isolate endpoints and users.                                                  |\n| SAAS        | Stealth Standalone Authorization Server | Identifies a Profile that defines a standalone Authorization Server.                                              |\n| ServiceMode | Stealth Service Mode                    | Identifies a Profile used by Stealth endpoints in Service Mode.                                                   |",
            "enum": [
              "Bootstrap",
              "EM",
              "Global",
              "SAAS",
              "ServiceMode"
            ],
            "x-desc": "Identifies how the Profile is used.\n\nThis field allows any value; however, the following values are reserved for Profiles for computer systems used in Stealth management:"
          },
          "deploymentId": {
            "type": "string",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) objects affected by the request."
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the Profile."
          },
          "enabled": {
            "type": "boolean",
            "description": "If true, the Nodes in the Profile are Stealth-enabled. If false, only clear text communication can be used by Nodes in the Profile.\n\nThis field is always assumed to be true for a **Global** Profile."
          },
          "endpointPropertySetId": {
            "type": "string",
            "description": "The unique identifier of the [Endpoint Property Set](#tag/Endpoint-Property-Set) related to the Profile. Refer to [Endpoint Property Set](#tag/Endpoint-Property-Set) for a description of valid Endpoint Property Set identifiers.\n\nThis field is ignored if **classification** is not **Global**."
          },
          "groupName": {
            "type": "string",
            "description": "The [name](#section/Validation/Group-Names) of the Active Directory group associated with the Profile. If no value is provided and the Profile is Stealth-enabled, a user account is generated for use with the Profile.\n\nThis field is ignored for a **ServiceMode** or **Global** Profile."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the Profile."
          },
          "ipAddress": {
            "type": "array",
            "description": "A collection of [IPv4 addresses](#section/Validation/IP-Address) for the Nodes in the Profile. A maximum of 1000 IP addresses is allowed.\n\nThis field is ignored for a **ServiceMode** or **Global** Profile.",
            "xml": {
              "name": "ipAddresses",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "description": "A collection of [IPv4 addresses](#section/Validation/IP-Address) for the Nodes in the Profile. A maximum of 1000 IP addresses is allowed.\n\nThis field is ignored for a **ServiceMode** or **Global** Profile.",
              "xml": {
                "name": "ipAddress"
              }
            }
          },
          "name": {
            "maxLength": 45,
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the Profile.\n\nThe name must be unique among all Profile names."
          },
          "policy": {
            "type": "string",
            "description": "The default policy on the traffic to or from the endpoints in the Profile. The policy defines COIs, allow filters, and deny filters according to the **enforcement** level selected for the Channels that link the Profile.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| allowStealth | 1 | Allow only Stealth traffic to the endpoint, and block all clear text traffic. |\n| allowClearText | 2 | Allow only clear text traffic to the endpoint, and block Stealth traffic. |\n| block | 3 | Block all traffic to the endpoint. |\n"
          },
          "serviceProfile": {
            "$ref": "#/components/schemas/ServiceProfile"
          },
          "updateQueueLimit": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum number of concurrent endpoint package downloads allowed from the Authorization Service to the endpoints.\n\nThis field is ignored if **classification** is not **Stealth Standalone Authorization Server**.\n\nThe value must be positive; a negative value changes to 0.",
            "format": "int32",
            "default": 4
          }
        },
        "description": "The Profiles that are part of the Solution. A maximum of 100 Profiles is allowed.\n\nTo reference an existing Profile during a load request, provide only the Profile's **id** field. If you provide a complete Profile (at least the **id** and **name** fields), and if the **id** references an existing Profile, it updates with the data provided. If there is no Profile with that **id**, then one is created. You can mix and match complete Profiles and references to existing Profiles.\n\nYou must provide all Profiles for the Solution during a load request. If the Solution already exists, any Profiles that are part of the existing Solution that are not provided during the load request are deleted.",
        "xml": {
          "name": "profile"
        }
      },
      "ProfileInformation": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "direction": {
            "type": "string",
            "description": "Identifies the inbound and outbound Stealth tunnel establishment.\n\nYou cannot set both Profiles to **Accept** or **Initiate**.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| Default  | 0     | Enables the Stealth workgroup COI to both initiate outbound tunnels and accept inbound tunnels.                                                            |\n| Initiate | 16201 | Restricts the Stealth workgroup COI to initiate outbound Stealth tunnels. Once a tunnel is established, communication can flow in either direction.      |\n| Accept   | 16202 | Restricts the Stealth workgroup COI to accept inbound Stealth tunnel requests. Once a tunnel is established, communication can flow in either direction. |",
            "default": "Default",
            "enum": [
              "Default",
              "Initiate",
              "Accept"
            ],
            "x-desc": "Identifies the inbound and outbound Stealth tunnel establishment.\n\nYou cannot set both Profiles to **Accept** or **Initiate**."
          },
          "enforcement": {
            "type": "string",
            "description": "Defines the filters to be used for the traffic in the Channel.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| unknown | 0 | The enforcement behavior is inherited from the owning Environment. |\n| ipAddresses | 1 | Filters are generated to enforce IP address policies. |\n| ports | 2 | Filters are generated to enforce port policies. |\n| ipAddressesAndPorts | 3 | Filters are generated to enforce IP address policies and local port policies. |\n| providerPortsAndConsumerAddresses | 5 | Filters are generated to enforce local port policies on the providing services and IP address policies on the consuming Profiles. |\n",
            "default": "unknown"
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the Profile."
          },
          "order": {
            "minimum": 0,
            "type": "integer",
            "description": "Defines the relative priority of the Channel.\n\nNegative values are treated as zero. Smaller values are ordered higher than larger values, and zero indicates unordered. The values for the Channels in a Solution need not be consecutive, and duplicate values imply the same priority. For example, order values of 1, 0, 10, 8, 17, 10, 0, 6 result in an ordering of 1, 6, 8, 10, 10, 17, 0, 0.",
            "format": "int32"
          }
        },
        "description": "Information about the Profile at one end of the Channel.\n\nInternal Channels, where a Profile is linked to itself, only have information about the primary Profile. External Channels, where two Profiles are linked to each other, have information about the primary and secondary Profiles.",
        "xml": {
          "name": "orderedChannel"
        },
        "x-since": "5.0"
      },
      "Profiles": {
        "required": [
          "profile"
        ],
        "type": "object",
        "properties": {
          "profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Profile"
            }
          }
        },
        "xml": {
          "name": "profiles"
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "array",
            "description": "A collection of Channels. This is mainly intended for Channels that link Profiles in different Solutions but can be used for all Channels.",
            "items": {
              "$ref": "#/components/schemas/Channel"
            }
          },
          "endpointPropertySet": {
            "type": "array",
            "description": "A collection of Endpoint Property Sets.",
            "items": {
              "$ref": "#/components/schemas/EndpointPropertySet"
            }
          },
          "environment": {
            "type": "array",
            "description": "A collection of Environments.",
            "items": {
              "$ref": "#/components/schemas/Environment"
            }
          },
          "flow": {
            "type": "array",
            "description": "A collection of Flows. This is mainly intended for Flows that do not belong to any of the Channels in the Project.",
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/Flow"
            }
          },
          "profile": {
            "type": "array",
            "description": "A collection of Profiles. This is mainly intended for Profiles that do not belong to any of the Solutions in the Project but can be used for all Profiles.",
            "items": {
              "$ref": "#/components/schemas/Profile"
            }
          },
          "solution": {
            "type": "array",
            "description": "A collection of Solutions.",
            "items": {
              "$ref": "#/components/schemas/Solution"
            }
          }
        },
        "xml": {
          "name": "project"
        }
      },
      "Qualifier": {
        "required": [
          "filter",
          "isProtocolQualifier",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the qualifier."
          },
          "filter": {
            "type": "array",
            "description": "A list of one or more qualifier filters.\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "filters",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/QualifierFilter"
            },
            "x-ordered": "qualifier filters"
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the qualifier by Enterprise Manager.\n\nThe unique identifier is ignored for the primary resource during a create request; that is, when the create request is for a qualifier. Refer to the [Create Filter](#operation/createFilter) request for a description of how the unique identifier is used for secondary resources (that is, for qualifiers contained within a filter list during a filter list or filter set create request)."
          },
          "isProtocolQualifier": {
            "type": "boolean",
            "description": "If true, all filters are protocol/port filters. If false or not present, all filters are IP address filters.\n\nThis field is ignored during an update request. The value of this field cannot be changed during an update."
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the qualifier."
          }
        },
        "description": "A filter list defines a group of IP addresses. This group of addresses may be used to allow or restrict traffic. A filter list may contain other filter lists as subcomponents. The filter list may be further defined by filter qualifiers. A qualifier may restrict the filter to a set of ports, and it may control messages that are allowed from a port on a remote system, or to a local port. A qualifier may also further subdivide the list of addresses.",
        "xml": {
          "name": "qualifier"
        },
        "x-ordered": "qualifiers"
      },
      "QualifierFilter": {
        "required": [
          "qualifierId"
        ],
        "type": "object",
        "properties": {
          "exceptPort": {
            "type": "array",
            "description": "The except ports apply exceptions to the local and remote ports defined for the qualifier filter. This tag is valid only if **localPort** or **remotePort** contains a port range.\n\nEach **remotePort** identifies a pair of ports that are exceptions to the declared local and remote port ranges. Consider the following example:\n\n```xml\n <localPort>9000-9999</localPort>\n <remotePort>*</remotePort>\n <exceptPorts>\n   <exceptPort>\n     <localPort>9100</localPort>\n     <remotePort>32000-65535</remotePort>\n   </exceptPort>\n   <exceptPort>\n     <localPort>9200</localPort>\n   </exceptPort>\n   <exceptPort>\n     <remotePort>1024-31999</remotePort>\n   </exceptPort>\n </exceptPorts>\n```\n\nThe first two lines mean that local ports 9000 through 9999 will accept connections from any remote port.\n\nThe first except port means that for local port 9100, any connections from remote ports 32000 through 65535 will not be accepted. However, that port will accept connections from remote ports that are less than 32000.\n\nThe second except port means that local port 9200 will not accept connections from any remote port. This is the same as defining two filters: one with local ports 9000-9199 and the other with local ports 9201-9999.\n\nThe third except port means that local ports 9000 through 9999 will not accept any connections from remote ports 1024 through 319999.",
            "xml": {
              "name": "exceptPorts",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/ExceptPort"
            },
            "x-since": "3.3"
          },
          "exclude": {
            "type": "boolean",
            "description": "Indicates whether the protocols in **protocol** are excluded (true) or included (false) by the parent qualifier."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the qualifier filter by Enterprise Manager.",
            "format": "uuid"
          },
          "ipAddress": {
            "type": "string",
            "description": "The [IP address](#section/Validation/IP-Address) that is allowed by the parent qualifier.\n\n During a create or update request, if an IP address is specified, all other protocol fields are ignored."
          },
          "localPort": {
            "type": "string",
            "description": "The local [port](#section/Validation/Server-Port) used to filter inbound traffic. During a create request, this tag is required only if **exclude** is false and **protocol** value is TCP or UDP."
          },
          "protocol": {
            "type": "string",
            "description": "The [protocol](#section/Validation/Network-Protocol) defined for the parent qualifier.\n\n If **exclude** is true, you can specify only a single protocol.\n\n If **exclude** is false, you can specify a single protocol value, a range of protocols (separated by a hyphen), or a comma-separated list of protocol values or ranges."
          },
          "qualifierId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the [qualifier](#tag/Qualifier) that owns this qualifier filter.\n\nIf you are creating the resource directly using a [Create Qualifier Filter](#operation/createQualifierFilter) request, you must specify a value for this tag. If you are creating the resource as part of a [Create Qualifier](#operation/createQualifier) request, this tag is ignored because the unique identifier of the created qualifier is assumed. This field is also ignored during an update request, meaning that you cannot change which qualifier owns this qualifier filter.",
            "format": "uuid"
          },
          "remotePort": {
            "type": "string",
            "description": "The remote [port](#section/Validation/Server-Port) used to filter outbound traffic. During a create request, this tag is required only if **exclude** is false and **protocol** value is TCP or UDP."
          }
        },
        "description": "Filter qualifiers are used to identify either protocol/port combinations that are allowed (or not allowed), or IP address ranges that are allowed.",
        "xml": {
          "name": "qualifierFilter"
        },
        "x-ordered": "qualifier filters"
      },
      "QualifierFilters": {
        "required": [
          "qualifierFilter"
        ],
        "type": "object",
        "properties": {
          "qualifierFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QualifierFilter"
            }
          }
        },
        "xml": {
          "name": "qualifierFilters"
        }
      },
      "Qualifiers": {
        "required": [
          "qualifier"
        ],
        "type": "object",
        "properties": {
          "qualifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Qualifier"
            }
          }
        },
        "xml": {
          "name": "qualifiers"
        }
      },
      "RequestStatus": {
        "type": "object",
        "properties": {
          "createdResource": {
            "type": "array",
            "description": "If the request was to create a resource, then this is a list of information about the created resources. This field is used during create requests and in some update requests that require new resources to be created. This field is unused for all other requests.\n\nInformation about one of the created resources. The first entry in the list usually pertains to the primary resource. However, if a resource is created during an update, that resource might not be the primary resource.",
            "xml": {
              "name": "createdResources",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/CreatedResource"
            }
          },
          "deploymentId": {
            "type": "string",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) objects affected by the request."
          },
          "description": {
            "type": "string",
            "description": "A [description](#section/Validation/Descriptions) of the asynchronous request."
          },
          "finishedAt": {
            "type": "string",
            "description": "The [time](#section/Validation/Date-and-Time) when the asynchronous request either completed successfully or stopped due to an error. This field is not set while there are tasks still to perform.\n\nThe script can use this field as a flag to identify when the request has stopped processing, as setting this field is the last thing done while processing a background task.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "A UUID that uniquely identifies this request status.",
            "format": "uuid"
          },
          "message": {
            "type": "array",
            "description": "A collection of progress messages for the tasks that make up the request.\n\nA progress message that describes the progress of a task.",
            "xml": {
              "name": "messages",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/RequestStatusMessage"
            }
          },
          "progress": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The percentage complete of the request, from 0 to 100 percent. If the request encounters an error, the final progress is typically less than 100.",
            "format": "int32"
          },
          "scheduledAt": {
            "type": "string",
            "description": "The [time](#section/Validation/Date-and-Time) when the asynchronous request is scheduled for execution.",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "description": "The [time](#section/Validation/Date-and-Time) when the asynchronous request was made.",
            "format": "date-time"
          },
          "state": {
            "type": "string",
            "description": "| Mnemonic | Value | Description |\n|------------|------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| error      | error      | The request was halted due to an error that prevent any further tasks from being attempted, or the request failed for the primary resource.              |\n| finished   | finished   | The request ran to completion with all tasks completing successfully.                                                                                    |\n| incomplete | incomplete | The request ran to completion, however, one of more tasks were not successful and raised warnings. This final state occurs if the tasks are independent. |\n| running    | running    | The request is still being processed.                                                                                                                    |\n| waiting    | waiting    | The request has been placed into the queue and has not yet been started.                                                                                 |\n| scheduled  | scheduled  | The request is scheduled to run at some time in the future. The request is not placed into the run queue until the scheduled time. |",
            "enum": [
              "waiting",
              "running",
              "finished",
              "incomplete",
              "error",
              "scheduled"
            ]
          },
          "taskCount": {
            "minimum": 0,
            "type": "integer",
            "description": " The expected number of tasks that will be performed to complete the request.",
            "format": "int32"
          },
          "uri": {
            "type": "string",
            "description": "The full URI that can be used to get this request status.",
            "format": "uri"
          },
          "warningDetected": {
            "type": "boolean",
            "description": "This is set to true if a task terminates with a warning message."
          }
        },
        "description": "The request status is used to provide status information about an asynchronous request.",
        "xml": {
          "name": "requestStatus"
        }
      },
      "RequestStatusMessage": {
        "type": "object",
        "properties": {
          "key": {
            "type": "integer",
            "description": "The key used to build the message.",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "The text of this message."
          },
          "timestamp": {
            "type": "string",
            "description": "The [time](#section/Validation/Date-and-Time) when this message was generated.",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "| Mnemonic   | Value      | Description                                                                                                                                                                                                                                                                                                                                                                                    |\r\n|------------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| checkpoint | checkpoint | Indicates that this message is a checkpoint or informational message generated during the processing of a task.                                                                                                                                                                                                                                                                                |\n| end        | end        | Indicates that this message is for the successful completion of a task.                                                                                                                                                                                                                                                                                                                        |\n| error      | error      | Indicates that this message is for an issue that was encountered during the processing of a task that prevents the task from completing. The text of the message identifies the error. The request stops at this point, no further tasks are run.                                                                                                                                              |\n| start      | start      | Indicates that this message is for the start of a task.                                                                                                                                                                                                                                                                                                                                        |\n| warning    | warning    | Indicates that this message is for a problem that was encountered during the processing of a task that prevents the task from completing. The text of the message identifies the problem encountered by this task. While the task might not have completed successfully, the rest of the tasks for the request are still attempted. There might be several warning messages for a single task. |",
            "enum": [
              "start",
              "end",
              "checkpoint",
              "warning",
              "error"
            ]
          }
        },
        "description": "A collection of progress messages for the tasks that make up the request.\n\nA progress message that describes the progress of a task.",
        "xml": {
          "name": "requestStatusMessage"
        }
      },
      "RequestStatuses": {
        "required": [
          "requestStatus"
        ],
        "type": "object",
        "properties": {
          "requestStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestStatus"
            }
          }
        },
        "xml": {
          "name": "requestStatuses"
        }
      },
      "Resource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the resource."
          },
          "requestCount": {
            "type": "integer",
            "description": "The number of requests made to the resource since the last time the EcoAPI was started.",
            "format": "int32"
          }
        },
        "description": "A list of EcoAPI resources that have been accessed since the last time the EcoAPI was started, along with the total number of requests made to each of them.",
        "xml": {
          "name": "resource"
        }
      },
      "Role": {
        "required": [
          "configurationId",
          "name"
        ],
        "type": "object",
        "properties": {
          "accounts": {
            "$ref": "#/components/schemas/Accounts"
          },
          "authorizationService": {
            "type": "array",
            "description": "A list of all Authorization Services that identify the Authorization Groups used by the global isolation role.\n\nThis list applies only to global isolation roles.\n\nFor create and update requests, only the unique identifier is used; all other fields are ignored.\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "authorizationServices",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Service"
            },
            "x-ordered": "Authorization Services",
            "x-since": "5.0"
          },
          "coi": {
            "type": "array",
            "description": "The collection of [COIs](#tag/COI) assigned to the role.\n\nThis list is maintained in the order in which it is entered.",
            "xml": {
              "name": "cois",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Coi"
            },
            "x-ordered": "COIs"
          },
          "configurationId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the configuration that owns this role.\n\nIf you are creating the resource directly using a [Create Role](#operation/createRole) request, you must specify a value for this tag. If you are creating the resource as part of a [Create Configuration](#operation/createConfiguration) request, this tag is ignored because  the unique identifier of the created configuration is assumed. This field is also ignored during an update request; that is, you cannot change which configuration a role belongs to."
          },
          "description": {
            "type": "string",
            "description": "A [description](#section/Validation/Descriptions) of the role as provided by the user."
          },
          "endpoint": {
            "type": "array",
            "description": "A collection of isolated endpoints. This information is available only for a global isolation role.\n\nTo isolate endpoints (and add them to a global isolation role), use the [Isolate Users or Endpoints](#operation/isolateRole) request. To remove endpoints from isolation, use the [Unisolate Users or Endpoints](#operation/unisolateRole) request.\n\nAn endpoint that has been isolated in this global isolation role. There can be any number of endpoints in a global isolation role (including zero).",
            "xml": {
              "name": "endpoints",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            },
            "x-since": "4.0.1"
          },
          "filterSet": {
            "$ref": "#/components/schemas/FilterSet"
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the role by Enterprise Manager.",
            "readOnly": true
          },
          "isService": {
            "type": "boolean",
            "description": "Use **type** instead.",
            "deprecated": true
          },
          "name": {
            "maxLength": 256,
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the role.\n\nThis field is not required when updating a role.\n\nOnce a global isolation role is provisioned, the name is ignored during an update request; the name cannot be changed after provisioning."
          },
          "provisioned": {
            "type": "boolean",
            "description": "Indicates if the role has been provisioned.\n\nThis field applies only to global isolation roles.",
            "readOnly": true,
            "x-since": "4.0.1"
          },
          "type": {
            "type": "string",
            "description": "Identifies how this role is used.\n\nIf this value is not specified during a create request, and if the parent configuration is a global configuration, then the value **global** is assumed. Otherwise, the value **workgroup** is assumed.\n\nThis field is ignored during an update request; you cannot change the role's type after it has been created.\n\n| Mnemonic  | Value     | Description                                                                                     |\r\n|-----------|-----------|-------------------------------------------------------------------------------------------------|\n| GLOBAL    | Global    | Identifies a global role used to isolate endpoints and users.                                   |\n| SERVICE   | Service   | Identifies a service role used by endpoints in service mode to access an Authorization Service. |\n| WORKGROUP | WorkGroup | Identifies a work group role used by endpoints during normal operation.                         |",
            "enum": [
              "GLOBAL",
              "SERVICE",
              "WORKGROUP"
            ],
            "x-desc": "Identifies how this role is used.\n\nIf this value is not specified during a create request, and if the parent configuration is a global configuration, then the value **global** is assumed. Otherwise, the value **workgroup** is assumed.\n\nThis field is ignored during an update request; you cannot change the role's type after it has been created.",
            "x-since": "4.0.1"
          }
        },
        "xml": {
          "name": "role"
        }
      },
      "Roles": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        },
        "xml": {
          "name": "roles"
        }
      },
      "Service": {
        "required": [
          "computerSystemId",
          "uri"
        ],
        "type": "object",
        "properties": {
          "authenticationScheme": {
            "type": "string",
            "description": "For an __Auth Web__ service, identifies the authentication scheme supported by the Authorization Group related to this instance.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| CERTIFICATE  | certificate                     | Authentication is based on certificates.                       |\n| IWA          | integratedwindowsauthentication | Authentication is based on the local Windows accounts.         |\n| LDAP         | ldap                            | Authentication is based on the accounts defined in an LDAP server. |\n| REGISTRATION | registration                    | This authentication information is used to register endpoints. |",
            "enum": [
              "CERTIFICATE",
              "IWA",
              "LDAP",
              "REGISTRATION"
            ],
            "x-desc": "For an __Auth Web__ service, identifies the authentication scheme supported by the Authorization Group related to this instance.",
            "x-since": "5.0"
          },
          "authorizationGroup": {
            "type": "string",
            "description": "For an __Auth Web__ service, identifies the name of the Authorization Group related to this instance.",
            "x-since": "5.0"
          },
          "computerSystemId": {
            "type": "string",
            "description": "The unique identifier of the [computer system](#tag/Computer-System) running the service. The value is either the [host name](#section/Validation/Domain-Names) or [IP Address](#section/Validation/IP-Address) of the system."
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the service."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the service by Enterprise Manager."
          },
          "installDate": {
            "type": "string",
            "description": "The [date](#section/Validation/Date-and-Time) when the service was installed on the computer system.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the service."
          },
          "stealthReleaseLevel": {
            "type": "string",
            "description": "The version of Stealth that is installed on the computer system running the service.",
            "x-since": "4.0"
          },
          "uri": {
            "type": "string",
            "description": "The full URI used to access the service.\n\nWhen creating a **License Admin** service, this value must be specified in the form of [host](#section/Validation/Domain-Names):[port](#section/Validation/Server-Port). The host must be a hostname or the fully-qualified domain name of a host.\n\nA value of \"None\" for a **License Admin** service indicates this license provider does not have an SCN installed."
          },
          "usage": {
            "type": "string",
            "description": "Text that identifies the service usage.\n\n\n\n| Mnemonic       | Value          | Description                                          |\n|----------------|----------------|------------------------------------------------------|\n| AUTH_ADMIN     | Auth Admin     | The authorization service for an administration URL. |\n| AUTH_WEB       | Auth Web       | The authorization service for an AuthGroup.          |\n| LICENSE_ADMIN  | License Admin  | The license provider service.                        |\n| LICENSE_WEB    | License Web    | The dynamic license service.                         |\n| MANAGEMENT_WEB | Management Web | The Management service.                              |\n| MONITOR_WEB    | Monitor Web    | The monitoring service.                              |\n| VPN_ADMIN      | VPN Admin      | The VPN Admin service.                               |",
            "readOnly": true,
            "enum": [
              "AUTH_WEB",
              "AUTH_ADMIN",
              "LICENSE_WEB",
              "LICENSE_ADMIN",
              "MONITOR_WEB",
              "MANAGEMENT_WEB",
              "VPN_ADMIN"
            ],
            "x-desc": "Text that identifies the service usage.\n\n"
          }
        },
        "description": "A service is an Authorization Service or License Service that attaches to a configuration so that endpoints can be authorized or licensed.",
        "xml": {
          "name": "service"
        },
        "x-ordered": "Authorization Services",
        "x-since": "5.0"
      },
      "ServiceProfile": {
        "type": "object",
        "properties": {
          "packageVersion": {
            "type": "string",
            "description": "The version of the endpoint package distributed to the endpoints. This version also appears as part of the endpoint package filename."
          }
        },
        "description": "These values are used to create a service Profile.\n\nThese values are ignored if **classification** is not **Stealth Service Mode**.",
        "xml": {
          "name": "serviceProfile"
        }
      },
      "Services": {
        "required": [
          "service"
        ],
        "type": "object",
        "properties": {
          "service": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        },
        "xml": {
          "name": "services"
        }
      },
      "Session": {
        "type": "object",
        "properties": {
          "authGroupName": {
            "type": "string",
            "description": "The [name](#section/Validation/Group-Names) of the AuthGroup used to authorize the user logged in to the endpoint."
          },
          "authServerId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the system on which the Authorization Service (either the Management Server or a standalone Authorization Server) that authorized the current endpoint session is running. You can use this identifier to get information about the system using [Get Computer System](#operation/getComputerSystemById)"
          },
          "coiName": {
            "type": "array",
            "description": "A collection of one or more COI [names](#section/Validation/Names).\n\nThe name of a COI that the endpoint is using for communication.",
            "xml": {
              "name": "coiNames",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "description": "A collection of one or more COI [names](#section/Validation/Names).\n\nThe name of a COI that the endpoint is using for communication.",
              "xml": {
                "name": "coiName"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "description": "The  [date and time](#section/Validation/Date-and-Time) that the session information was generated by the Authorization Service.",
            "format": "date-time",
            "readOnly": true
          },
          "diagnosticRecordNumber": {
            "type": "string",
            "description": "The number assigned to the diagnostic service record for the endpoint session."
          },
          "domainUser": {
            "type": "string",
            "description": "The name of the user account that is logged into the endpoint. For a server endpoint, this is the user account that the Unisys Stealth Logon service is configured to run under."
          },
          "endPointId": {
            "type": "string",
            "description": "The IP address or host name of the endpoint communicating with the Authorization Service."
          },
          "endPointSoftwareLevel": {
            "type": "string",
            "description": "The version of the Stealth software installed on the endpoint."
          },
          "expiresAt": {
            "type": "string",
            "description": "The [date and time](#section/Validation/Date-and-Time) that the session information expires.",
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to this session by Enterprise Manager. The identifier is valid only for the current session with the endpoint; if the session is reset, it is issued a new unique identifier."
          },
          "ipAddress": {
            "type": "string",
            "description": "The [IP address](#section/Validation/IP-Address) of the endpoint. This is a single IP address."
          },
          "keepAliveTimer": {
            "type": "integer",
            "description": "The number of milliseconds since the last keep-alive message was received by the Authorization Service.",
            "format": "int64",
            "x-since": "4.0.027"
          },
          "licenseType": {
            "type": "string",
            "description": "The type of license provided by the Authorization Service based on the type of endpoint.\n\n| Mnemonic       | Value          | Description                                                                                                                                                                                                                                                                                                                                           |\n|----------------|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| awsMarketplace | AWSMarketplace | For Stealth(cloud) for AWS, licenses for endpoints that are deployed in AWS.                                                                                                                                                                                                                                                                          |\n| client         | Client         | Licenses for endpoints that use client operating systems.                                                                                                                                                                                                                                                                                             |\n| mobile         | Mobile         | Licenses for remote users using Secure Remote Access (SRA) clients.                                                                                                                                                                                                                                                                                   |\n| server         | Server         | Licenses for endpoints that use server operating systems.                                                                                                                                                                                                                                                                                             |\n| sraGateway     | SRA Gateway    | For environments that include the SRA Gateway, the license for the SRA Gateway. This license is an administrative license and is used to establish a session from the SRA Gateway to the Authorization Service. This license type is built into the solution; it is not orderable, and no configuration is required.                                  |\n| svGateway      | SV Gateway     | For environments that include the Secure Virtual Gateway, the license for the Secure Virtual Gateway. This license is an administrative license and is used to establish a session from the Secure Virtual Gateway to the Authorization Service. This license type is built into the solution; it is not orderable, and no configuration is required. |\n| vgd            | VGD            | Virtual Gateway Device licenses for Clear Text endpoints that use the Secure Virtual Gateway.                                                                                                                                                                                                                                                         |",
            "enum": [
              "client",
              "server",
              "sraGateway",
              "mobile",
              "svGateway",
              "vgd",
              "awsMarketplace"
            ],
            "x-desc": "The type of license provided by the Authorization Service based on the type of endpoint."
          },
          "osArchitecture": {
            "type": "string",
            "description": "Identifies whether the operating system uses 32-bit, 64-bit, or some other architecture on the endpoint."
          },
          "osVersion": {
            "type": "string",
            "description": "The operating system version running on the endpoint."
          },
          "packageId": {
            "type": "string",
            "description": "The identifier of the endpoint software package that established the session."
          },
          "packageName": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the endpoint package."
          },
          "packageVersion": {
            "type": "integer",
            "description": "The revision level of the endpoint software package that established the session.",
            "format": "int32"
          },
          "roleName": {
            "type": "array",
            "description": " A collection of one or more roles associated with the session.\n\nThe configuration and role associated with the session. The format is *{configuration-name}*:*{role-name}*.",
            "xml": {
              "name": "roleNames",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "description": " A collection of one or more roles associated with the session.\n\nThe configuration and role associated with the session. The format is *{configuration-name}*:*{role-name}*.",
              "xml": {
                "name": "roleName"
              }
            }
          }
        },
        "xml": {
          "name": "session"
        }
      },
      "Sessions": {
        "required": [
          "session"
        ],
        "type": "object",
        "properties": {
          "nextUri": {
            "type": "string"
          },
          "session": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Session"
            }
          }
        },
        "xml": {
          "name": "sessions"
        }
      },
      "Settings": {
        "type": "object",
        "properties": {
          "dl": {
            "type": "object",
            "description": "See [Get Settings](#operation/getSettings) for a description of the response."
          }
        },
        "xml": {
          "name": "xml"
        }
      },
      "Solution": {
        "required": [
          "environmentId",
          "id",
          "name",
          "profile"
        ],
        "type": "object",
        "properties": {
          "authorization": {
            "type": "array",
            "description": "The Authorization Sets used to provision the Solution.\n\nFor a load request, only the Authorization Set **id** field is required; all other Authorization fields are ignored.\n\nThis field is required for a Solution of **type** **User** but ignored otherwise. You can specify up to 100 Authorization Sets.",
            "xml": {
              "name": "authorizations",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Authorization"
            }
          },
          "channel": {
            "type": "array",
            "description": "The Channels that are part of the Solution.\n\nDuring a load request, you must provide only the new Channels being defined. If the load request updates an existing Solution, all Channels that were previously defined for the Profiles that are still in the Solution are retained. Thus, only new Channels for existing Profiles and Channels used by new Profiles need to be defined.",
            "xml": {
              "name": "channels",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Channel"
            }
          },
          "deploymentId": {
            "type": "string",
            "description": "An [identifier](#section/Validation/IDs) used to relate the request with all Stealth(aware) objects affected by the request."
          },
          "description": {
            "type": "string",
            "description": "The [description](#section/Validation/Descriptions) of the Solution."
          },
          "environmentId": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) of the Environment that owns the Solution."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the Solution."
          },
          "name": {
            "type": "string",
            "description": "The [name](#section/Validation/Names) of the Solution.\n\nThe name must be unique among all Solution names."
          },
          "profile": {
            "type": "array",
            "description": "The Profiles that are part of the Solution. A maximum of 100 Profiles is allowed.\n\nTo reference an existing Profile during a load request, provide only the Profile's **id** field. If you provide a complete Profile (at least the **id** and **name** fields), and if the **id** references an existing Profile, it updates with the data provided. If there is no Profile with that **id**, then one is created. You can mix and match complete Profiles and references to existing Profiles.\n\nYou must provide all Profiles for the Solution during a load request. If the Solution already exists, any Profiles that are part of the existing Solution that are not provided during the load request are deleted.",
            "xml": {
              "name": "profiles",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Profile"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of Solution.\n\n| Mnemonic | Value | Description |\n|---------------|-----------------|------------ |\n| GLOBAL   | Global | Identifies a global Solution used to isolate endpoints and users. There can be at most one global Solution. The Solution can only contain Profiles with classification of \"Global\". |\n| SM       | SM     | Identifies a Stealth Management Solution used to identify the Stealth services and computer systems running them. The Solution can only contain Profiles with classification of \"EM\", \"SAAS\", \"ServiceMode\" or \"AdminWrkst\". |\n| USER     | User   | Identifies a user Solution. This Solution type cannot have any of the Profile classifications specified for the Stealth Management Solution.                                                                                         |",
            "default": "User",
            "enum": [
              "GLOBAL",
              "SM",
              "USER"
            ],
            "x-desc": "The type of Solution."
          }
        },
        "xml": {
          "name": "solution"
        }
      },
      "Solutions": {
        "required": [
          "solution"
        ],
        "type": "object",
        "properties": {
          "solution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Solution"
            }
          }
        },
        "xml": {
          "name": "solutions"
        }
      },
      "Status": {
        "type": "object",
        "properties": {
          "available": {
            "type": "integer",
            "description": "The number of licenses that are currently available (not in use) to the local Authorization Service.",
            "format": "int32",
            "readOnly": true
          },
          "inUse": {
            "type": "integer",
            "description": "The number of licenses that has been requested by the local Authorization Service.",
            "format": "int32",
            "readOnly": true
          },
          "max": {
            "type": "integer",
            "description": "The maximum number of licenses that are available (that is, both in use and available) to the local Authorization Service.",
            "format": "int32",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "| Mnemonic | Value | Description                                  |\n|----------|-------|----------------------------------------------|\n| unknown  | 0     | No information is available for the license. |\n| ok       | 1     | License is functional                        |\n| degraded | 2     | License is degraded.                         |\n| error    | 3     | There is a problem with the license.         |",
            "readOnly": true,
            "enum": [
              "unknown",
              "ok",
              "degraded",
              "error"
            ]
          },
          "totalAvailable": {
            "type": "integer",
            "description": "If the license file is installed on this server, the number of licenses currently available (not in use) for all Authorization Services. If the license file is installed on a different server, this value is not applicable and is displayed as -.",
            "format": "int32",
            "readOnly": true
          },
          "totalInUse": {
            "type": "integer",
            "description": "If the license file is installed on this server, the number of licenses that has been requested by all Authorization Services. If the license file is installed on a different server, this value is not applicable and is displayed as -.",
            "format": "int32",
            "readOnly": true
          },
          "totalMax": {
            "type": "integer",
            "description": "If the license file is installed on this server, the maximum number of licenses that is available (that is, both in use and available) for all Authorization Services. If the license file is installed on a different server, this value is not applicable and is displayed as -.",
            "format": "int32",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "| Mnemonic       | Value          | Description                                                                                                                                                                                                                                                                                                                                           |\n|----------------|----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| awsMarketplace | AWSMarketplace | For Stealth(cloud) for AWS, licenses for endpoints that are deployed in AWS.                                                                                                                                                                                                                                                                          |\n| client         | Client         | Licenses for endpoints that use client operating systems.                                                                                                                                                                                                                                                                                             |\n| mobile         | Mobile         | Licenses for remote users using Secure Remote Access (SRA) clients.                                                                                                                                                                                                                                                                                   |\n| server         | Server         | Licenses for endpoints that use server operating systems.                                                                                                                                                                                                                                                                                             |\n| sraGateway     | SRA Gateway    | For environments that include the SRA Gateway, the license for the SRA Gateway. This license is an administrative license and is used to establish a session from the SRA Gateway to the Authorization Service. This license type is built into the solution; it is not orderable, and no configuration is required.                                  |\n| svGateway      | SV Gateway     | For environments that include the Secure Virtual Gateway, the license for the Secure Virtual Gateway. This license is an administrative license and is used to establish a session from the Secure Virtual Gateway to the Authorization Service. This license type is built into the solution; it is not orderable, and no configuration is required. |\n| vgd            | VGD            | Virtual Gateway Device licenses for Clear Text endpoints that use the Secure Virtual Gateway.                                                                                                                                                                                                                                                         |",
            "readOnly": true,
            "enum": [
              "client",
              "server",
              "sraGateway",
              "mobile",
              "svGateway",
              "vgd",
              "awsMarketplace"
            ]
          }
        },
        "description": "The status of a specific license.",
        "readOnly": true,
        "xml": {
          "name": "licenseStatus"
        }
      },
      "String": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The string value that was returned in response to the request. Refer to the request for details regarding the value."
          }
        },
        "xml": {
          "name": "string"
        }
      },
      "User": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A [description](#section/Validation/Descriptions) of the user."
          },
          "displayName": {
            "type": "string",
            "description": "The display [name](#section/Validation/Names) for a user. This is usually the combination of the user's first name, middle initial, and last name. This value must be unique.\n\nThis field will default to the **name** value if not specified. This field is ignored when updating a user."
          },
          "id": {
            "type": "string",
            "description": "The [unique identifier](#section/Validation/IDs) assigned to the user by Enterprise Manager.",
            "readOnly": true
          },
          "isLocal": {
            "type": "boolean",
            "description": "Indicates whether the user is registered in the Enterprise Manager database as a local user (true) or an LDAP or Active Directory user (false).",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The [user ID](#section/Validation/User-Names) used to sign in to a Stealth endpoint. For example, **jane.doe@example.org** or **doejane**. When making requests to isolate a user in a domain, this value can contain backslashes; for example, domain\\doejane. This value must be unique.\n\nThis field is ignored when updating a user."
          },
          "organizationalUnit": {
            "type": "string",
            "description": "Indicates the organizational unit (OU) of the user registered as an LDAP or Active Directory user.\n\nThis field will only contain information if LDAP is enabled when the user is created in the Enterprise Manager, and it provides the user's organizational unit at the time the user is created. Any modifications made in Active Directory after the user is created are not reflected in this field.",
            "readOnly": true,
            "x-since": "4.0.027"
          },
          "password": {
            "type": "string",
            "description": "The encrypted and encoded [password](#section/Validation/Password) to secure the certificate-based authorization certificate for the user.\n\nA password must be set for a user if you want to authorize the user using certificate-based authorization and you want Enterprise Manager to create a certficate for this purpose. The password is used when creating the file for the certificate-based authorization certificate associated with the user.\n\nThe password must be encrypted using the public key of the valid, in-use Management Certificate. The encryption must use PKCS#1. The ciphertext must be in little-endian format. The password must be either Hex or Base64-encoded. This field is never returned in the XML/JSON output; it is only used when creating a user.\n\n You can only provide a password in an update user request if the user was created with a password.",
            "x-since": "4.0"
          },
          "previousPassword": {
            "type": "string",
            "description": "The previous [password](#section/Validation/Password) used to secure the certificate-based authorization certificate for the user, which is required in an update password request.\n\nThe password must be encrypted using the public key of the valid, in-use Management Certificate. The encryption must use PKCS#1. The ciphertext must be in little-endian format. The password must be either Hex or Base64-encoded. This field will never appear in the XML/JSON output.",
            "x-since": "4.0.027"
          }
        },
        "description": "A user included in this role. There can be any number of users in a role (including zero).",
        "xml": {
          "name": "user"
        }
      },
      "Users": {
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "xml": {
          "name": "users"
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Stealth(aware) Resources",
      "tags": [
        "Authorization",
        "Channel",
        "Endpoint Property Set",
        "Environment",
        "Flow",
        "Node Map",
        "Profile",
        "Project",
        "Solution"
      ]
    },
    {
      "name": "Stealth(core) Resources",
      "tags": [
        "COI",
        "Computer System",
        "Configuration",
        "Endpoint Package",
        "Filter",
        "Filter List",
        "Filter Set",
        "Group",
        "Qualifier",
        "Qualifier Filter",
        "Role",
        "User"
      ]
    },
    {
      "name": "Miscellaneous Resources",
      "tags": [
        "Admin Role",
        "Admin User",
        "API Status",
        "Cache",
        "Certificate",
        "Endpoint",
        "Endpoint Report",
        "LdapSettings",
        "License",
        "Request Status",
        "Service",
        "Session",
        "Settings",
        "Version"
      ]
    }
  ]
}